
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model CrowdMessages
 * 
 */
export type CrowdMessages = $Result.DefaultSelection<Prisma.$CrowdMessagesPayload>
/**
 * Model AccountDetails
 * 
 */
export type AccountDetails = $Result.DefaultSelection<Prisma.$AccountDetailsPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model ProductTypes
 * 
 */
export type ProductTypes = $Result.DefaultSelection<Prisma.$ProductTypesPayload>
/**
 * Model Brandname
 * 
 */
export type Brandname = $Result.DefaultSelection<Prisma.$BrandnamePayload>
/**
 * Model Inventory
 * 
 */
export type Inventory = $Result.DefaultSelection<Prisma.$InventoryPayload>
/**
 * Model ChildInventory
 * 
 */
export type ChildInventory = $Result.DefaultSelection<Prisma.$ChildInventoryPayload>
/**
 * Model Inv_subImage
 * 
 */
export type Inv_subImage = $Result.DefaultSelection<Prisma.$Inv_subImagePayload>
/**
 * Model AllowedDevices
 * 
 */
export type AllowedDevices = $Result.DefaultSelection<Prisma.$AllowedDevicesPayload>
/**
 * Model NumberOfViews
 * 
 */
export type NumberOfViews = $Result.DefaultSelection<Prisma.$NumberOfViewsPayload>
/**
 * Model WebsiteVisits
 * 
 */
export type WebsiteVisits = $Result.DefaultSelection<Prisma.$WebsiteVisitsPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.crowdMessages`: Exposes CRUD operations for the **CrowdMessages** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CrowdMessages
    * const crowdMessages = await prisma.crowdMessages.findMany()
    * ```
    */
  get crowdMessages(): Prisma.CrowdMessagesDelegate<ExtArgs>;

  /**
   * `prisma.accountDetails`: Exposes CRUD operations for the **AccountDetails** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccountDetails
    * const accountDetails = await prisma.accountDetails.findMany()
    * ```
    */
  get accountDetails(): Prisma.AccountDetailsDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.productTypes`: Exposes CRUD operations for the **ProductTypes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductTypes
    * const productTypes = await prisma.productTypes.findMany()
    * ```
    */
  get productTypes(): Prisma.ProductTypesDelegate<ExtArgs>;

  /**
   * `prisma.brandname`: Exposes CRUD operations for the **Brandname** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Brandnames
    * const brandnames = await prisma.brandname.findMany()
    * ```
    */
  get brandname(): Prisma.BrandnameDelegate<ExtArgs>;

  /**
   * `prisma.inventory`: Exposes CRUD operations for the **Inventory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Inventories
    * const inventories = await prisma.inventory.findMany()
    * ```
    */
  get inventory(): Prisma.InventoryDelegate<ExtArgs>;

  /**
   * `prisma.childInventory`: Exposes CRUD operations for the **ChildInventory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChildInventories
    * const childInventories = await prisma.childInventory.findMany()
    * ```
    */
  get childInventory(): Prisma.ChildInventoryDelegate<ExtArgs>;

  /**
   * `prisma.inv_subImage`: Exposes CRUD operations for the **Inv_subImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Inv_subImages
    * const inv_subImages = await prisma.inv_subImage.findMany()
    * ```
    */
  get inv_subImage(): Prisma.Inv_subImageDelegate<ExtArgs>;

  /**
   * `prisma.allowedDevices`: Exposes CRUD operations for the **AllowedDevices** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AllowedDevices
    * const allowedDevices = await prisma.allowedDevices.findMany()
    * ```
    */
  get allowedDevices(): Prisma.AllowedDevicesDelegate<ExtArgs>;

  /**
   * `prisma.numberOfViews`: Exposes CRUD operations for the **NumberOfViews** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NumberOfViews
    * const numberOfViews = await prisma.numberOfViews.findMany()
    * ```
    */
  get numberOfViews(): Prisma.NumberOfViewsDelegate<ExtArgs>;

  /**
   * `prisma.websiteVisits`: Exposes CRUD operations for the **WebsiteVisits** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WebsiteVisits
    * const websiteVisits = await prisma.websiteVisits.findMany()
    * ```
    */
  get websiteVisits(): Prisma.WebsiteVisitsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.5.2
   * Query Engine version: aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    CrowdMessages: 'CrowdMessages',
    AccountDetails: 'AccountDetails',
    Category: 'Category',
    ProductTypes: 'ProductTypes',
    Brandname: 'Brandname',
    Inventory: 'Inventory',
    ChildInventory: 'ChildInventory',
    Inv_subImage: 'Inv_subImage',
    AllowedDevices: 'AllowedDevices',
    NumberOfViews: 'NumberOfViews',
    WebsiteVisits: 'WebsiteVisits'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'crowdMessages' | 'accountDetails' | 'category' | 'productTypes' | 'brandname' | 'inventory' | 'childInventory' | 'inv_subImage' | 'allowedDevices' | 'numberOfViews' | 'websiteVisits'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      CrowdMessages: {
        payload: Prisma.$CrowdMessagesPayload<ExtArgs>
        fields: Prisma.CrowdMessagesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CrowdMessagesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CrowdMessagesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CrowdMessagesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CrowdMessagesPayload>
          }
          findFirst: {
            args: Prisma.CrowdMessagesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CrowdMessagesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CrowdMessagesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CrowdMessagesPayload>
          }
          findMany: {
            args: Prisma.CrowdMessagesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CrowdMessagesPayload>[]
          }
          create: {
            args: Prisma.CrowdMessagesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CrowdMessagesPayload>
          }
          delete: {
            args: Prisma.CrowdMessagesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CrowdMessagesPayload>
          }
          update: {
            args: Prisma.CrowdMessagesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CrowdMessagesPayload>
          }
          deleteMany: {
            args: Prisma.CrowdMessagesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CrowdMessagesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CrowdMessagesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CrowdMessagesPayload>
          }
          aggregate: {
            args: Prisma.CrowdMessagesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCrowdMessages>
          }
          groupBy: {
            args: Prisma.CrowdMessagesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CrowdMessagesGroupByOutputType>[]
          }
          count: {
            args: Prisma.CrowdMessagesCountArgs<ExtArgs>,
            result: $Utils.Optional<CrowdMessagesCountAggregateOutputType> | number
          }
        }
      }
      AccountDetails: {
        payload: Prisma.$AccountDetailsPayload<ExtArgs>
        fields: Prisma.AccountDetailsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountDetailsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountDetailsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountDetailsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountDetailsPayload>
          }
          findFirst: {
            args: Prisma.AccountDetailsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountDetailsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountDetailsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountDetailsPayload>
          }
          findMany: {
            args: Prisma.AccountDetailsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountDetailsPayload>[]
          }
          create: {
            args: Prisma.AccountDetailsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountDetailsPayload>
          }
          delete: {
            args: Prisma.AccountDetailsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountDetailsPayload>
          }
          update: {
            args: Prisma.AccountDetailsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountDetailsPayload>
          }
          deleteMany: {
            args: Prisma.AccountDetailsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AccountDetailsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AccountDetailsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountDetailsPayload>
          }
          aggregate: {
            args: Prisma.AccountDetailsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAccountDetails>
          }
          groupBy: {
            args: Prisma.AccountDetailsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AccountDetailsGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountDetailsCountArgs<ExtArgs>,
            result: $Utils.Optional<AccountDetailsCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      ProductTypes: {
        payload: Prisma.$ProductTypesPayload<ExtArgs>
        fields: Prisma.ProductTypesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductTypesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductTypesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductTypesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductTypesPayload>
          }
          findFirst: {
            args: Prisma.ProductTypesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductTypesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductTypesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductTypesPayload>
          }
          findMany: {
            args: Prisma.ProductTypesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductTypesPayload>[]
          }
          create: {
            args: Prisma.ProductTypesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductTypesPayload>
          }
          delete: {
            args: Prisma.ProductTypesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductTypesPayload>
          }
          update: {
            args: Prisma.ProductTypesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductTypesPayload>
          }
          deleteMany: {
            args: Prisma.ProductTypesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProductTypesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProductTypesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductTypesPayload>
          }
          aggregate: {
            args: Prisma.ProductTypesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProductTypes>
          }
          groupBy: {
            args: Prisma.ProductTypesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductTypesGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductTypesCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductTypesCountAggregateOutputType> | number
          }
        }
      }
      Brandname: {
        payload: Prisma.$BrandnamePayload<ExtArgs>
        fields: Prisma.BrandnameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BrandnameFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BrandnamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BrandnameFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BrandnamePayload>
          }
          findFirst: {
            args: Prisma.BrandnameFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BrandnamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BrandnameFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BrandnamePayload>
          }
          findMany: {
            args: Prisma.BrandnameFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BrandnamePayload>[]
          }
          create: {
            args: Prisma.BrandnameCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BrandnamePayload>
          }
          delete: {
            args: Prisma.BrandnameDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BrandnamePayload>
          }
          update: {
            args: Prisma.BrandnameUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BrandnamePayload>
          }
          deleteMany: {
            args: Prisma.BrandnameDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BrandnameUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BrandnameUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BrandnamePayload>
          }
          aggregate: {
            args: Prisma.BrandnameAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBrandname>
          }
          groupBy: {
            args: Prisma.BrandnameGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BrandnameGroupByOutputType>[]
          }
          count: {
            args: Prisma.BrandnameCountArgs<ExtArgs>,
            result: $Utils.Optional<BrandnameCountAggregateOutputType> | number
          }
        }
      }
      Inventory: {
        payload: Prisma.$InventoryPayload<ExtArgs>
        fields: Prisma.InventoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InventoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InventoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          findFirst: {
            args: Prisma.InventoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InventoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          findMany: {
            args: Prisma.InventoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>[]
          }
          create: {
            args: Prisma.InventoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          delete: {
            args: Prisma.InventoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          update: {
            args: Prisma.InventoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          deleteMany: {
            args: Prisma.InventoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.InventoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.InventoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          aggregate: {
            args: Prisma.InventoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateInventory>
          }
          groupBy: {
            args: Prisma.InventoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<InventoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.InventoryCountArgs<ExtArgs>,
            result: $Utils.Optional<InventoryCountAggregateOutputType> | number
          }
        }
      }
      ChildInventory: {
        payload: Prisma.$ChildInventoryPayload<ExtArgs>
        fields: Prisma.ChildInventoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChildInventoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChildInventoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChildInventoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChildInventoryPayload>
          }
          findFirst: {
            args: Prisma.ChildInventoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChildInventoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChildInventoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChildInventoryPayload>
          }
          findMany: {
            args: Prisma.ChildInventoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChildInventoryPayload>[]
          }
          create: {
            args: Prisma.ChildInventoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChildInventoryPayload>
          }
          delete: {
            args: Prisma.ChildInventoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChildInventoryPayload>
          }
          update: {
            args: Prisma.ChildInventoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChildInventoryPayload>
          }
          deleteMany: {
            args: Prisma.ChildInventoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ChildInventoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ChildInventoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChildInventoryPayload>
          }
          aggregate: {
            args: Prisma.ChildInventoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateChildInventory>
          }
          groupBy: {
            args: Prisma.ChildInventoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ChildInventoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChildInventoryCountArgs<ExtArgs>,
            result: $Utils.Optional<ChildInventoryCountAggregateOutputType> | number
          }
        }
      }
      Inv_subImage: {
        payload: Prisma.$Inv_subImagePayload<ExtArgs>
        fields: Prisma.Inv_subImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Inv_subImageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Inv_subImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Inv_subImageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Inv_subImagePayload>
          }
          findFirst: {
            args: Prisma.Inv_subImageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Inv_subImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Inv_subImageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Inv_subImagePayload>
          }
          findMany: {
            args: Prisma.Inv_subImageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Inv_subImagePayload>[]
          }
          create: {
            args: Prisma.Inv_subImageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Inv_subImagePayload>
          }
          delete: {
            args: Prisma.Inv_subImageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Inv_subImagePayload>
          }
          update: {
            args: Prisma.Inv_subImageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Inv_subImagePayload>
          }
          deleteMany: {
            args: Prisma.Inv_subImageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Inv_subImageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Inv_subImageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Inv_subImagePayload>
          }
          aggregate: {
            args: Prisma.Inv_subImageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateInv_subImage>
          }
          groupBy: {
            args: Prisma.Inv_subImageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Inv_subImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.Inv_subImageCountArgs<ExtArgs>,
            result: $Utils.Optional<Inv_subImageCountAggregateOutputType> | number
          }
        }
      }
      AllowedDevices: {
        payload: Prisma.$AllowedDevicesPayload<ExtArgs>
        fields: Prisma.AllowedDevicesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AllowedDevicesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AllowedDevicesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AllowedDevicesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AllowedDevicesPayload>
          }
          findFirst: {
            args: Prisma.AllowedDevicesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AllowedDevicesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AllowedDevicesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AllowedDevicesPayload>
          }
          findMany: {
            args: Prisma.AllowedDevicesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AllowedDevicesPayload>[]
          }
          create: {
            args: Prisma.AllowedDevicesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AllowedDevicesPayload>
          }
          delete: {
            args: Prisma.AllowedDevicesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AllowedDevicesPayload>
          }
          update: {
            args: Prisma.AllowedDevicesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AllowedDevicesPayload>
          }
          deleteMany: {
            args: Prisma.AllowedDevicesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AllowedDevicesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AllowedDevicesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AllowedDevicesPayload>
          }
          aggregate: {
            args: Prisma.AllowedDevicesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAllowedDevices>
          }
          groupBy: {
            args: Prisma.AllowedDevicesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AllowedDevicesGroupByOutputType>[]
          }
          count: {
            args: Prisma.AllowedDevicesCountArgs<ExtArgs>,
            result: $Utils.Optional<AllowedDevicesCountAggregateOutputType> | number
          }
        }
      }
      NumberOfViews: {
        payload: Prisma.$NumberOfViewsPayload<ExtArgs>
        fields: Prisma.NumberOfViewsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NumberOfViewsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NumberOfViewsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NumberOfViewsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NumberOfViewsPayload>
          }
          findFirst: {
            args: Prisma.NumberOfViewsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NumberOfViewsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NumberOfViewsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NumberOfViewsPayload>
          }
          findMany: {
            args: Prisma.NumberOfViewsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NumberOfViewsPayload>[]
          }
          create: {
            args: Prisma.NumberOfViewsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NumberOfViewsPayload>
          }
          delete: {
            args: Prisma.NumberOfViewsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NumberOfViewsPayload>
          }
          update: {
            args: Prisma.NumberOfViewsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NumberOfViewsPayload>
          }
          deleteMany: {
            args: Prisma.NumberOfViewsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NumberOfViewsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NumberOfViewsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NumberOfViewsPayload>
          }
          aggregate: {
            args: Prisma.NumberOfViewsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNumberOfViews>
          }
          groupBy: {
            args: Prisma.NumberOfViewsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NumberOfViewsGroupByOutputType>[]
          }
          count: {
            args: Prisma.NumberOfViewsCountArgs<ExtArgs>,
            result: $Utils.Optional<NumberOfViewsCountAggregateOutputType> | number
          }
        }
      }
      WebsiteVisits: {
        payload: Prisma.$WebsiteVisitsPayload<ExtArgs>
        fields: Prisma.WebsiteVisitsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WebsiteVisitsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WebsiteVisitsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WebsiteVisitsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WebsiteVisitsPayload>
          }
          findFirst: {
            args: Prisma.WebsiteVisitsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WebsiteVisitsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WebsiteVisitsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WebsiteVisitsPayload>
          }
          findMany: {
            args: Prisma.WebsiteVisitsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WebsiteVisitsPayload>[]
          }
          create: {
            args: Prisma.WebsiteVisitsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WebsiteVisitsPayload>
          }
          delete: {
            args: Prisma.WebsiteVisitsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WebsiteVisitsPayload>
          }
          update: {
            args: Prisma.WebsiteVisitsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WebsiteVisitsPayload>
          }
          deleteMany: {
            args: Prisma.WebsiteVisitsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.WebsiteVisitsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.WebsiteVisitsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WebsiteVisitsPayload>
          }
          aggregate: {
            args: Prisma.WebsiteVisitsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWebsiteVisits>
          }
          groupBy: {
            args: Prisma.WebsiteVisitsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WebsiteVisitsGroupByOutputType>[]
          }
          count: {
            args: Prisma.WebsiteVisitsCountArgs<ExtArgs>,
            result: $Utils.Optional<WebsiteVisitsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accountDetails: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accountDetails?: boolean | UserCountOutputTypeCountAccountDetailsArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountDetailsWhereInput
  }



  /**
   * Count Type InventoryCountOutputType
   */

  export type InventoryCountOutputType = {
    childInventory: number
  }

  export type InventoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    childInventory?: boolean | InventoryCountOutputTypeCountChildInventoryArgs
  }

  // Custom InputTypes

  /**
   * InventoryCountOutputType without action
   */
  export type InventoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCountOutputType
     */
    select?: InventoryCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * InventoryCountOutputType without action
   */
  export type InventoryCountOutputTypeCountChildInventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChildInventoryWhereInput
  }



  /**
   * Count Type ChildInventoryCountOutputType
   */

  export type ChildInventoryCountOutputType = {
    subImageFieldOut: number
  }

  export type ChildInventoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subImageFieldOut?: boolean | ChildInventoryCountOutputTypeCountSubImageFieldOutArgs
  }

  // Custom InputTypes

  /**
   * ChildInventoryCountOutputType without action
   */
  export type ChildInventoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChildInventoryCountOutputType
     */
    select?: ChildInventoryCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ChildInventoryCountOutputType without action
   */
  export type ChildInventoryCountOutputTypeCountSubImageFieldOutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Inv_subImageWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    accountCode: string | null
    password: string | null
    accountLevel: string | null
    loginAttemp: string | null
    macAddress: string | null
    agentIdentity: string | null
    image: string | null
    nameOfStore: string | null
    dateCreated: Date | null
    dateUpdated: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    accountCode: string | null
    password: string | null
    accountLevel: string | null
    loginAttemp: string | null
    macAddress: string | null
    agentIdentity: string | null
    image: string | null
    nameOfStore: string | null
    dateCreated: Date | null
    dateUpdated: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    accountCode: number
    password: number
    accountLevel: number
    loginAttemp: number
    macAddress: number
    agentIdentity: number
    image: number
    nameOfStore: number
    dateCreated: number
    dateUpdated: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    accountCode?: true
    password?: true
    accountLevel?: true
    loginAttemp?: true
    macAddress?: true
    agentIdentity?: true
    image?: true
    nameOfStore?: true
    dateCreated?: true
    dateUpdated?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    accountCode?: true
    password?: true
    accountLevel?: true
    loginAttemp?: true
    macAddress?: true
    agentIdentity?: true
    image?: true
    nameOfStore?: true
    dateCreated?: true
    dateUpdated?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    accountCode?: true
    password?: true
    accountLevel?: true
    loginAttemp?: true
    macAddress?: true
    agentIdentity?: true
    image?: true
    nameOfStore?: true
    dateCreated?: true
    dateUpdated?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    accountCode: string | null
    password: string | null
    accountLevel: string | null
    loginAttemp: string | null
    macAddress: string | null
    agentIdentity: string | null
    image: string | null
    nameOfStore: string | null
    dateCreated: Date
    dateUpdated: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    accountCode?: boolean
    password?: boolean
    accountLevel?: boolean
    loginAttemp?: boolean
    macAddress?: boolean
    agentIdentity?: boolean
    image?: boolean
    nameOfStore?: boolean
    dateCreated?: boolean
    dateUpdated?: boolean
    accountDetails?: boolean | User$accountDetailsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    accountCode?: boolean
    password?: boolean
    accountLevel?: boolean
    loginAttemp?: boolean
    macAddress?: boolean
    agentIdentity?: boolean
    image?: boolean
    nameOfStore?: boolean
    dateCreated?: boolean
    dateUpdated?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accountDetails?: boolean | User$accountDetailsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accountDetails: Prisma.$AccountDetailsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      accountCode: string | null
      password: string | null
      accountLevel: string | null
      loginAttemp: string | null
      macAddress: string | null
      agentIdentity: string | null
      image: string | null
      nameOfStore: string | null
      dateCreated: Date
      dateUpdated: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    accountDetails<T extends User$accountDetailsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountDetailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountDetailsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly accountCode: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly accountLevel: FieldRef<"User", 'String'>
    readonly loginAttemp: FieldRef<"User", 'String'>
    readonly macAddress: FieldRef<"User", 'String'>
    readonly agentIdentity: FieldRef<"User", 'String'>
    readonly image: FieldRef<"User", 'String'>
    readonly nameOfStore: FieldRef<"User", 'String'>
    readonly dateCreated: FieldRef<"User", 'DateTime'>
    readonly dateUpdated: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.accountDetails
   */
  export type User$accountDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountDetails
     */
    select?: AccountDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountDetailsInclude<ExtArgs> | null
    where?: AccountDetailsWhereInput
    orderBy?: AccountDetailsOrderByWithRelationInput | AccountDetailsOrderByWithRelationInput[]
    cursor?: AccountDetailsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountDetailsScalarFieldEnum | AccountDetailsScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model CrowdMessages
   */

  export type AggregateCrowdMessages = {
    _count: CrowdMessagesCountAggregateOutputType | null
    _min: CrowdMessagesMinAggregateOutputType | null
    _max: CrowdMessagesMaxAggregateOutputType | null
  }

  export type CrowdMessagesMinAggregateOutputType = {
    id: string | null
    Messages: string | null
    Sender: string | null
    dateSent: Date | null
  }

  export type CrowdMessagesMaxAggregateOutputType = {
    id: string | null
    Messages: string | null
    Sender: string | null
    dateSent: Date | null
  }

  export type CrowdMessagesCountAggregateOutputType = {
    id: number
    Messages: number
    Sender: number
    dateSent: number
    _all: number
  }


  export type CrowdMessagesMinAggregateInputType = {
    id?: true
    Messages?: true
    Sender?: true
    dateSent?: true
  }

  export type CrowdMessagesMaxAggregateInputType = {
    id?: true
    Messages?: true
    Sender?: true
    dateSent?: true
  }

  export type CrowdMessagesCountAggregateInputType = {
    id?: true
    Messages?: true
    Sender?: true
    dateSent?: true
    _all?: true
  }

  export type CrowdMessagesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CrowdMessages to aggregate.
     */
    where?: CrowdMessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CrowdMessages to fetch.
     */
    orderBy?: CrowdMessagesOrderByWithRelationInput | CrowdMessagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CrowdMessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CrowdMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CrowdMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CrowdMessages
    **/
    _count?: true | CrowdMessagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CrowdMessagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CrowdMessagesMaxAggregateInputType
  }

  export type GetCrowdMessagesAggregateType<T extends CrowdMessagesAggregateArgs> = {
        [P in keyof T & keyof AggregateCrowdMessages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCrowdMessages[P]>
      : GetScalarType<T[P], AggregateCrowdMessages[P]>
  }




  export type CrowdMessagesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CrowdMessagesWhereInput
    orderBy?: CrowdMessagesOrderByWithAggregationInput | CrowdMessagesOrderByWithAggregationInput[]
    by: CrowdMessagesScalarFieldEnum[] | CrowdMessagesScalarFieldEnum
    having?: CrowdMessagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CrowdMessagesCountAggregateInputType | true
    _min?: CrowdMessagesMinAggregateInputType
    _max?: CrowdMessagesMaxAggregateInputType
  }

  export type CrowdMessagesGroupByOutputType = {
    id: string
    Messages: string | null
    Sender: string | null
    dateSent: Date
    _count: CrowdMessagesCountAggregateOutputType | null
    _min: CrowdMessagesMinAggregateOutputType | null
    _max: CrowdMessagesMaxAggregateOutputType | null
  }

  type GetCrowdMessagesGroupByPayload<T extends CrowdMessagesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CrowdMessagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CrowdMessagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CrowdMessagesGroupByOutputType[P]>
            : GetScalarType<T[P], CrowdMessagesGroupByOutputType[P]>
        }
      >
    >


  export type CrowdMessagesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Messages?: boolean
    Sender?: boolean
    dateSent?: boolean
  }, ExtArgs["result"]["crowdMessages"]>

  export type CrowdMessagesSelectScalar = {
    id?: boolean
    Messages?: boolean
    Sender?: boolean
    dateSent?: boolean
  }


  export type $CrowdMessagesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CrowdMessages"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      Messages: string | null
      Sender: string | null
      dateSent: Date
    }, ExtArgs["result"]["crowdMessages"]>
    composites: {}
  }


  type CrowdMessagesGetPayload<S extends boolean | null | undefined | CrowdMessagesDefaultArgs> = $Result.GetResult<Prisma.$CrowdMessagesPayload, S>

  type CrowdMessagesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CrowdMessagesFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CrowdMessagesCountAggregateInputType | true
    }

  export interface CrowdMessagesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CrowdMessages'], meta: { name: 'CrowdMessages' } }
    /**
     * Find zero or one CrowdMessages that matches the filter.
     * @param {CrowdMessagesFindUniqueArgs} args - Arguments to find a CrowdMessages
     * @example
     * // Get one CrowdMessages
     * const crowdMessages = await prisma.crowdMessages.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CrowdMessagesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CrowdMessagesFindUniqueArgs<ExtArgs>>
    ): Prisma__CrowdMessagesClient<$Result.GetResult<Prisma.$CrowdMessagesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CrowdMessages that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CrowdMessagesFindUniqueOrThrowArgs} args - Arguments to find a CrowdMessages
     * @example
     * // Get one CrowdMessages
     * const crowdMessages = await prisma.crowdMessages.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CrowdMessagesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CrowdMessagesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CrowdMessagesClient<$Result.GetResult<Prisma.$CrowdMessagesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CrowdMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CrowdMessagesFindFirstArgs} args - Arguments to find a CrowdMessages
     * @example
     * // Get one CrowdMessages
     * const crowdMessages = await prisma.crowdMessages.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CrowdMessagesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CrowdMessagesFindFirstArgs<ExtArgs>>
    ): Prisma__CrowdMessagesClient<$Result.GetResult<Prisma.$CrowdMessagesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CrowdMessages that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CrowdMessagesFindFirstOrThrowArgs} args - Arguments to find a CrowdMessages
     * @example
     * // Get one CrowdMessages
     * const crowdMessages = await prisma.crowdMessages.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CrowdMessagesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CrowdMessagesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CrowdMessagesClient<$Result.GetResult<Prisma.$CrowdMessagesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CrowdMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CrowdMessagesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CrowdMessages
     * const crowdMessages = await prisma.crowdMessages.findMany()
     * 
     * // Get first 10 CrowdMessages
     * const crowdMessages = await prisma.crowdMessages.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const crowdMessagesWithIdOnly = await prisma.crowdMessages.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CrowdMessagesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CrowdMessagesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CrowdMessagesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CrowdMessages.
     * @param {CrowdMessagesCreateArgs} args - Arguments to create a CrowdMessages.
     * @example
     * // Create one CrowdMessages
     * const CrowdMessages = await prisma.crowdMessages.create({
     *   data: {
     *     // ... data to create a CrowdMessages
     *   }
     * })
     * 
    **/
    create<T extends CrowdMessagesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CrowdMessagesCreateArgs<ExtArgs>>
    ): Prisma__CrowdMessagesClient<$Result.GetResult<Prisma.$CrowdMessagesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a CrowdMessages.
     * @param {CrowdMessagesDeleteArgs} args - Arguments to delete one CrowdMessages.
     * @example
     * // Delete one CrowdMessages
     * const CrowdMessages = await prisma.crowdMessages.delete({
     *   where: {
     *     // ... filter to delete one CrowdMessages
     *   }
     * })
     * 
    **/
    delete<T extends CrowdMessagesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CrowdMessagesDeleteArgs<ExtArgs>>
    ): Prisma__CrowdMessagesClient<$Result.GetResult<Prisma.$CrowdMessagesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CrowdMessages.
     * @param {CrowdMessagesUpdateArgs} args - Arguments to update one CrowdMessages.
     * @example
     * // Update one CrowdMessages
     * const crowdMessages = await prisma.crowdMessages.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CrowdMessagesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CrowdMessagesUpdateArgs<ExtArgs>>
    ): Prisma__CrowdMessagesClient<$Result.GetResult<Prisma.$CrowdMessagesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CrowdMessages.
     * @param {CrowdMessagesDeleteManyArgs} args - Arguments to filter CrowdMessages to delete.
     * @example
     * // Delete a few CrowdMessages
     * const { count } = await prisma.crowdMessages.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CrowdMessagesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CrowdMessagesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CrowdMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CrowdMessagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CrowdMessages
     * const crowdMessages = await prisma.crowdMessages.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CrowdMessagesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CrowdMessagesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CrowdMessages.
     * @param {CrowdMessagesUpsertArgs} args - Arguments to update or create a CrowdMessages.
     * @example
     * // Update or create a CrowdMessages
     * const crowdMessages = await prisma.crowdMessages.upsert({
     *   create: {
     *     // ... data to create a CrowdMessages
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CrowdMessages we want to update
     *   }
     * })
    **/
    upsert<T extends CrowdMessagesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CrowdMessagesUpsertArgs<ExtArgs>>
    ): Prisma__CrowdMessagesClient<$Result.GetResult<Prisma.$CrowdMessagesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CrowdMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CrowdMessagesCountArgs} args - Arguments to filter CrowdMessages to count.
     * @example
     * // Count the number of CrowdMessages
     * const count = await prisma.crowdMessages.count({
     *   where: {
     *     // ... the filter for the CrowdMessages we want to count
     *   }
     * })
    **/
    count<T extends CrowdMessagesCountArgs>(
      args?: Subset<T, CrowdMessagesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CrowdMessagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CrowdMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CrowdMessagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CrowdMessagesAggregateArgs>(args: Subset<T, CrowdMessagesAggregateArgs>): Prisma.PrismaPromise<GetCrowdMessagesAggregateType<T>>

    /**
     * Group by CrowdMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CrowdMessagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CrowdMessagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CrowdMessagesGroupByArgs['orderBy'] }
        : { orderBy?: CrowdMessagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CrowdMessagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCrowdMessagesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CrowdMessages model
   */
  readonly fields: CrowdMessagesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CrowdMessages.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CrowdMessagesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CrowdMessages model
   */ 
  interface CrowdMessagesFieldRefs {
    readonly id: FieldRef<"CrowdMessages", 'String'>
    readonly Messages: FieldRef<"CrowdMessages", 'String'>
    readonly Sender: FieldRef<"CrowdMessages", 'String'>
    readonly dateSent: FieldRef<"CrowdMessages", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * CrowdMessages findUnique
   */
  export type CrowdMessagesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrowdMessages
     */
    select?: CrowdMessagesSelect<ExtArgs> | null
    /**
     * Filter, which CrowdMessages to fetch.
     */
    where: CrowdMessagesWhereUniqueInput
  }


  /**
   * CrowdMessages findUniqueOrThrow
   */
  export type CrowdMessagesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrowdMessages
     */
    select?: CrowdMessagesSelect<ExtArgs> | null
    /**
     * Filter, which CrowdMessages to fetch.
     */
    where: CrowdMessagesWhereUniqueInput
  }


  /**
   * CrowdMessages findFirst
   */
  export type CrowdMessagesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrowdMessages
     */
    select?: CrowdMessagesSelect<ExtArgs> | null
    /**
     * Filter, which CrowdMessages to fetch.
     */
    where?: CrowdMessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CrowdMessages to fetch.
     */
    orderBy?: CrowdMessagesOrderByWithRelationInput | CrowdMessagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CrowdMessages.
     */
    cursor?: CrowdMessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CrowdMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CrowdMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CrowdMessages.
     */
    distinct?: CrowdMessagesScalarFieldEnum | CrowdMessagesScalarFieldEnum[]
  }


  /**
   * CrowdMessages findFirstOrThrow
   */
  export type CrowdMessagesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrowdMessages
     */
    select?: CrowdMessagesSelect<ExtArgs> | null
    /**
     * Filter, which CrowdMessages to fetch.
     */
    where?: CrowdMessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CrowdMessages to fetch.
     */
    orderBy?: CrowdMessagesOrderByWithRelationInput | CrowdMessagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CrowdMessages.
     */
    cursor?: CrowdMessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CrowdMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CrowdMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CrowdMessages.
     */
    distinct?: CrowdMessagesScalarFieldEnum | CrowdMessagesScalarFieldEnum[]
  }


  /**
   * CrowdMessages findMany
   */
  export type CrowdMessagesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrowdMessages
     */
    select?: CrowdMessagesSelect<ExtArgs> | null
    /**
     * Filter, which CrowdMessages to fetch.
     */
    where?: CrowdMessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CrowdMessages to fetch.
     */
    orderBy?: CrowdMessagesOrderByWithRelationInput | CrowdMessagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CrowdMessages.
     */
    cursor?: CrowdMessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CrowdMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CrowdMessages.
     */
    skip?: number
    distinct?: CrowdMessagesScalarFieldEnum | CrowdMessagesScalarFieldEnum[]
  }


  /**
   * CrowdMessages create
   */
  export type CrowdMessagesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrowdMessages
     */
    select?: CrowdMessagesSelect<ExtArgs> | null
    /**
     * The data needed to create a CrowdMessages.
     */
    data?: XOR<CrowdMessagesCreateInput, CrowdMessagesUncheckedCreateInput>
  }


  /**
   * CrowdMessages update
   */
  export type CrowdMessagesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrowdMessages
     */
    select?: CrowdMessagesSelect<ExtArgs> | null
    /**
     * The data needed to update a CrowdMessages.
     */
    data: XOR<CrowdMessagesUpdateInput, CrowdMessagesUncheckedUpdateInput>
    /**
     * Choose, which CrowdMessages to update.
     */
    where: CrowdMessagesWhereUniqueInput
  }


  /**
   * CrowdMessages updateMany
   */
  export type CrowdMessagesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CrowdMessages.
     */
    data: XOR<CrowdMessagesUpdateManyMutationInput, CrowdMessagesUncheckedUpdateManyInput>
    /**
     * Filter which CrowdMessages to update
     */
    where?: CrowdMessagesWhereInput
  }


  /**
   * CrowdMessages upsert
   */
  export type CrowdMessagesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrowdMessages
     */
    select?: CrowdMessagesSelect<ExtArgs> | null
    /**
     * The filter to search for the CrowdMessages to update in case it exists.
     */
    where: CrowdMessagesWhereUniqueInput
    /**
     * In case the CrowdMessages found by the `where` argument doesn't exist, create a new CrowdMessages with this data.
     */
    create: XOR<CrowdMessagesCreateInput, CrowdMessagesUncheckedCreateInput>
    /**
     * In case the CrowdMessages was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CrowdMessagesUpdateInput, CrowdMessagesUncheckedUpdateInput>
  }


  /**
   * CrowdMessages delete
   */
  export type CrowdMessagesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrowdMessages
     */
    select?: CrowdMessagesSelect<ExtArgs> | null
    /**
     * Filter which CrowdMessages to delete.
     */
    where: CrowdMessagesWhereUniqueInput
  }


  /**
   * CrowdMessages deleteMany
   */
  export type CrowdMessagesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CrowdMessages to delete
     */
    where?: CrowdMessagesWhereInput
  }


  /**
   * CrowdMessages without action
   */
  export type CrowdMessagesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrowdMessages
     */
    select?: CrowdMessagesSelect<ExtArgs> | null
  }



  /**
   * Model AccountDetails
   */

  export type AggregateAccountDetails = {
    _count: AccountDetailsCountAggregateOutputType | null
    _avg: AccountDetailsAvgAggregateOutputType | null
    _sum: AccountDetailsSumAggregateOutputType | null
    _min: AccountDetailsMinAggregateOutputType | null
    _max: AccountDetailsMaxAggregateOutputType | null
  }

  export type AccountDetailsAvgAggregateOutputType = {
    id: number | null
  }

  export type AccountDetailsSumAggregateOutputType = {
    id: number | null
  }

  export type AccountDetailsMinAggregateOutputType = {
    id: number | null
    userId: string | null
    fullname: string | null
    storeName: string | null
    contactNo: string | null
    Address: string | null
    accountEmail: string | null
  }

  export type AccountDetailsMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    fullname: string | null
    storeName: string | null
    contactNo: string | null
    Address: string | null
    accountEmail: string | null
  }

  export type AccountDetailsCountAggregateOutputType = {
    id: number
    userId: number
    fullname: number
    storeName: number
    contactNo: number
    Address: number
    accountEmail: number
    _all: number
  }


  export type AccountDetailsAvgAggregateInputType = {
    id?: true
  }

  export type AccountDetailsSumAggregateInputType = {
    id?: true
  }

  export type AccountDetailsMinAggregateInputType = {
    id?: true
    userId?: true
    fullname?: true
    storeName?: true
    contactNo?: true
    Address?: true
    accountEmail?: true
  }

  export type AccountDetailsMaxAggregateInputType = {
    id?: true
    userId?: true
    fullname?: true
    storeName?: true
    contactNo?: true
    Address?: true
    accountEmail?: true
  }

  export type AccountDetailsCountAggregateInputType = {
    id?: true
    userId?: true
    fullname?: true
    storeName?: true
    contactNo?: true
    Address?: true
    accountEmail?: true
    _all?: true
  }

  export type AccountDetailsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountDetails to aggregate.
     */
    where?: AccountDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountDetails to fetch.
     */
    orderBy?: AccountDetailsOrderByWithRelationInput | AccountDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccountDetails
    **/
    _count?: true | AccountDetailsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountDetailsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountDetailsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountDetailsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountDetailsMaxAggregateInputType
  }

  export type GetAccountDetailsAggregateType<T extends AccountDetailsAggregateArgs> = {
        [P in keyof T & keyof AggregateAccountDetails]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccountDetails[P]>
      : GetScalarType<T[P], AggregateAccountDetails[P]>
  }




  export type AccountDetailsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountDetailsWhereInput
    orderBy?: AccountDetailsOrderByWithAggregationInput | AccountDetailsOrderByWithAggregationInput[]
    by: AccountDetailsScalarFieldEnum[] | AccountDetailsScalarFieldEnum
    having?: AccountDetailsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountDetailsCountAggregateInputType | true
    _avg?: AccountDetailsAvgAggregateInputType
    _sum?: AccountDetailsSumAggregateInputType
    _min?: AccountDetailsMinAggregateInputType
    _max?: AccountDetailsMaxAggregateInputType
  }

  export type AccountDetailsGroupByOutputType = {
    id: number
    userId: string
    fullname: string | null
    storeName: string | null
    contactNo: string | null
    Address: string | null
    accountEmail: string
    _count: AccountDetailsCountAggregateOutputType | null
    _avg: AccountDetailsAvgAggregateOutputType | null
    _sum: AccountDetailsSumAggregateOutputType | null
    _min: AccountDetailsMinAggregateOutputType | null
    _max: AccountDetailsMaxAggregateOutputType | null
  }

  type GetAccountDetailsGroupByPayload<T extends AccountDetailsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountDetailsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountDetailsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountDetailsGroupByOutputType[P]>
            : GetScalarType<T[P], AccountDetailsGroupByOutputType[P]>
        }
      >
    >


  export type AccountDetailsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    fullname?: boolean
    storeName?: boolean
    contactNo?: boolean
    Address?: boolean
    accountEmail?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accountDetails"]>

  export type AccountDetailsSelectScalar = {
    id?: boolean
    userId?: boolean
    fullname?: boolean
    storeName?: boolean
    contactNo?: boolean
    Address?: boolean
    accountEmail?: boolean
  }

  export type AccountDetailsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $AccountDetailsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AccountDetails"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      fullname: string | null
      storeName: string | null
      contactNo: string | null
      Address: string | null
      accountEmail: string
    }, ExtArgs["result"]["accountDetails"]>
    composites: {}
  }


  type AccountDetailsGetPayload<S extends boolean | null | undefined | AccountDetailsDefaultArgs> = $Result.GetResult<Prisma.$AccountDetailsPayload, S>

  type AccountDetailsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountDetailsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: AccountDetailsCountAggregateInputType | true
    }

  export interface AccountDetailsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccountDetails'], meta: { name: 'AccountDetails' } }
    /**
     * Find zero or one AccountDetails that matches the filter.
     * @param {AccountDetailsFindUniqueArgs} args - Arguments to find a AccountDetails
     * @example
     * // Get one AccountDetails
     * const accountDetails = await prisma.accountDetails.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccountDetailsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AccountDetailsFindUniqueArgs<ExtArgs>>
    ): Prisma__AccountDetailsClient<$Result.GetResult<Prisma.$AccountDetailsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one AccountDetails that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AccountDetailsFindUniqueOrThrowArgs} args - Arguments to find a AccountDetails
     * @example
     * // Get one AccountDetails
     * const accountDetails = await prisma.accountDetails.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AccountDetailsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountDetailsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AccountDetailsClient<$Result.GetResult<Prisma.$AccountDetailsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first AccountDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountDetailsFindFirstArgs} args - Arguments to find a AccountDetails
     * @example
     * // Get one AccountDetails
     * const accountDetails = await prisma.accountDetails.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccountDetailsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountDetailsFindFirstArgs<ExtArgs>>
    ): Prisma__AccountDetailsClient<$Result.GetResult<Prisma.$AccountDetailsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first AccountDetails that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountDetailsFindFirstOrThrowArgs} args - Arguments to find a AccountDetails
     * @example
     * // Get one AccountDetails
     * const accountDetails = await prisma.accountDetails.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AccountDetailsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountDetailsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AccountDetailsClient<$Result.GetResult<Prisma.$AccountDetailsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more AccountDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountDetailsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccountDetails
     * const accountDetails = await prisma.accountDetails.findMany()
     * 
     * // Get first 10 AccountDetails
     * const accountDetails = await prisma.accountDetails.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountDetailsWithIdOnly = await prisma.accountDetails.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccountDetailsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountDetailsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountDetailsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a AccountDetails.
     * @param {AccountDetailsCreateArgs} args - Arguments to create a AccountDetails.
     * @example
     * // Create one AccountDetails
     * const AccountDetails = await prisma.accountDetails.create({
     *   data: {
     *     // ... data to create a AccountDetails
     *   }
     * })
     * 
    **/
    create<T extends AccountDetailsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountDetailsCreateArgs<ExtArgs>>
    ): Prisma__AccountDetailsClient<$Result.GetResult<Prisma.$AccountDetailsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a AccountDetails.
     * @param {AccountDetailsDeleteArgs} args - Arguments to delete one AccountDetails.
     * @example
     * // Delete one AccountDetails
     * const AccountDetails = await prisma.accountDetails.delete({
     *   where: {
     *     // ... filter to delete one AccountDetails
     *   }
     * })
     * 
    **/
    delete<T extends AccountDetailsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AccountDetailsDeleteArgs<ExtArgs>>
    ): Prisma__AccountDetailsClient<$Result.GetResult<Prisma.$AccountDetailsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one AccountDetails.
     * @param {AccountDetailsUpdateArgs} args - Arguments to update one AccountDetails.
     * @example
     * // Update one AccountDetails
     * const accountDetails = await prisma.accountDetails.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccountDetailsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountDetailsUpdateArgs<ExtArgs>>
    ): Prisma__AccountDetailsClient<$Result.GetResult<Prisma.$AccountDetailsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more AccountDetails.
     * @param {AccountDetailsDeleteManyArgs} args - Arguments to filter AccountDetails to delete.
     * @example
     * // Delete a few AccountDetails
     * const { count } = await prisma.accountDetails.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccountDetailsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountDetailsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccountDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountDetailsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccountDetails
     * const accountDetails = await prisma.accountDetails.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccountDetailsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AccountDetailsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AccountDetails.
     * @param {AccountDetailsUpsertArgs} args - Arguments to update or create a AccountDetails.
     * @example
     * // Update or create a AccountDetails
     * const accountDetails = await prisma.accountDetails.upsert({
     *   create: {
     *     // ... data to create a AccountDetails
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccountDetails we want to update
     *   }
     * })
    **/
    upsert<T extends AccountDetailsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AccountDetailsUpsertArgs<ExtArgs>>
    ): Prisma__AccountDetailsClient<$Result.GetResult<Prisma.$AccountDetailsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of AccountDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountDetailsCountArgs} args - Arguments to filter AccountDetails to count.
     * @example
     * // Count the number of AccountDetails
     * const count = await prisma.accountDetails.count({
     *   where: {
     *     // ... the filter for the AccountDetails we want to count
     *   }
     * })
    **/
    count<T extends AccountDetailsCountArgs>(
      args?: Subset<T, AccountDetailsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountDetailsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccountDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountDetailsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountDetailsAggregateArgs>(args: Subset<T, AccountDetailsAggregateArgs>): Prisma.PrismaPromise<GetAccountDetailsAggregateType<T>>

    /**
     * Group by AccountDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountDetailsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountDetailsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountDetailsGroupByArgs['orderBy'] }
        : { orderBy?: AccountDetailsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountDetailsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountDetailsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AccountDetails model
   */
  readonly fields: AccountDetailsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AccountDetails.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountDetailsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the AccountDetails model
   */ 
  interface AccountDetailsFieldRefs {
    readonly id: FieldRef<"AccountDetails", 'Int'>
    readonly userId: FieldRef<"AccountDetails", 'String'>
    readonly fullname: FieldRef<"AccountDetails", 'String'>
    readonly storeName: FieldRef<"AccountDetails", 'String'>
    readonly contactNo: FieldRef<"AccountDetails", 'String'>
    readonly Address: FieldRef<"AccountDetails", 'String'>
    readonly accountEmail: FieldRef<"AccountDetails", 'String'>
  }
    

  // Custom InputTypes

  /**
   * AccountDetails findUnique
   */
  export type AccountDetailsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountDetails
     */
    select?: AccountDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountDetailsInclude<ExtArgs> | null
    /**
     * Filter, which AccountDetails to fetch.
     */
    where: AccountDetailsWhereUniqueInput
  }


  /**
   * AccountDetails findUniqueOrThrow
   */
  export type AccountDetailsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountDetails
     */
    select?: AccountDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountDetailsInclude<ExtArgs> | null
    /**
     * Filter, which AccountDetails to fetch.
     */
    where: AccountDetailsWhereUniqueInput
  }


  /**
   * AccountDetails findFirst
   */
  export type AccountDetailsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountDetails
     */
    select?: AccountDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountDetailsInclude<ExtArgs> | null
    /**
     * Filter, which AccountDetails to fetch.
     */
    where?: AccountDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountDetails to fetch.
     */
    orderBy?: AccountDetailsOrderByWithRelationInput | AccountDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountDetails.
     */
    cursor?: AccountDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountDetails.
     */
    distinct?: AccountDetailsScalarFieldEnum | AccountDetailsScalarFieldEnum[]
  }


  /**
   * AccountDetails findFirstOrThrow
   */
  export type AccountDetailsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountDetails
     */
    select?: AccountDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountDetailsInclude<ExtArgs> | null
    /**
     * Filter, which AccountDetails to fetch.
     */
    where?: AccountDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountDetails to fetch.
     */
    orderBy?: AccountDetailsOrderByWithRelationInput | AccountDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountDetails.
     */
    cursor?: AccountDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountDetails.
     */
    distinct?: AccountDetailsScalarFieldEnum | AccountDetailsScalarFieldEnum[]
  }


  /**
   * AccountDetails findMany
   */
  export type AccountDetailsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountDetails
     */
    select?: AccountDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountDetailsInclude<ExtArgs> | null
    /**
     * Filter, which AccountDetails to fetch.
     */
    where?: AccountDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountDetails to fetch.
     */
    orderBy?: AccountDetailsOrderByWithRelationInput | AccountDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccountDetails.
     */
    cursor?: AccountDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountDetails.
     */
    skip?: number
    distinct?: AccountDetailsScalarFieldEnum | AccountDetailsScalarFieldEnum[]
  }


  /**
   * AccountDetails create
   */
  export type AccountDetailsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountDetails
     */
    select?: AccountDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountDetailsInclude<ExtArgs> | null
    /**
     * The data needed to create a AccountDetails.
     */
    data: XOR<AccountDetailsCreateInput, AccountDetailsUncheckedCreateInput>
  }


  /**
   * AccountDetails update
   */
  export type AccountDetailsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountDetails
     */
    select?: AccountDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountDetailsInclude<ExtArgs> | null
    /**
     * The data needed to update a AccountDetails.
     */
    data: XOR<AccountDetailsUpdateInput, AccountDetailsUncheckedUpdateInput>
    /**
     * Choose, which AccountDetails to update.
     */
    where: AccountDetailsWhereUniqueInput
  }


  /**
   * AccountDetails updateMany
   */
  export type AccountDetailsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AccountDetails.
     */
    data: XOR<AccountDetailsUpdateManyMutationInput, AccountDetailsUncheckedUpdateManyInput>
    /**
     * Filter which AccountDetails to update
     */
    where?: AccountDetailsWhereInput
  }


  /**
   * AccountDetails upsert
   */
  export type AccountDetailsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountDetails
     */
    select?: AccountDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountDetailsInclude<ExtArgs> | null
    /**
     * The filter to search for the AccountDetails to update in case it exists.
     */
    where: AccountDetailsWhereUniqueInput
    /**
     * In case the AccountDetails found by the `where` argument doesn't exist, create a new AccountDetails with this data.
     */
    create: XOR<AccountDetailsCreateInput, AccountDetailsUncheckedCreateInput>
    /**
     * In case the AccountDetails was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountDetailsUpdateInput, AccountDetailsUncheckedUpdateInput>
  }


  /**
   * AccountDetails delete
   */
  export type AccountDetailsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountDetails
     */
    select?: AccountDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountDetailsInclude<ExtArgs> | null
    /**
     * Filter which AccountDetails to delete.
     */
    where: AccountDetailsWhereUniqueInput
  }


  /**
   * AccountDetails deleteMany
   */
  export type AccountDetailsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountDetails to delete
     */
    where?: AccountDetailsWhereInput
  }


  /**
   * AccountDetails without action
   */
  export type AccountDetailsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountDetails
     */
    select?: AccountDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountDetailsInclude<ExtArgs> | null
  }



  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    Name: string | null
    status: string | null
    icon: string | null
    image: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    Name: string | null
    status: string | null
    icon: string | null
    image: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    Name: number
    status: number
    icon: number
    image: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    Name?: true
    status?: true
    icon?: true
    image?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    Name?: true
    status?: true
    icon?: true
    image?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    Name?: true
    status?: true
    icon?: true
    image?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: number
    Name: string | null
    status: string | null
    icon: string | null
    image: string | null
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Name?: boolean
    status?: boolean
    icon?: boolean
    image?: boolean
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    Name?: boolean
    status?: boolean
    icon?: boolean
    image?: boolean
  }


  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      Name: string | null
      status: string | null
      icon: string | null
      image: string | null
    }, ExtArgs["result"]["category"]>
    composites: {}
  }


  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'Int'>
    readonly Name: FieldRef<"Category", 'String'>
    readonly status: FieldRef<"Category", 'String'>
    readonly icon: FieldRef<"Category", 'String'>
    readonly image: FieldRef<"Category", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data?: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }


  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }


  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }


  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }


  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
  }



  /**
   * Model ProductTypes
   */

  export type AggregateProductTypes = {
    _count: ProductTypesCountAggregateOutputType | null
    _avg: ProductTypesAvgAggregateOutputType | null
    _sum: ProductTypesSumAggregateOutputType | null
    _min: ProductTypesMinAggregateOutputType | null
    _max: ProductTypesMaxAggregateOutputType | null
  }

  export type ProductTypesAvgAggregateOutputType = {
    id: number | null
  }

  export type ProductTypesSumAggregateOutputType = {
    id: number | null
  }

  export type ProductTypesMinAggregateOutputType = {
    id: number | null
    Category: string | null
    Name: string | null
  }

  export type ProductTypesMaxAggregateOutputType = {
    id: number | null
    Category: string | null
    Name: string | null
  }

  export type ProductTypesCountAggregateOutputType = {
    id: number
    Category: number
    Name: number
    _all: number
  }


  export type ProductTypesAvgAggregateInputType = {
    id?: true
  }

  export type ProductTypesSumAggregateInputType = {
    id?: true
  }

  export type ProductTypesMinAggregateInputType = {
    id?: true
    Category?: true
    Name?: true
  }

  export type ProductTypesMaxAggregateInputType = {
    id?: true
    Category?: true
    Name?: true
  }

  export type ProductTypesCountAggregateInputType = {
    id?: true
    Category?: true
    Name?: true
    _all?: true
  }

  export type ProductTypesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductTypes to aggregate.
     */
    where?: ProductTypesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductTypes to fetch.
     */
    orderBy?: ProductTypesOrderByWithRelationInput | ProductTypesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductTypesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductTypes
    **/
    _count?: true | ProductTypesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductTypesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductTypesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductTypesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductTypesMaxAggregateInputType
  }

  export type GetProductTypesAggregateType<T extends ProductTypesAggregateArgs> = {
        [P in keyof T & keyof AggregateProductTypes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductTypes[P]>
      : GetScalarType<T[P], AggregateProductTypes[P]>
  }




  export type ProductTypesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductTypesWhereInput
    orderBy?: ProductTypesOrderByWithAggregationInput | ProductTypesOrderByWithAggregationInput[]
    by: ProductTypesScalarFieldEnum[] | ProductTypesScalarFieldEnum
    having?: ProductTypesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductTypesCountAggregateInputType | true
    _avg?: ProductTypesAvgAggregateInputType
    _sum?: ProductTypesSumAggregateInputType
    _min?: ProductTypesMinAggregateInputType
    _max?: ProductTypesMaxAggregateInputType
  }

  export type ProductTypesGroupByOutputType = {
    id: number
    Category: string | null
    Name: string | null
    _count: ProductTypesCountAggregateOutputType | null
    _avg: ProductTypesAvgAggregateOutputType | null
    _sum: ProductTypesSumAggregateOutputType | null
    _min: ProductTypesMinAggregateOutputType | null
    _max: ProductTypesMaxAggregateOutputType | null
  }

  type GetProductTypesGroupByPayload<T extends ProductTypesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductTypesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductTypesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductTypesGroupByOutputType[P]>
            : GetScalarType<T[P], ProductTypesGroupByOutputType[P]>
        }
      >
    >


  export type ProductTypesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Category?: boolean
    Name?: boolean
  }, ExtArgs["result"]["productTypes"]>

  export type ProductTypesSelectScalar = {
    id?: boolean
    Category?: boolean
    Name?: boolean
  }


  export type $ProductTypesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductTypes"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      Category: string | null
      Name: string | null
    }, ExtArgs["result"]["productTypes"]>
    composites: {}
  }


  type ProductTypesGetPayload<S extends boolean | null | undefined | ProductTypesDefaultArgs> = $Result.GetResult<Prisma.$ProductTypesPayload, S>

  type ProductTypesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductTypesFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ProductTypesCountAggregateInputType | true
    }

  export interface ProductTypesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductTypes'], meta: { name: 'ProductTypes' } }
    /**
     * Find zero or one ProductTypes that matches the filter.
     * @param {ProductTypesFindUniqueArgs} args - Arguments to find a ProductTypes
     * @example
     * // Get one ProductTypes
     * const productTypes = await prisma.productTypes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductTypesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProductTypesFindUniqueArgs<ExtArgs>>
    ): Prisma__ProductTypesClient<$Result.GetResult<Prisma.$ProductTypesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ProductTypes that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProductTypesFindUniqueOrThrowArgs} args - Arguments to find a ProductTypes
     * @example
     * // Get one ProductTypes
     * const productTypes = await prisma.productTypes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductTypesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductTypesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProductTypesClient<$Result.GetResult<Prisma.$ProductTypesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ProductTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTypesFindFirstArgs} args - Arguments to find a ProductTypes
     * @example
     * // Get one ProductTypes
     * const productTypes = await prisma.productTypes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductTypesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductTypesFindFirstArgs<ExtArgs>>
    ): Prisma__ProductTypesClient<$Result.GetResult<Prisma.$ProductTypesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ProductTypes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTypesFindFirstOrThrowArgs} args - Arguments to find a ProductTypes
     * @example
     * // Get one ProductTypes
     * const productTypes = await prisma.productTypes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductTypesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductTypesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProductTypesClient<$Result.GetResult<Prisma.$ProductTypesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ProductTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTypesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductTypes
     * const productTypes = await prisma.productTypes.findMany()
     * 
     * // Get first 10 ProductTypes
     * const productTypes = await prisma.productTypes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productTypesWithIdOnly = await prisma.productTypes.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductTypesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductTypesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductTypesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ProductTypes.
     * @param {ProductTypesCreateArgs} args - Arguments to create a ProductTypes.
     * @example
     * // Create one ProductTypes
     * const ProductTypes = await prisma.productTypes.create({
     *   data: {
     *     // ... data to create a ProductTypes
     *   }
     * })
     * 
    **/
    create<T extends ProductTypesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductTypesCreateArgs<ExtArgs>>
    ): Prisma__ProductTypesClient<$Result.GetResult<Prisma.$ProductTypesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a ProductTypes.
     * @param {ProductTypesDeleteArgs} args - Arguments to delete one ProductTypes.
     * @example
     * // Delete one ProductTypes
     * const ProductTypes = await prisma.productTypes.delete({
     *   where: {
     *     // ... filter to delete one ProductTypes
     *   }
     * })
     * 
    **/
    delete<T extends ProductTypesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProductTypesDeleteArgs<ExtArgs>>
    ): Prisma__ProductTypesClient<$Result.GetResult<Prisma.$ProductTypesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ProductTypes.
     * @param {ProductTypesUpdateArgs} args - Arguments to update one ProductTypes.
     * @example
     * // Update one ProductTypes
     * const productTypes = await prisma.productTypes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductTypesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductTypesUpdateArgs<ExtArgs>>
    ): Prisma__ProductTypesClient<$Result.GetResult<Prisma.$ProductTypesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ProductTypes.
     * @param {ProductTypesDeleteManyArgs} args - Arguments to filter ProductTypes to delete.
     * @example
     * // Delete a few ProductTypes
     * const { count } = await prisma.productTypes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductTypesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductTypesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTypesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductTypes
     * const productTypes = await prisma.productTypes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductTypesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProductTypesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductTypes.
     * @param {ProductTypesUpsertArgs} args - Arguments to update or create a ProductTypes.
     * @example
     * // Update or create a ProductTypes
     * const productTypes = await prisma.productTypes.upsert({
     *   create: {
     *     // ... data to create a ProductTypes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductTypes we want to update
     *   }
     * })
    **/
    upsert<T extends ProductTypesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProductTypesUpsertArgs<ExtArgs>>
    ): Prisma__ProductTypesClient<$Result.GetResult<Prisma.$ProductTypesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ProductTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTypesCountArgs} args - Arguments to filter ProductTypes to count.
     * @example
     * // Count the number of ProductTypes
     * const count = await prisma.productTypes.count({
     *   where: {
     *     // ... the filter for the ProductTypes we want to count
     *   }
     * })
    **/
    count<T extends ProductTypesCountArgs>(
      args?: Subset<T, ProductTypesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductTypesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTypesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductTypesAggregateArgs>(args: Subset<T, ProductTypesAggregateArgs>): Prisma.PrismaPromise<GetProductTypesAggregateType<T>>

    /**
     * Group by ProductTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTypesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductTypesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductTypesGroupByArgs['orderBy'] }
        : { orderBy?: ProductTypesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductTypesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductTypesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductTypes model
   */
  readonly fields: ProductTypesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductTypes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductTypesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ProductTypes model
   */ 
  interface ProductTypesFieldRefs {
    readonly id: FieldRef<"ProductTypes", 'Int'>
    readonly Category: FieldRef<"ProductTypes", 'String'>
    readonly Name: FieldRef<"ProductTypes", 'String'>
  }
    

  // Custom InputTypes

  /**
   * ProductTypes findUnique
   */
  export type ProductTypesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTypes
     */
    select?: ProductTypesSelect<ExtArgs> | null
    /**
     * Filter, which ProductTypes to fetch.
     */
    where: ProductTypesWhereUniqueInput
  }


  /**
   * ProductTypes findUniqueOrThrow
   */
  export type ProductTypesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTypes
     */
    select?: ProductTypesSelect<ExtArgs> | null
    /**
     * Filter, which ProductTypes to fetch.
     */
    where: ProductTypesWhereUniqueInput
  }


  /**
   * ProductTypes findFirst
   */
  export type ProductTypesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTypes
     */
    select?: ProductTypesSelect<ExtArgs> | null
    /**
     * Filter, which ProductTypes to fetch.
     */
    where?: ProductTypesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductTypes to fetch.
     */
    orderBy?: ProductTypesOrderByWithRelationInput | ProductTypesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductTypes.
     */
    cursor?: ProductTypesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductTypes.
     */
    distinct?: ProductTypesScalarFieldEnum | ProductTypesScalarFieldEnum[]
  }


  /**
   * ProductTypes findFirstOrThrow
   */
  export type ProductTypesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTypes
     */
    select?: ProductTypesSelect<ExtArgs> | null
    /**
     * Filter, which ProductTypes to fetch.
     */
    where?: ProductTypesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductTypes to fetch.
     */
    orderBy?: ProductTypesOrderByWithRelationInput | ProductTypesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductTypes.
     */
    cursor?: ProductTypesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductTypes.
     */
    distinct?: ProductTypesScalarFieldEnum | ProductTypesScalarFieldEnum[]
  }


  /**
   * ProductTypes findMany
   */
  export type ProductTypesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTypes
     */
    select?: ProductTypesSelect<ExtArgs> | null
    /**
     * Filter, which ProductTypes to fetch.
     */
    where?: ProductTypesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductTypes to fetch.
     */
    orderBy?: ProductTypesOrderByWithRelationInput | ProductTypesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductTypes.
     */
    cursor?: ProductTypesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductTypes.
     */
    skip?: number
    distinct?: ProductTypesScalarFieldEnum | ProductTypesScalarFieldEnum[]
  }


  /**
   * ProductTypes create
   */
  export type ProductTypesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTypes
     */
    select?: ProductTypesSelect<ExtArgs> | null
    /**
     * The data needed to create a ProductTypes.
     */
    data?: XOR<ProductTypesCreateInput, ProductTypesUncheckedCreateInput>
  }


  /**
   * ProductTypes update
   */
  export type ProductTypesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTypes
     */
    select?: ProductTypesSelect<ExtArgs> | null
    /**
     * The data needed to update a ProductTypes.
     */
    data: XOR<ProductTypesUpdateInput, ProductTypesUncheckedUpdateInput>
    /**
     * Choose, which ProductTypes to update.
     */
    where: ProductTypesWhereUniqueInput
  }


  /**
   * ProductTypes updateMany
   */
  export type ProductTypesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductTypes.
     */
    data: XOR<ProductTypesUpdateManyMutationInput, ProductTypesUncheckedUpdateManyInput>
    /**
     * Filter which ProductTypes to update
     */
    where?: ProductTypesWhereInput
  }


  /**
   * ProductTypes upsert
   */
  export type ProductTypesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTypes
     */
    select?: ProductTypesSelect<ExtArgs> | null
    /**
     * The filter to search for the ProductTypes to update in case it exists.
     */
    where: ProductTypesWhereUniqueInput
    /**
     * In case the ProductTypes found by the `where` argument doesn't exist, create a new ProductTypes with this data.
     */
    create: XOR<ProductTypesCreateInput, ProductTypesUncheckedCreateInput>
    /**
     * In case the ProductTypes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductTypesUpdateInput, ProductTypesUncheckedUpdateInput>
  }


  /**
   * ProductTypes delete
   */
  export type ProductTypesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTypes
     */
    select?: ProductTypesSelect<ExtArgs> | null
    /**
     * Filter which ProductTypes to delete.
     */
    where: ProductTypesWhereUniqueInput
  }


  /**
   * ProductTypes deleteMany
   */
  export type ProductTypesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductTypes to delete
     */
    where?: ProductTypesWhereInput
  }


  /**
   * ProductTypes without action
   */
  export type ProductTypesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTypes
     */
    select?: ProductTypesSelect<ExtArgs> | null
  }



  /**
   * Model Brandname
   */

  export type AggregateBrandname = {
    _count: BrandnameCountAggregateOutputType | null
    _avg: BrandnameAvgAggregateOutputType | null
    _sum: BrandnameSumAggregateOutputType | null
    _min: BrandnameMinAggregateOutputType | null
    _max: BrandnameMaxAggregateOutputType | null
  }

  export type BrandnameAvgAggregateOutputType = {
    id: number | null
  }

  export type BrandnameSumAggregateOutputType = {
    id: number | null
  }

  export type BrandnameMinAggregateOutputType = {
    id: number | null
    ProductType: string | null
    Name: string | null
  }

  export type BrandnameMaxAggregateOutputType = {
    id: number | null
    ProductType: string | null
    Name: string | null
  }

  export type BrandnameCountAggregateOutputType = {
    id: number
    ProductType: number
    Name: number
    _all: number
  }


  export type BrandnameAvgAggregateInputType = {
    id?: true
  }

  export type BrandnameSumAggregateInputType = {
    id?: true
  }

  export type BrandnameMinAggregateInputType = {
    id?: true
    ProductType?: true
    Name?: true
  }

  export type BrandnameMaxAggregateInputType = {
    id?: true
    ProductType?: true
    Name?: true
  }

  export type BrandnameCountAggregateInputType = {
    id?: true
    ProductType?: true
    Name?: true
    _all?: true
  }

  export type BrandnameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brandname to aggregate.
     */
    where?: BrandnameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brandnames to fetch.
     */
    orderBy?: BrandnameOrderByWithRelationInput | BrandnameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BrandnameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brandnames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brandnames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Brandnames
    **/
    _count?: true | BrandnameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BrandnameAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BrandnameSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BrandnameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BrandnameMaxAggregateInputType
  }

  export type GetBrandnameAggregateType<T extends BrandnameAggregateArgs> = {
        [P in keyof T & keyof AggregateBrandname]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBrandname[P]>
      : GetScalarType<T[P], AggregateBrandname[P]>
  }




  export type BrandnameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BrandnameWhereInput
    orderBy?: BrandnameOrderByWithAggregationInput | BrandnameOrderByWithAggregationInput[]
    by: BrandnameScalarFieldEnum[] | BrandnameScalarFieldEnum
    having?: BrandnameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BrandnameCountAggregateInputType | true
    _avg?: BrandnameAvgAggregateInputType
    _sum?: BrandnameSumAggregateInputType
    _min?: BrandnameMinAggregateInputType
    _max?: BrandnameMaxAggregateInputType
  }

  export type BrandnameGroupByOutputType = {
    id: number
    ProductType: string | null
    Name: string | null
    _count: BrandnameCountAggregateOutputType | null
    _avg: BrandnameAvgAggregateOutputType | null
    _sum: BrandnameSumAggregateOutputType | null
    _min: BrandnameMinAggregateOutputType | null
    _max: BrandnameMaxAggregateOutputType | null
  }

  type GetBrandnameGroupByPayload<T extends BrandnameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BrandnameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BrandnameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BrandnameGroupByOutputType[P]>
            : GetScalarType<T[P], BrandnameGroupByOutputType[P]>
        }
      >
    >


  export type BrandnameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ProductType?: boolean
    Name?: boolean
  }, ExtArgs["result"]["brandname"]>

  export type BrandnameSelectScalar = {
    id?: boolean
    ProductType?: boolean
    Name?: boolean
  }


  export type $BrandnamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Brandname"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      ProductType: string | null
      Name: string | null
    }, ExtArgs["result"]["brandname"]>
    composites: {}
  }


  type BrandnameGetPayload<S extends boolean | null | undefined | BrandnameDefaultArgs> = $Result.GetResult<Prisma.$BrandnamePayload, S>

  type BrandnameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BrandnameFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: BrandnameCountAggregateInputType | true
    }

  export interface BrandnameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Brandname'], meta: { name: 'Brandname' } }
    /**
     * Find zero or one Brandname that matches the filter.
     * @param {BrandnameFindUniqueArgs} args - Arguments to find a Brandname
     * @example
     * // Get one Brandname
     * const brandname = await prisma.brandname.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BrandnameFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BrandnameFindUniqueArgs<ExtArgs>>
    ): Prisma__BrandnameClient<$Result.GetResult<Prisma.$BrandnamePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Brandname that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BrandnameFindUniqueOrThrowArgs} args - Arguments to find a Brandname
     * @example
     * // Get one Brandname
     * const brandname = await prisma.brandname.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BrandnameFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BrandnameFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BrandnameClient<$Result.GetResult<Prisma.$BrandnamePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Brandname that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandnameFindFirstArgs} args - Arguments to find a Brandname
     * @example
     * // Get one Brandname
     * const brandname = await prisma.brandname.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BrandnameFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BrandnameFindFirstArgs<ExtArgs>>
    ): Prisma__BrandnameClient<$Result.GetResult<Prisma.$BrandnamePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Brandname that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandnameFindFirstOrThrowArgs} args - Arguments to find a Brandname
     * @example
     * // Get one Brandname
     * const brandname = await prisma.brandname.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BrandnameFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BrandnameFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BrandnameClient<$Result.GetResult<Prisma.$BrandnamePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Brandnames that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandnameFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Brandnames
     * const brandnames = await prisma.brandname.findMany()
     * 
     * // Get first 10 Brandnames
     * const brandnames = await prisma.brandname.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const brandnameWithIdOnly = await prisma.brandname.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BrandnameFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BrandnameFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandnamePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Brandname.
     * @param {BrandnameCreateArgs} args - Arguments to create a Brandname.
     * @example
     * // Create one Brandname
     * const Brandname = await prisma.brandname.create({
     *   data: {
     *     // ... data to create a Brandname
     *   }
     * })
     * 
    **/
    create<T extends BrandnameCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BrandnameCreateArgs<ExtArgs>>
    ): Prisma__BrandnameClient<$Result.GetResult<Prisma.$BrandnamePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Brandname.
     * @param {BrandnameDeleteArgs} args - Arguments to delete one Brandname.
     * @example
     * // Delete one Brandname
     * const Brandname = await prisma.brandname.delete({
     *   where: {
     *     // ... filter to delete one Brandname
     *   }
     * })
     * 
    **/
    delete<T extends BrandnameDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BrandnameDeleteArgs<ExtArgs>>
    ): Prisma__BrandnameClient<$Result.GetResult<Prisma.$BrandnamePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Brandname.
     * @param {BrandnameUpdateArgs} args - Arguments to update one Brandname.
     * @example
     * // Update one Brandname
     * const brandname = await prisma.brandname.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BrandnameUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BrandnameUpdateArgs<ExtArgs>>
    ): Prisma__BrandnameClient<$Result.GetResult<Prisma.$BrandnamePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Brandnames.
     * @param {BrandnameDeleteManyArgs} args - Arguments to filter Brandnames to delete.
     * @example
     * // Delete a few Brandnames
     * const { count } = await prisma.brandname.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BrandnameDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BrandnameDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brandnames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandnameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Brandnames
     * const brandname = await prisma.brandname.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BrandnameUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BrandnameUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Brandname.
     * @param {BrandnameUpsertArgs} args - Arguments to update or create a Brandname.
     * @example
     * // Update or create a Brandname
     * const brandname = await prisma.brandname.upsert({
     *   create: {
     *     // ... data to create a Brandname
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Brandname we want to update
     *   }
     * })
    **/
    upsert<T extends BrandnameUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BrandnameUpsertArgs<ExtArgs>>
    ): Prisma__BrandnameClient<$Result.GetResult<Prisma.$BrandnamePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Brandnames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandnameCountArgs} args - Arguments to filter Brandnames to count.
     * @example
     * // Count the number of Brandnames
     * const count = await prisma.brandname.count({
     *   where: {
     *     // ... the filter for the Brandnames we want to count
     *   }
     * })
    **/
    count<T extends BrandnameCountArgs>(
      args?: Subset<T, BrandnameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BrandnameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Brandname.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandnameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BrandnameAggregateArgs>(args: Subset<T, BrandnameAggregateArgs>): Prisma.PrismaPromise<GetBrandnameAggregateType<T>>

    /**
     * Group by Brandname.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandnameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BrandnameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BrandnameGroupByArgs['orderBy'] }
        : { orderBy?: BrandnameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BrandnameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBrandnameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Brandname model
   */
  readonly fields: BrandnameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Brandname.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BrandnameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Brandname model
   */ 
  interface BrandnameFieldRefs {
    readonly id: FieldRef<"Brandname", 'Int'>
    readonly ProductType: FieldRef<"Brandname", 'String'>
    readonly Name: FieldRef<"Brandname", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Brandname findUnique
   */
  export type BrandnameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brandname
     */
    select?: BrandnameSelect<ExtArgs> | null
    /**
     * Filter, which Brandname to fetch.
     */
    where: BrandnameWhereUniqueInput
  }


  /**
   * Brandname findUniqueOrThrow
   */
  export type BrandnameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brandname
     */
    select?: BrandnameSelect<ExtArgs> | null
    /**
     * Filter, which Brandname to fetch.
     */
    where: BrandnameWhereUniqueInput
  }


  /**
   * Brandname findFirst
   */
  export type BrandnameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brandname
     */
    select?: BrandnameSelect<ExtArgs> | null
    /**
     * Filter, which Brandname to fetch.
     */
    where?: BrandnameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brandnames to fetch.
     */
    orderBy?: BrandnameOrderByWithRelationInput | BrandnameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brandnames.
     */
    cursor?: BrandnameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brandnames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brandnames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brandnames.
     */
    distinct?: BrandnameScalarFieldEnum | BrandnameScalarFieldEnum[]
  }


  /**
   * Brandname findFirstOrThrow
   */
  export type BrandnameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brandname
     */
    select?: BrandnameSelect<ExtArgs> | null
    /**
     * Filter, which Brandname to fetch.
     */
    where?: BrandnameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brandnames to fetch.
     */
    orderBy?: BrandnameOrderByWithRelationInput | BrandnameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brandnames.
     */
    cursor?: BrandnameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brandnames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brandnames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brandnames.
     */
    distinct?: BrandnameScalarFieldEnum | BrandnameScalarFieldEnum[]
  }


  /**
   * Brandname findMany
   */
  export type BrandnameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brandname
     */
    select?: BrandnameSelect<ExtArgs> | null
    /**
     * Filter, which Brandnames to fetch.
     */
    where?: BrandnameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brandnames to fetch.
     */
    orderBy?: BrandnameOrderByWithRelationInput | BrandnameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Brandnames.
     */
    cursor?: BrandnameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brandnames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brandnames.
     */
    skip?: number
    distinct?: BrandnameScalarFieldEnum | BrandnameScalarFieldEnum[]
  }


  /**
   * Brandname create
   */
  export type BrandnameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brandname
     */
    select?: BrandnameSelect<ExtArgs> | null
    /**
     * The data needed to create a Brandname.
     */
    data?: XOR<BrandnameCreateInput, BrandnameUncheckedCreateInput>
  }


  /**
   * Brandname update
   */
  export type BrandnameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brandname
     */
    select?: BrandnameSelect<ExtArgs> | null
    /**
     * The data needed to update a Brandname.
     */
    data: XOR<BrandnameUpdateInput, BrandnameUncheckedUpdateInput>
    /**
     * Choose, which Brandname to update.
     */
    where: BrandnameWhereUniqueInput
  }


  /**
   * Brandname updateMany
   */
  export type BrandnameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Brandnames.
     */
    data: XOR<BrandnameUpdateManyMutationInput, BrandnameUncheckedUpdateManyInput>
    /**
     * Filter which Brandnames to update
     */
    where?: BrandnameWhereInput
  }


  /**
   * Brandname upsert
   */
  export type BrandnameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brandname
     */
    select?: BrandnameSelect<ExtArgs> | null
    /**
     * The filter to search for the Brandname to update in case it exists.
     */
    where: BrandnameWhereUniqueInput
    /**
     * In case the Brandname found by the `where` argument doesn't exist, create a new Brandname with this data.
     */
    create: XOR<BrandnameCreateInput, BrandnameUncheckedCreateInput>
    /**
     * In case the Brandname was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BrandnameUpdateInput, BrandnameUncheckedUpdateInput>
  }


  /**
   * Brandname delete
   */
  export type BrandnameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brandname
     */
    select?: BrandnameSelect<ExtArgs> | null
    /**
     * Filter which Brandname to delete.
     */
    where: BrandnameWhereUniqueInput
  }


  /**
   * Brandname deleteMany
   */
  export type BrandnameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brandnames to delete
     */
    where?: BrandnameWhereInput
  }


  /**
   * Brandname without action
   */
  export type BrandnameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brandname
     */
    select?: BrandnameSelect<ExtArgs> | null
  }



  /**
   * Model Inventory
   */

  export type AggregateInventory = {
    _count: InventoryCountAggregateOutputType | null
    _avg: InventoryAvgAggregateOutputType | null
    _sum: InventorySumAggregateOutputType | null
    _min: InventoryMinAggregateOutputType | null
    _max: InventoryMaxAggregateOutputType | null
  }

  export type InventoryAvgAggregateOutputType = {
    id: number | null
  }

  export type InventorySumAggregateOutputType = {
    id: number | null
  }

  export type InventoryMinAggregateOutputType = {
    id: number | null
    styleCode: string | null
    productType: string | null
    category: string | null
    name: string | null
    status: string | null
    dateCreated: Date | null
    dateUpdated: Date | null
    agentEmail: string | null
    brandname: string | null
    collectionItem: boolean | null
  }

  export type InventoryMaxAggregateOutputType = {
    id: number | null
    styleCode: string | null
    productType: string | null
    category: string | null
    name: string | null
    status: string | null
    dateCreated: Date | null
    dateUpdated: Date | null
    agentEmail: string | null
    brandname: string | null
    collectionItem: boolean | null
  }

  export type InventoryCountAggregateOutputType = {
    id: number
    styleCode: number
    productType: number
    category: number
    name: number
    status: number
    dateCreated: number
    dateUpdated: number
    agentEmail: number
    brandname: number
    collectionItem: number
    _all: number
  }


  export type InventoryAvgAggregateInputType = {
    id?: true
  }

  export type InventorySumAggregateInputType = {
    id?: true
  }

  export type InventoryMinAggregateInputType = {
    id?: true
    styleCode?: true
    productType?: true
    category?: true
    name?: true
    status?: true
    dateCreated?: true
    dateUpdated?: true
    agentEmail?: true
    brandname?: true
    collectionItem?: true
  }

  export type InventoryMaxAggregateInputType = {
    id?: true
    styleCode?: true
    productType?: true
    category?: true
    name?: true
    status?: true
    dateCreated?: true
    dateUpdated?: true
    agentEmail?: true
    brandname?: true
    collectionItem?: true
  }

  export type InventoryCountAggregateInputType = {
    id?: true
    styleCode?: true
    productType?: true
    category?: true
    name?: true
    status?: true
    dateCreated?: true
    dateUpdated?: true
    agentEmail?: true
    brandname?: true
    collectionItem?: true
    _all?: true
  }

  export type InventoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Inventory to aggregate.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Inventories
    **/
    _count?: true | InventoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InventoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InventorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InventoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InventoryMaxAggregateInputType
  }

  export type GetInventoryAggregateType<T extends InventoryAggregateArgs> = {
        [P in keyof T & keyof AggregateInventory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventory[P]>
      : GetScalarType<T[P], AggregateInventory[P]>
  }




  export type InventoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryWhereInput
    orderBy?: InventoryOrderByWithAggregationInput | InventoryOrderByWithAggregationInput[]
    by: InventoryScalarFieldEnum[] | InventoryScalarFieldEnum
    having?: InventoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InventoryCountAggregateInputType | true
    _avg?: InventoryAvgAggregateInputType
    _sum?: InventorySumAggregateInputType
    _min?: InventoryMinAggregateInputType
    _max?: InventoryMaxAggregateInputType
  }

  export type InventoryGroupByOutputType = {
    id: number
    styleCode: string
    productType: string | null
    category: string | null
    name: string | null
    status: string | null
    dateCreated: Date
    dateUpdated: Date | null
    agentEmail: string | null
    brandname: string | null
    collectionItem: boolean | null
    _count: InventoryCountAggregateOutputType | null
    _avg: InventoryAvgAggregateOutputType | null
    _sum: InventorySumAggregateOutputType | null
    _min: InventoryMinAggregateOutputType | null
    _max: InventoryMaxAggregateOutputType | null
  }

  type GetInventoryGroupByPayload<T extends InventoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InventoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InventoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InventoryGroupByOutputType[P]>
            : GetScalarType<T[P], InventoryGroupByOutputType[P]>
        }
      >
    >


  export type InventorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    styleCode?: boolean
    productType?: boolean
    category?: boolean
    name?: boolean
    status?: boolean
    dateCreated?: boolean
    dateUpdated?: boolean
    agentEmail?: boolean
    brandname?: boolean
    collectionItem?: boolean
    childInventory?: boolean | Inventory$childInventoryArgs<ExtArgs>
    _count?: boolean | InventoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventory"]>

  export type InventorySelectScalar = {
    id?: boolean
    styleCode?: boolean
    productType?: boolean
    category?: boolean
    name?: boolean
    status?: boolean
    dateCreated?: boolean
    dateUpdated?: boolean
    agentEmail?: boolean
    brandname?: boolean
    collectionItem?: boolean
  }

  export type InventoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    childInventory?: boolean | Inventory$childInventoryArgs<ExtArgs>
    _count?: boolean | InventoryCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $InventoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Inventory"
    objects: {
      childInventory: Prisma.$ChildInventoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      styleCode: string
      productType: string | null
      category: string | null
      name: string | null
      status: string | null
      dateCreated: Date
      dateUpdated: Date | null
      agentEmail: string | null
      brandname: string | null
      collectionItem: boolean | null
    }, ExtArgs["result"]["inventory"]>
    composites: {}
  }


  type InventoryGetPayload<S extends boolean | null | undefined | InventoryDefaultArgs> = $Result.GetResult<Prisma.$InventoryPayload, S>

  type InventoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InventoryFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: InventoryCountAggregateInputType | true
    }

  export interface InventoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Inventory'], meta: { name: 'Inventory' } }
    /**
     * Find zero or one Inventory that matches the filter.
     * @param {InventoryFindUniqueArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InventoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, InventoryFindUniqueArgs<ExtArgs>>
    ): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Inventory that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {InventoryFindUniqueOrThrowArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends InventoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InventoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Inventory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFindFirstArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InventoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, InventoryFindFirstArgs<ExtArgs>>
    ): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Inventory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFindFirstOrThrowArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends InventoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InventoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Inventories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Inventories
     * const inventories = await prisma.inventory.findMany()
     * 
     * // Get first 10 Inventories
     * const inventories = await prisma.inventory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inventoryWithIdOnly = await prisma.inventory.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InventoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InventoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Inventory.
     * @param {InventoryCreateArgs} args - Arguments to create a Inventory.
     * @example
     * // Create one Inventory
     * const Inventory = await prisma.inventory.create({
     *   data: {
     *     // ... data to create a Inventory
     *   }
     * })
     * 
    **/
    create<T extends InventoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, InventoryCreateArgs<ExtArgs>>
    ): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Inventory.
     * @param {InventoryDeleteArgs} args - Arguments to delete one Inventory.
     * @example
     * // Delete one Inventory
     * const Inventory = await prisma.inventory.delete({
     *   where: {
     *     // ... filter to delete one Inventory
     *   }
     * })
     * 
    **/
    delete<T extends InventoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, InventoryDeleteArgs<ExtArgs>>
    ): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Inventory.
     * @param {InventoryUpdateArgs} args - Arguments to update one Inventory.
     * @example
     * // Update one Inventory
     * const inventory = await prisma.inventory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InventoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, InventoryUpdateArgs<ExtArgs>>
    ): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Inventories.
     * @param {InventoryDeleteManyArgs} args - Arguments to filter Inventories to delete.
     * @example
     * // Delete a few Inventories
     * const { count } = await prisma.inventory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InventoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InventoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Inventories
     * const inventory = await prisma.inventory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InventoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, InventoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Inventory.
     * @param {InventoryUpsertArgs} args - Arguments to update or create a Inventory.
     * @example
     * // Update or create a Inventory
     * const inventory = await prisma.inventory.upsert({
     *   create: {
     *     // ... data to create a Inventory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Inventory we want to update
     *   }
     * })
    **/
    upsert<T extends InventoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, InventoryUpsertArgs<ExtArgs>>
    ): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Inventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryCountArgs} args - Arguments to filter Inventories to count.
     * @example
     * // Count the number of Inventories
     * const count = await prisma.inventory.count({
     *   where: {
     *     // ... the filter for the Inventories we want to count
     *   }
     * })
    **/
    count<T extends InventoryCountArgs>(
      args?: Subset<T, InventoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InventoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Inventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InventoryAggregateArgs>(args: Subset<T, InventoryAggregateArgs>): Prisma.PrismaPromise<GetInventoryAggregateType<T>>

    /**
     * Group by Inventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InventoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InventoryGroupByArgs['orderBy'] }
        : { orderBy?: InventoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InventoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Inventory model
   */
  readonly fields: InventoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Inventory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InventoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    childInventory<T extends Inventory$childInventoryArgs<ExtArgs> = {}>(args?: Subset<T, Inventory$childInventoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChildInventoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Inventory model
   */ 
  interface InventoryFieldRefs {
    readonly id: FieldRef<"Inventory", 'Int'>
    readonly styleCode: FieldRef<"Inventory", 'String'>
    readonly productType: FieldRef<"Inventory", 'String'>
    readonly category: FieldRef<"Inventory", 'String'>
    readonly name: FieldRef<"Inventory", 'String'>
    readonly status: FieldRef<"Inventory", 'String'>
    readonly dateCreated: FieldRef<"Inventory", 'DateTime'>
    readonly dateUpdated: FieldRef<"Inventory", 'DateTime'>
    readonly agentEmail: FieldRef<"Inventory", 'String'>
    readonly brandname: FieldRef<"Inventory", 'String'>
    readonly collectionItem: FieldRef<"Inventory", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Inventory findUnique
   */
  export type InventoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where: InventoryWhereUniqueInput
  }


  /**
   * Inventory findUniqueOrThrow
   */
  export type InventoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where: InventoryWhereUniqueInput
  }


  /**
   * Inventory findFirst
   */
  export type InventoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Inventories.
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Inventories.
     */
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }


  /**
   * Inventory findFirstOrThrow
   */
  export type InventoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Inventories.
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Inventories.
     */
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }


  /**
   * Inventory findMany
   */
  export type InventoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventories to fetch.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Inventories.
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }


  /**
   * Inventory create
   */
  export type InventoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Inventory.
     */
    data?: XOR<InventoryCreateInput, InventoryUncheckedCreateInput>
  }


  /**
   * Inventory update
   */
  export type InventoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Inventory.
     */
    data: XOR<InventoryUpdateInput, InventoryUncheckedUpdateInput>
    /**
     * Choose, which Inventory to update.
     */
    where: InventoryWhereUniqueInput
  }


  /**
   * Inventory updateMany
   */
  export type InventoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Inventories.
     */
    data: XOR<InventoryUpdateManyMutationInput, InventoryUncheckedUpdateManyInput>
    /**
     * Filter which Inventories to update
     */
    where?: InventoryWhereInput
  }


  /**
   * Inventory upsert
   */
  export type InventoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Inventory to update in case it exists.
     */
    where: InventoryWhereUniqueInput
    /**
     * In case the Inventory found by the `where` argument doesn't exist, create a new Inventory with this data.
     */
    create: XOR<InventoryCreateInput, InventoryUncheckedCreateInput>
    /**
     * In case the Inventory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InventoryUpdateInput, InventoryUncheckedUpdateInput>
  }


  /**
   * Inventory delete
   */
  export type InventoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter which Inventory to delete.
     */
    where: InventoryWhereUniqueInput
  }


  /**
   * Inventory deleteMany
   */
  export type InventoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Inventories to delete
     */
    where?: InventoryWhereInput
  }


  /**
   * Inventory.childInventory
   */
  export type Inventory$childInventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChildInventory
     */
    select?: ChildInventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChildInventoryInclude<ExtArgs> | null
    where?: ChildInventoryWhereInput
    orderBy?: ChildInventoryOrderByWithRelationInput | ChildInventoryOrderByWithRelationInput[]
    cursor?: ChildInventoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChildInventoryScalarFieldEnum | ChildInventoryScalarFieldEnum[]
  }


  /**
   * Inventory without action
   */
  export type InventoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InventoryInclude<ExtArgs> | null
  }



  /**
   * Model ChildInventory
   */

  export type AggregateChildInventory = {
    _count: ChildInventoryCountAggregateOutputType | null
    _avg: ChildInventoryAvgAggregateOutputType | null
    _sum: ChildInventorySumAggregateOutputType | null
    _min: ChildInventoryMinAggregateOutputType | null
    _max: ChildInventoryMaxAggregateOutputType | null
  }

  export type ChildInventoryAvgAggregateOutputType = {
    id: number | null
    price: number | null
    stock: number | null
  }

  export type ChildInventorySumAggregateOutputType = {
    id: number | null
    price: number | null
    stock: number | null
  }

  export type ChildInventoryMinAggregateOutputType = {
    id: number | null
    productCode: string | null
    category: string | null
    productType: string | null
    imageReferences: string | null
    model: string | null
    style_Code: string | null
    name: string | null
    color: string | null
    size: string | null
    price: number | null
    stock: number | null
    status: string | null
    thumbnail: string | null
    parentId: string | null
    creator: string | null
    editor: string | null
    dateCreated: Date | null
    dateUpdated: Date | null
    agentEmail: string | null
  }

  export type ChildInventoryMaxAggregateOutputType = {
    id: number | null
    productCode: string | null
    category: string | null
    productType: string | null
    imageReferences: string | null
    model: string | null
    style_Code: string | null
    name: string | null
    color: string | null
    size: string | null
    price: number | null
    stock: number | null
    status: string | null
    thumbnail: string | null
    parentId: string | null
    creator: string | null
    editor: string | null
    dateCreated: Date | null
    dateUpdated: Date | null
    agentEmail: string | null
  }

  export type ChildInventoryCountAggregateOutputType = {
    id: number
    productCode: number
    category: number
    productType: number
    imageReferences: number
    model: number
    style_Code: number
    name: number
    color: number
    size: number
    price: number
    stock: number
    status: number
    thumbnail: number
    parentId: number
    creator: number
    editor: number
    dateCreated: number
    dateUpdated: number
    agentEmail: number
    _all: number
  }


  export type ChildInventoryAvgAggregateInputType = {
    id?: true
    price?: true
    stock?: true
  }

  export type ChildInventorySumAggregateInputType = {
    id?: true
    price?: true
    stock?: true
  }

  export type ChildInventoryMinAggregateInputType = {
    id?: true
    productCode?: true
    category?: true
    productType?: true
    imageReferences?: true
    model?: true
    style_Code?: true
    name?: true
    color?: true
    size?: true
    price?: true
    stock?: true
    status?: true
    thumbnail?: true
    parentId?: true
    creator?: true
    editor?: true
    dateCreated?: true
    dateUpdated?: true
    agentEmail?: true
  }

  export type ChildInventoryMaxAggregateInputType = {
    id?: true
    productCode?: true
    category?: true
    productType?: true
    imageReferences?: true
    model?: true
    style_Code?: true
    name?: true
    color?: true
    size?: true
    price?: true
    stock?: true
    status?: true
    thumbnail?: true
    parentId?: true
    creator?: true
    editor?: true
    dateCreated?: true
    dateUpdated?: true
    agentEmail?: true
  }

  export type ChildInventoryCountAggregateInputType = {
    id?: true
    productCode?: true
    category?: true
    productType?: true
    imageReferences?: true
    model?: true
    style_Code?: true
    name?: true
    color?: true
    size?: true
    price?: true
    stock?: true
    status?: true
    thumbnail?: true
    parentId?: true
    creator?: true
    editor?: true
    dateCreated?: true
    dateUpdated?: true
    agentEmail?: true
    _all?: true
  }

  export type ChildInventoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChildInventory to aggregate.
     */
    where?: ChildInventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChildInventories to fetch.
     */
    orderBy?: ChildInventoryOrderByWithRelationInput | ChildInventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChildInventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChildInventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChildInventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChildInventories
    **/
    _count?: true | ChildInventoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChildInventoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChildInventorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChildInventoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChildInventoryMaxAggregateInputType
  }

  export type GetChildInventoryAggregateType<T extends ChildInventoryAggregateArgs> = {
        [P in keyof T & keyof AggregateChildInventory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChildInventory[P]>
      : GetScalarType<T[P], AggregateChildInventory[P]>
  }




  export type ChildInventoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChildInventoryWhereInput
    orderBy?: ChildInventoryOrderByWithAggregationInput | ChildInventoryOrderByWithAggregationInput[]
    by: ChildInventoryScalarFieldEnum[] | ChildInventoryScalarFieldEnum
    having?: ChildInventoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChildInventoryCountAggregateInputType | true
    _avg?: ChildInventoryAvgAggregateInputType
    _sum?: ChildInventorySumAggregateInputType
    _min?: ChildInventoryMinAggregateInputType
    _max?: ChildInventoryMaxAggregateInputType
  }

  export type ChildInventoryGroupByOutputType = {
    id: number
    productCode: string | null
    category: string | null
    productType: string | null
    imageReferences: string | null
    model: string | null
    style_Code: string | null
    name: string | null
    color: string | null
    size: string | null
    price: number | null
    stock: number | null
    status: string | null
    thumbnail: string | null
    parentId: string | null
    creator: string | null
    editor: string | null
    dateCreated: Date
    dateUpdated: Date | null
    agentEmail: string | null
    _count: ChildInventoryCountAggregateOutputType | null
    _avg: ChildInventoryAvgAggregateOutputType | null
    _sum: ChildInventorySumAggregateOutputType | null
    _min: ChildInventoryMinAggregateOutputType | null
    _max: ChildInventoryMaxAggregateOutputType | null
  }

  type GetChildInventoryGroupByPayload<T extends ChildInventoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChildInventoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChildInventoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChildInventoryGroupByOutputType[P]>
            : GetScalarType<T[P], ChildInventoryGroupByOutputType[P]>
        }
      >
    >


  export type ChildInventorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productCode?: boolean
    category?: boolean
    productType?: boolean
    imageReferences?: boolean
    model?: boolean
    style_Code?: boolean
    name?: boolean
    color?: boolean
    size?: boolean
    price?: boolean
    stock?: boolean
    status?: boolean
    thumbnail?: boolean
    parentId?: boolean
    creator?: boolean
    editor?: boolean
    dateCreated?: boolean
    dateUpdated?: boolean
    agentEmail?: boolean
    subImageFieldOut?: boolean | ChildInventory$subImageFieldOutArgs<ExtArgs>
    childInventoryField?: boolean | ChildInventory$childInventoryFieldArgs<ExtArgs>
    _count?: boolean | ChildInventoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["childInventory"]>

  export type ChildInventorySelectScalar = {
    id?: boolean
    productCode?: boolean
    category?: boolean
    productType?: boolean
    imageReferences?: boolean
    model?: boolean
    style_Code?: boolean
    name?: boolean
    color?: boolean
    size?: boolean
    price?: boolean
    stock?: boolean
    status?: boolean
    thumbnail?: boolean
    parentId?: boolean
    creator?: boolean
    editor?: boolean
    dateCreated?: boolean
    dateUpdated?: boolean
    agentEmail?: boolean
  }

  export type ChildInventoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subImageFieldOut?: boolean | ChildInventory$subImageFieldOutArgs<ExtArgs>
    childInventoryField?: boolean | ChildInventory$childInventoryFieldArgs<ExtArgs>
    _count?: boolean | ChildInventoryCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ChildInventoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChildInventory"
    objects: {
      subImageFieldOut: Prisma.$Inv_subImagePayload<ExtArgs>[]
      childInventoryField: Prisma.$InventoryPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      productCode: string | null
      category: string | null
      productType: string | null
      imageReferences: string | null
      model: string | null
      style_Code: string | null
      name: string | null
      color: string | null
      size: string | null
      price: number | null
      stock: number | null
      status: string | null
      thumbnail: string | null
      parentId: string | null
      creator: string | null
      editor: string | null
      dateCreated: Date
      dateUpdated: Date | null
      agentEmail: string | null
    }, ExtArgs["result"]["childInventory"]>
    composites: {}
  }


  type ChildInventoryGetPayload<S extends boolean | null | undefined | ChildInventoryDefaultArgs> = $Result.GetResult<Prisma.$ChildInventoryPayload, S>

  type ChildInventoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChildInventoryFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ChildInventoryCountAggregateInputType | true
    }

  export interface ChildInventoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChildInventory'], meta: { name: 'ChildInventory' } }
    /**
     * Find zero or one ChildInventory that matches the filter.
     * @param {ChildInventoryFindUniqueArgs} args - Arguments to find a ChildInventory
     * @example
     * // Get one ChildInventory
     * const childInventory = await prisma.childInventory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChildInventoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ChildInventoryFindUniqueArgs<ExtArgs>>
    ): Prisma__ChildInventoryClient<$Result.GetResult<Prisma.$ChildInventoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ChildInventory that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChildInventoryFindUniqueOrThrowArgs} args - Arguments to find a ChildInventory
     * @example
     * // Get one ChildInventory
     * const childInventory = await prisma.childInventory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChildInventoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChildInventoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ChildInventoryClient<$Result.GetResult<Prisma.$ChildInventoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ChildInventory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildInventoryFindFirstArgs} args - Arguments to find a ChildInventory
     * @example
     * // Get one ChildInventory
     * const childInventory = await prisma.childInventory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChildInventoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ChildInventoryFindFirstArgs<ExtArgs>>
    ): Prisma__ChildInventoryClient<$Result.GetResult<Prisma.$ChildInventoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ChildInventory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildInventoryFindFirstOrThrowArgs} args - Arguments to find a ChildInventory
     * @example
     * // Get one ChildInventory
     * const childInventory = await prisma.childInventory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChildInventoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChildInventoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ChildInventoryClient<$Result.GetResult<Prisma.$ChildInventoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ChildInventories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildInventoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChildInventories
     * const childInventories = await prisma.childInventory.findMany()
     * 
     * // Get first 10 ChildInventories
     * const childInventories = await prisma.childInventory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const childInventoryWithIdOnly = await prisma.childInventory.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ChildInventoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChildInventoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChildInventoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ChildInventory.
     * @param {ChildInventoryCreateArgs} args - Arguments to create a ChildInventory.
     * @example
     * // Create one ChildInventory
     * const ChildInventory = await prisma.childInventory.create({
     *   data: {
     *     // ... data to create a ChildInventory
     *   }
     * })
     * 
    **/
    create<T extends ChildInventoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ChildInventoryCreateArgs<ExtArgs>>
    ): Prisma__ChildInventoryClient<$Result.GetResult<Prisma.$ChildInventoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a ChildInventory.
     * @param {ChildInventoryDeleteArgs} args - Arguments to delete one ChildInventory.
     * @example
     * // Delete one ChildInventory
     * const ChildInventory = await prisma.childInventory.delete({
     *   where: {
     *     // ... filter to delete one ChildInventory
     *   }
     * })
     * 
    **/
    delete<T extends ChildInventoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ChildInventoryDeleteArgs<ExtArgs>>
    ): Prisma__ChildInventoryClient<$Result.GetResult<Prisma.$ChildInventoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ChildInventory.
     * @param {ChildInventoryUpdateArgs} args - Arguments to update one ChildInventory.
     * @example
     * // Update one ChildInventory
     * const childInventory = await prisma.childInventory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChildInventoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ChildInventoryUpdateArgs<ExtArgs>>
    ): Prisma__ChildInventoryClient<$Result.GetResult<Prisma.$ChildInventoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ChildInventories.
     * @param {ChildInventoryDeleteManyArgs} args - Arguments to filter ChildInventories to delete.
     * @example
     * // Delete a few ChildInventories
     * const { count } = await prisma.childInventory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChildInventoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChildInventoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChildInventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildInventoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChildInventories
     * const childInventory = await prisma.childInventory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChildInventoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ChildInventoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChildInventory.
     * @param {ChildInventoryUpsertArgs} args - Arguments to update or create a ChildInventory.
     * @example
     * // Update or create a ChildInventory
     * const childInventory = await prisma.childInventory.upsert({
     *   create: {
     *     // ... data to create a ChildInventory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChildInventory we want to update
     *   }
     * })
    **/
    upsert<T extends ChildInventoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ChildInventoryUpsertArgs<ExtArgs>>
    ): Prisma__ChildInventoryClient<$Result.GetResult<Prisma.$ChildInventoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ChildInventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildInventoryCountArgs} args - Arguments to filter ChildInventories to count.
     * @example
     * // Count the number of ChildInventories
     * const count = await prisma.childInventory.count({
     *   where: {
     *     // ... the filter for the ChildInventories we want to count
     *   }
     * })
    **/
    count<T extends ChildInventoryCountArgs>(
      args?: Subset<T, ChildInventoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChildInventoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChildInventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildInventoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChildInventoryAggregateArgs>(args: Subset<T, ChildInventoryAggregateArgs>): Prisma.PrismaPromise<GetChildInventoryAggregateType<T>>

    /**
     * Group by ChildInventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildInventoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChildInventoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChildInventoryGroupByArgs['orderBy'] }
        : { orderBy?: ChildInventoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChildInventoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChildInventoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChildInventory model
   */
  readonly fields: ChildInventoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChildInventory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChildInventoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    subImageFieldOut<T extends ChildInventory$subImageFieldOutArgs<ExtArgs> = {}>(args?: Subset<T, ChildInventory$subImageFieldOutArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Inv_subImagePayload<ExtArgs>, T, 'findMany'> | Null>;

    childInventoryField<T extends ChildInventory$childInventoryFieldArgs<ExtArgs> = {}>(args?: Subset<T, ChildInventory$childInventoryFieldArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ChildInventory model
   */ 
  interface ChildInventoryFieldRefs {
    readonly id: FieldRef<"ChildInventory", 'Int'>
    readonly productCode: FieldRef<"ChildInventory", 'String'>
    readonly category: FieldRef<"ChildInventory", 'String'>
    readonly productType: FieldRef<"ChildInventory", 'String'>
    readonly imageReferences: FieldRef<"ChildInventory", 'String'>
    readonly model: FieldRef<"ChildInventory", 'String'>
    readonly style_Code: FieldRef<"ChildInventory", 'String'>
    readonly name: FieldRef<"ChildInventory", 'String'>
    readonly color: FieldRef<"ChildInventory", 'String'>
    readonly size: FieldRef<"ChildInventory", 'String'>
    readonly price: FieldRef<"ChildInventory", 'Float'>
    readonly stock: FieldRef<"ChildInventory", 'Float'>
    readonly status: FieldRef<"ChildInventory", 'String'>
    readonly thumbnail: FieldRef<"ChildInventory", 'String'>
    readonly parentId: FieldRef<"ChildInventory", 'String'>
    readonly creator: FieldRef<"ChildInventory", 'String'>
    readonly editor: FieldRef<"ChildInventory", 'String'>
    readonly dateCreated: FieldRef<"ChildInventory", 'DateTime'>
    readonly dateUpdated: FieldRef<"ChildInventory", 'DateTime'>
    readonly agentEmail: FieldRef<"ChildInventory", 'String'>
  }
    

  // Custom InputTypes

  /**
   * ChildInventory findUnique
   */
  export type ChildInventoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChildInventory
     */
    select?: ChildInventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChildInventoryInclude<ExtArgs> | null
    /**
     * Filter, which ChildInventory to fetch.
     */
    where: ChildInventoryWhereUniqueInput
  }


  /**
   * ChildInventory findUniqueOrThrow
   */
  export type ChildInventoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChildInventory
     */
    select?: ChildInventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChildInventoryInclude<ExtArgs> | null
    /**
     * Filter, which ChildInventory to fetch.
     */
    where: ChildInventoryWhereUniqueInput
  }


  /**
   * ChildInventory findFirst
   */
  export type ChildInventoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChildInventory
     */
    select?: ChildInventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChildInventoryInclude<ExtArgs> | null
    /**
     * Filter, which ChildInventory to fetch.
     */
    where?: ChildInventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChildInventories to fetch.
     */
    orderBy?: ChildInventoryOrderByWithRelationInput | ChildInventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChildInventories.
     */
    cursor?: ChildInventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChildInventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChildInventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChildInventories.
     */
    distinct?: ChildInventoryScalarFieldEnum | ChildInventoryScalarFieldEnum[]
  }


  /**
   * ChildInventory findFirstOrThrow
   */
  export type ChildInventoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChildInventory
     */
    select?: ChildInventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChildInventoryInclude<ExtArgs> | null
    /**
     * Filter, which ChildInventory to fetch.
     */
    where?: ChildInventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChildInventories to fetch.
     */
    orderBy?: ChildInventoryOrderByWithRelationInput | ChildInventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChildInventories.
     */
    cursor?: ChildInventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChildInventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChildInventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChildInventories.
     */
    distinct?: ChildInventoryScalarFieldEnum | ChildInventoryScalarFieldEnum[]
  }


  /**
   * ChildInventory findMany
   */
  export type ChildInventoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChildInventory
     */
    select?: ChildInventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChildInventoryInclude<ExtArgs> | null
    /**
     * Filter, which ChildInventories to fetch.
     */
    where?: ChildInventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChildInventories to fetch.
     */
    orderBy?: ChildInventoryOrderByWithRelationInput | ChildInventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChildInventories.
     */
    cursor?: ChildInventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChildInventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChildInventories.
     */
    skip?: number
    distinct?: ChildInventoryScalarFieldEnum | ChildInventoryScalarFieldEnum[]
  }


  /**
   * ChildInventory create
   */
  export type ChildInventoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChildInventory
     */
    select?: ChildInventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChildInventoryInclude<ExtArgs> | null
    /**
     * The data needed to create a ChildInventory.
     */
    data?: XOR<ChildInventoryCreateInput, ChildInventoryUncheckedCreateInput>
  }


  /**
   * ChildInventory update
   */
  export type ChildInventoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChildInventory
     */
    select?: ChildInventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChildInventoryInclude<ExtArgs> | null
    /**
     * The data needed to update a ChildInventory.
     */
    data: XOR<ChildInventoryUpdateInput, ChildInventoryUncheckedUpdateInput>
    /**
     * Choose, which ChildInventory to update.
     */
    where: ChildInventoryWhereUniqueInput
  }


  /**
   * ChildInventory updateMany
   */
  export type ChildInventoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChildInventories.
     */
    data: XOR<ChildInventoryUpdateManyMutationInput, ChildInventoryUncheckedUpdateManyInput>
    /**
     * Filter which ChildInventories to update
     */
    where?: ChildInventoryWhereInput
  }


  /**
   * ChildInventory upsert
   */
  export type ChildInventoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChildInventory
     */
    select?: ChildInventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChildInventoryInclude<ExtArgs> | null
    /**
     * The filter to search for the ChildInventory to update in case it exists.
     */
    where: ChildInventoryWhereUniqueInput
    /**
     * In case the ChildInventory found by the `where` argument doesn't exist, create a new ChildInventory with this data.
     */
    create: XOR<ChildInventoryCreateInput, ChildInventoryUncheckedCreateInput>
    /**
     * In case the ChildInventory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChildInventoryUpdateInput, ChildInventoryUncheckedUpdateInput>
  }


  /**
   * ChildInventory delete
   */
  export type ChildInventoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChildInventory
     */
    select?: ChildInventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChildInventoryInclude<ExtArgs> | null
    /**
     * Filter which ChildInventory to delete.
     */
    where: ChildInventoryWhereUniqueInput
  }


  /**
   * ChildInventory deleteMany
   */
  export type ChildInventoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChildInventories to delete
     */
    where?: ChildInventoryWhereInput
  }


  /**
   * ChildInventory.subImageFieldOut
   */
  export type ChildInventory$subImageFieldOutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inv_subImage
     */
    select?: Inv_subImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Inv_subImageInclude<ExtArgs> | null
    where?: Inv_subImageWhereInput
    orderBy?: Inv_subImageOrderByWithRelationInput | Inv_subImageOrderByWithRelationInput[]
    cursor?: Inv_subImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Inv_subImageScalarFieldEnum | Inv_subImageScalarFieldEnum[]
  }


  /**
   * ChildInventory.childInventoryField
   */
  export type ChildInventory$childInventoryFieldArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InventoryInclude<ExtArgs> | null
    where?: InventoryWhereInput
  }


  /**
   * ChildInventory without action
   */
  export type ChildInventoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChildInventory
     */
    select?: ChildInventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChildInventoryInclude<ExtArgs> | null
  }



  /**
   * Model Inv_subImage
   */

  export type AggregateInv_subImage = {
    _count: Inv_subImageCountAggregateOutputType | null
    _avg: Inv_subImageAvgAggregateOutputType | null
    _sum: Inv_subImageSumAggregateOutputType | null
    _min: Inv_subImageMinAggregateOutputType | null
    _max: Inv_subImageMaxAggregateOutputType | null
  }

  export type Inv_subImageAvgAggregateOutputType = {
    id: number | null
    subImageRelationParent: number | null
    subImageRelationChild: number | null
  }

  export type Inv_subImageSumAggregateOutputType = {
    id: number | null
    subImageRelationParent: number | null
    subImageRelationChild: number | null
  }

  export type Inv_subImageMinAggregateOutputType = {
    id: number | null
    subImageRelationParent: number | null
    subImageRelationChild: number | null
    isVideo: boolean | null
    ImagePath: string | null
  }

  export type Inv_subImageMaxAggregateOutputType = {
    id: number | null
    subImageRelationParent: number | null
    subImageRelationChild: number | null
    isVideo: boolean | null
    ImagePath: string | null
  }

  export type Inv_subImageCountAggregateOutputType = {
    id: number
    subImageRelationParent: number
    subImageRelationChild: number
    isVideo: number
    ImagePath: number
    _all: number
  }


  export type Inv_subImageAvgAggregateInputType = {
    id?: true
    subImageRelationParent?: true
    subImageRelationChild?: true
  }

  export type Inv_subImageSumAggregateInputType = {
    id?: true
    subImageRelationParent?: true
    subImageRelationChild?: true
  }

  export type Inv_subImageMinAggregateInputType = {
    id?: true
    subImageRelationParent?: true
    subImageRelationChild?: true
    isVideo?: true
    ImagePath?: true
  }

  export type Inv_subImageMaxAggregateInputType = {
    id?: true
    subImageRelationParent?: true
    subImageRelationChild?: true
    isVideo?: true
    ImagePath?: true
  }

  export type Inv_subImageCountAggregateInputType = {
    id?: true
    subImageRelationParent?: true
    subImageRelationChild?: true
    isVideo?: true
    ImagePath?: true
    _all?: true
  }

  export type Inv_subImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Inv_subImage to aggregate.
     */
    where?: Inv_subImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inv_subImages to fetch.
     */
    orderBy?: Inv_subImageOrderByWithRelationInput | Inv_subImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Inv_subImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inv_subImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inv_subImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Inv_subImages
    **/
    _count?: true | Inv_subImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Inv_subImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Inv_subImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Inv_subImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Inv_subImageMaxAggregateInputType
  }

  export type GetInv_subImageAggregateType<T extends Inv_subImageAggregateArgs> = {
        [P in keyof T & keyof AggregateInv_subImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInv_subImage[P]>
      : GetScalarType<T[P], AggregateInv_subImage[P]>
  }




  export type Inv_subImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Inv_subImageWhereInput
    orderBy?: Inv_subImageOrderByWithAggregationInput | Inv_subImageOrderByWithAggregationInput[]
    by: Inv_subImageScalarFieldEnum[] | Inv_subImageScalarFieldEnum
    having?: Inv_subImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Inv_subImageCountAggregateInputType | true
    _avg?: Inv_subImageAvgAggregateInputType
    _sum?: Inv_subImageSumAggregateInputType
    _min?: Inv_subImageMinAggregateInputType
    _max?: Inv_subImageMaxAggregateInputType
  }

  export type Inv_subImageGroupByOutputType = {
    id: number
    subImageRelationParent: number | null
    subImageRelationChild: number
    isVideo: boolean
    ImagePath: string | null
    _count: Inv_subImageCountAggregateOutputType | null
    _avg: Inv_subImageAvgAggregateOutputType | null
    _sum: Inv_subImageSumAggregateOutputType | null
    _min: Inv_subImageMinAggregateOutputType | null
    _max: Inv_subImageMaxAggregateOutputType | null
  }

  type GetInv_subImageGroupByPayload<T extends Inv_subImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Inv_subImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Inv_subImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Inv_subImageGroupByOutputType[P]>
            : GetScalarType<T[P], Inv_subImageGroupByOutputType[P]>
        }
      >
    >


  export type Inv_subImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subImageRelationParent?: boolean
    subImageRelationChild?: boolean
    isVideo?: boolean
    ImagePath?: boolean
    ChildField?: boolean | ChildInventoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inv_subImage"]>

  export type Inv_subImageSelectScalar = {
    id?: boolean
    subImageRelationParent?: boolean
    subImageRelationChild?: boolean
    isVideo?: boolean
    ImagePath?: boolean
  }

  export type Inv_subImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ChildField?: boolean | ChildInventoryDefaultArgs<ExtArgs>
  }


  export type $Inv_subImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Inv_subImage"
    objects: {
      ChildField: Prisma.$ChildInventoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      subImageRelationParent: number | null
      subImageRelationChild: number
      isVideo: boolean
      ImagePath: string | null
    }, ExtArgs["result"]["inv_subImage"]>
    composites: {}
  }


  type Inv_subImageGetPayload<S extends boolean | null | undefined | Inv_subImageDefaultArgs> = $Result.GetResult<Prisma.$Inv_subImagePayload, S>

  type Inv_subImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Inv_subImageFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: Inv_subImageCountAggregateInputType | true
    }

  export interface Inv_subImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Inv_subImage'], meta: { name: 'Inv_subImage' } }
    /**
     * Find zero or one Inv_subImage that matches the filter.
     * @param {Inv_subImageFindUniqueArgs} args - Arguments to find a Inv_subImage
     * @example
     * // Get one Inv_subImage
     * const inv_subImage = await prisma.inv_subImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Inv_subImageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Inv_subImageFindUniqueArgs<ExtArgs>>
    ): Prisma__Inv_subImageClient<$Result.GetResult<Prisma.$Inv_subImagePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Inv_subImage that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Inv_subImageFindUniqueOrThrowArgs} args - Arguments to find a Inv_subImage
     * @example
     * // Get one Inv_subImage
     * const inv_subImage = await prisma.inv_subImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Inv_subImageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Inv_subImageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Inv_subImageClient<$Result.GetResult<Prisma.$Inv_subImagePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Inv_subImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Inv_subImageFindFirstArgs} args - Arguments to find a Inv_subImage
     * @example
     * // Get one Inv_subImage
     * const inv_subImage = await prisma.inv_subImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Inv_subImageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Inv_subImageFindFirstArgs<ExtArgs>>
    ): Prisma__Inv_subImageClient<$Result.GetResult<Prisma.$Inv_subImagePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Inv_subImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Inv_subImageFindFirstOrThrowArgs} args - Arguments to find a Inv_subImage
     * @example
     * // Get one Inv_subImage
     * const inv_subImage = await prisma.inv_subImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Inv_subImageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Inv_subImageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Inv_subImageClient<$Result.GetResult<Prisma.$Inv_subImagePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Inv_subImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Inv_subImageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Inv_subImages
     * const inv_subImages = await prisma.inv_subImage.findMany()
     * 
     * // Get first 10 Inv_subImages
     * const inv_subImages = await prisma.inv_subImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inv_subImageWithIdOnly = await prisma.inv_subImage.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Inv_subImageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Inv_subImageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Inv_subImagePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Inv_subImage.
     * @param {Inv_subImageCreateArgs} args - Arguments to create a Inv_subImage.
     * @example
     * // Create one Inv_subImage
     * const Inv_subImage = await prisma.inv_subImage.create({
     *   data: {
     *     // ... data to create a Inv_subImage
     *   }
     * })
     * 
    **/
    create<T extends Inv_subImageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Inv_subImageCreateArgs<ExtArgs>>
    ): Prisma__Inv_subImageClient<$Result.GetResult<Prisma.$Inv_subImagePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Inv_subImage.
     * @param {Inv_subImageDeleteArgs} args - Arguments to delete one Inv_subImage.
     * @example
     * // Delete one Inv_subImage
     * const Inv_subImage = await prisma.inv_subImage.delete({
     *   where: {
     *     // ... filter to delete one Inv_subImage
     *   }
     * })
     * 
    **/
    delete<T extends Inv_subImageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Inv_subImageDeleteArgs<ExtArgs>>
    ): Prisma__Inv_subImageClient<$Result.GetResult<Prisma.$Inv_subImagePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Inv_subImage.
     * @param {Inv_subImageUpdateArgs} args - Arguments to update one Inv_subImage.
     * @example
     * // Update one Inv_subImage
     * const inv_subImage = await prisma.inv_subImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Inv_subImageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Inv_subImageUpdateArgs<ExtArgs>>
    ): Prisma__Inv_subImageClient<$Result.GetResult<Prisma.$Inv_subImagePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Inv_subImages.
     * @param {Inv_subImageDeleteManyArgs} args - Arguments to filter Inv_subImages to delete.
     * @example
     * // Delete a few Inv_subImages
     * const { count } = await prisma.inv_subImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Inv_subImageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Inv_subImageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inv_subImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Inv_subImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Inv_subImages
     * const inv_subImage = await prisma.inv_subImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Inv_subImageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Inv_subImageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Inv_subImage.
     * @param {Inv_subImageUpsertArgs} args - Arguments to update or create a Inv_subImage.
     * @example
     * // Update or create a Inv_subImage
     * const inv_subImage = await prisma.inv_subImage.upsert({
     *   create: {
     *     // ... data to create a Inv_subImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Inv_subImage we want to update
     *   }
     * })
    **/
    upsert<T extends Inv_subImageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Inv_subImageUpsertArgs<ExtArgs>>
    ): Prisma__Inv_subImageClient<$Result.GetResult<Prisma.$Inv_subImagePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Inv_subImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Inv_subImageCountArgs} args - Arguments to filter Inv_subImages to count.
     * @example
     * // Count the number of Inv_subImages
     * const count = await prisma.inv_subImage.count({
     *   where: {
     *     // ... the filter for the Inv_subImages we want to count
     *   }
     * })
    **/
    count<T extends Inv_subImageCountArgs>(
      args?: Subset<T, Inv_subImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Inv_subImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Inv_subImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Inv_subImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Inv_subImageAggregateArgs>(args: Subset<T, Inv_subImageAggregateArgs>): Prisma.PrismaPromise<GetInv_subImageAggregateType<T>>

    /**
     * Group by Inv_subImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Inv_subImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Inv_subImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Inv_subImageGroupByArgs['orderBy'] }
        : { orderBy?: Inv_subImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Inv_subImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInv_subImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Inv_subImage model
   */
  readonly fields: Inv_subImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Inv_subImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Inv_subImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    ChildField<T extends ChildInventoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChildInventoryDefaultArgs<ExtArgs>>): Prisma__ChildInventoryClient<$Result.GetResult<Prisma.$ChildInventoryPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Inv_subImage model
   */ 
  interface Inv_subImageFieldRefs {
    readonly id: FieldRef<"Inv_subImage", 'Int'>
    readonly subImageRelationParent: FieldRef<"Inv_subImage", 'Int'>
    readonly subImageRelationChild: FieldRef<"Inv_subImage", 'Int'>
    readonly isVideo: FieldRef<"Inv_subImage", 'Boolean'>
    readonly ImagePath: FieldRef<"Inv_subImage", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Inv_subImage findUnique
   */
  export type Inv_subImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inv_subImage
     */
    select?: Inv_subImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Inv_subImageInclude<ExtArgs> | null
    /**
     * Filter, which Inv_subImage to fetch.
     */
    where: Inv_subImageWhereUniqueInput
  }


  /**
   * Inv_subImage findUniqueOrThrow
   */
  export type Inv_subImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inv_subImage
     */
    select?: Inv_subImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Inv_subImageInclude<ExtArgs> | null
    /**
     * Filter, which Inv_subImage to fetch.
     */
    where: Inv_subImageWhereUniqueInput
  }


  /**
   * Inv_subImage findFirst
   */
  export type Inv_subImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inv_subImage
     */
    select?: Inv_subImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Inv_subImageInclude<ExtArgs> | null
    /**
     * Filter, which Inv_subImage to fetch.
     */
    where?: Inv_subImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inv_subImages to fetch.
     */
    orderBy?: Inv_subImageOrderByWithRelationInput | Inv_subImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Inv_subImages.
     */
    cursor?: Inv_subImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inv_subImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inv_subImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Inv_subImages.
     */
    distinct?: Inv_subImageScalarFieldEnum | Inv_subImageScalarFieldEnum[]
  }


  /**
   * Inv_subImage findFirstOrThrow
   */
  export type Inv_subImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inv_subImage
     */
    select?: Inv_subImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Inv_subImageInclude<ExtArgs> | null
    /**
     * Filter, which Inv_subImage to fetch.
     */
    where?: Inv_subImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inv_subImages to fetch.
     */
    orderBy?: Inv_subImageOrderByWithRelationInput | Inv_subImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Inv_subImages.
     */
    cursor?: Inv_subImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inv_subImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inv_subImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Inv_subImages.
     */
    distinct?: Inv_subImageScalarFieldEnum | Inv_subImageScalarFieldEnum[]
  }


  /**
   * Inv_subImage findMany
   */
  export type Inv_subImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inv_subImage
     */
    select?: Inv_subImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Inv_subImageInclude<ExtArgs> | null
    /**
     * Filter, which Inv_subImages to fetch.
     */
    where?: Inv_subImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inv_subImages to fetch.
     */
    orderBy?: Inv_subImageOrderByWithRelationInput | Inv_subImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Inv_subImages.
     */
    cursor?: Inv_subImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inv_subImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inv_subImages.
     */
    skip?: number
    distinct?: Inv_subImageScalarFieldEnum | Inv_subImageScalarFieldEnum[]
  }


  /**
   * Inv_subImage create
   */
  export type Inv_subImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inv_subImage
     */
    select?: Inv_subImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Inv_subImageInclude<ExtArgs> | null
    /**
     * The data needed to create a Inv_subImage.
     */
    data: XOR<Inv_subImageCreateInput, Inv_subImageUncheckedCreateInput>
  }


  /**
   * Inv_subImage update
   */
  export type Inv_subImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inv_subImage
     */
    select?: Inv_subImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Inv_subImageInclude<ExtArgs> | null
    /**
     * The data needed to update a Inv_subImage.
     */
    data: XOR<Inv_subImageUpdateInput, Inv_subImageUncheckedUpdateInput>
    /**
     * Choose, which Inv_subImage to update.
     */
    where: Inv_subImageWhereUniqueInput
  }


  /**
   * Inv_subImage updateMany
   */
  export type Inv_subImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Inv_subImages.
     */
    data: XOR<Inv_subImageUpdateManyMutationInput, Inv_subImageUncheckedUpdateManyInput>
    /**
     * Filter which Inv_subImages to update
     */
    where?: Inv_subImageWhereInput
  }


  /**
   * Inv_subImage upsert
   */
  export type Inv_subImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inv_subImage
     */
    select?: Inv_subImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Inv_subImageInclude<ExtArgs> | null
    /**
     * The filter to search for the Inv_subImage to update in case it exists.
     */
    where: Inv_subImageWhereUniqueInput
    /**
     * In case the Inv_subImage found by the `where` argument doesn't exist, create a new Inv_subImage with this data.
     */
    create: XOR<Inv_subImageCreateInput, Inv_subImageUncheckedCreateInput>
    /**
     * In case the Inv_subImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Inv_subImageUpdateInput, Inv_subImageUncheckedUpdateInput>
  }


  /**
   * Inv_subImage delete
   */
  export type Inv_subImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inv_subImage
     */
    select?: Inv_subImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Inv_subImageInclude<ExtArgs> | null
    /**
     * Filter which Inv_subImage to delete.
     */
    where: Inv_subImageWhereUniqueInput
  }


  /**
   * Inv_subImage deleteMany
   */
  export type Inv_subImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Inv_subImages to delete
     */
    where?: Inv_subImageWhereInput
  }


  /**
   * Inv_subImage without action
   */
  export type Inv_subImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inv_subImage
     */
    select?: Inv_subImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Inv_subImageInclude<ExtArgs> | null
  }



  /**
   * Model AllowedDevices
   */

  export type AggregateAllowedDevices = {
    _count: AllowedDevicesCountAggregateOutputType | null
    _avg: AllowedDevicesAvgAggregateOutputType | null
    _sum: AllowedDevicesSumAggregateOutputType | null
    _min: AllowedDevicesMinAggregateOutputType | null
    _max: AllowedDevicesMaxAggregateOutputType | null
  }

  export type AllowedDevicesAvgAggregateOutputType = {
    id: number | null
  }

  export type AllowedDevicesSumAggregateOutputType = {
    id: number | null
  }

  export type AllowedDevicesMinAggregateOutputType = {
    id: number | null
    macAddress: string | null
  }

  export type AllowedDevicesMaxAggregateOutputType = {
    id: number | null
    macAddress: string | null
  }

  export type AllowedDevicesCountAggregateOutputType = {
    id: number
    macAddress: number
    _all: number
  }


  export type AllowedDevicesAvgAggregateInputType = {
    id?: true
  }

  export type AllowedDevicesSumAggregateInputType = {
    id?: true
  }

  export type AllowedDevicesMinAggregateInputType = {
    id?: true
    macAddress?: true
  }

  export type AllowedDevicesMaxAggregateInputType = {
    id?: true
    macAddress?: true
  }

  export type AllowedDevicesCountAggregateInputType = {
    id?: true
    macAddress?: true
    _all?: true
  }

  export type AllowedDevicesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AllowedDevices to aggregate.
     */
    where?: AllowedDevicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AllowedDevices to fetch.
     */
    orderBy?: AllowedDevicesOrderByWithRelationInput | AllowedDevicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AllowedDevicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AllowedDevices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AllowedDevices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AllowedDevices
    **/
    _count?: true | AllowedDevicesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AllowedDevicesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AllowedDevicesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AllowedDevicesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AllowedDevicesMaxAggregateInputType
  }

  export type GetAllowedDevicesAggregateType<T extends AllowedDevicesAggregateArgs> = {
        [P in keyof T & keyof AggregateAllowedDevices]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAllowedDevices[P]>
      : GetScalarType<T[P], AggregateAllowedDevices[P]>
  }




  export type AllowedDevicesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AllowedDevicesWhereInput
    orderBy?: AllowedDevicesOrderByWithAggregationInput | AllowedDevicesOrderByWithAggregationInput[]
    by: AllowedDevicesScalarFieldEnum[] | AllowedDevicesScalarFieldEnum
    having?: AllowedDevicesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AllowedDevicesCountAggregateInputType | true
    _avg?: AllowedDevicesAvgAggregateInputType
    _sum?: AllowedDevicesSumAggregateInputType
    _min?: AllowedDevicesMinAggregateInputType
    _max?: AllowedDevicesMaxAggregateInputType
  }

  export type AllowedDevicesGroupByOutputType = {
    id: number
    macAddress: string | null
    _count: AllowedDevicesCountAggregateOutputType | null
    _avg: AllowedDevicesAvgAggregateOutputType | null
    _sum: AllowedDevicesSumAggregateOutputType | null
    _min: AllowedDevicesMinAggregateOutputType | null
    _max: AllowedDevicesMaxAggregateOutputType | null
  }

  type GetAllowedDevicesGroupByPayload<T extends AllowedDevicesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AllowedDevicesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AllowedDevicesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AllowedDevicesGroupByOutputType[P]>
            : GetScalarType<T[P], AllowedDevicesGroupByOutputType[P]>
        }
      >
    >


  export type AllowedDevicesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    macAddress?: boolean
  }, ExtArgs["result"]["allowedDevices"]>

  export type AllowedDevicesSelectScalar = {
    id?: boolean
    macAddress?: boolean
  }


  export type $AllowedDevicesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AllowedDevices"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      macAddress: string | null
    }, ExtArgs["result"]["allowedDevices"]>
    composites: {}
  }


  type AllowedDevicesGetPayload<S extends boolean | null | undefined | AllowedDevicesDefaultArgs> = $Result.GetResult<Prisma.$AllowedDevicesPayload, S>

  type AllowedDevicesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AllowedDevicesFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: AllowedDevicesCountAggregateInputType | true
    }

  export interface AllowedDevicesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AllowedDevices'], meta: { name: 'AllowedDevices' } }
    /**
     * Find zero or one AllowedDevices that matches the filter.
     * @param {AllowedDevicesFindUniqueArgs} args - Arguments to find a AllowedDevices
     * @example
     * // Get one AllowedDevices
     * const allowedDevices = await prisma.allowedDevices.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AllowedDevicesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AllowedDevicesFindUniqueArgs<ExtArgs>>
    ): Prisma__AllowedDevicesClient<$Result.GetResult<Prisma.$AllowedDevicesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one AllowedDevices that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AllowedDevicesFindUniqueOrThrowArgs} args - Arguments to find a AllowedDevices
     * @example
     * // Get one AllowedDevices
     * const allowedDevices = await prisma.allowedDevices.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AllowedDevicesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AllowedDevicesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AllowedDevicesClient<$Result.GetResult<Prisma.$AllowedDevicesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first AllowedDevices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllowedDevicesFindFirstArgs} args - Arguments to find a AllowedDevices
     * @example
     * // Get one AllowedDevices
     * const allowedDevices = await prisma.allowedDevices.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AllowedDevicesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AllowedDevicesFindFirstArgs<ExtArgs>>
    ): Prisma__AllowedDevicesClient<$Result.GetResult<Prisma.$AllowedDevicesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first AllowedDevices that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllowedDevicesFindFirstOrThrowArgs} args - Arguments to find a AllowedDevices
     * @example
     * // Get one AllowedDevices
     * const allowedDevices = await prisma.allowedDevices.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AllowedDevicesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AllowedDevicesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AllowedDevicesClient<$Result.GetResult<Prisma.$AllowedDevicesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more AllowedDevices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllowedDevicesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AllowedDevices
     * const allowedDevices = await prisma.allowedDevices.findMany()
     * 
     * // Get first 10 AllowedDevices
     * const allowedDevices = await prisma.allowedDevices.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const allowedDevicesWithIdOnly = await prisma.allowedDevices.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AllowedDevicesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AllowedDevicesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllowedDevicesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a AllowedDevices.
     * @param {AllowedDevicesCreateArgs} args - Arguments to create a AllowedDevices.
     * @example
     * // Create one AllowedDevices
     * const AllowedDevices = await prisma.allowedDevices.create({
     *   data: {
     *     // ... data to create a AllowedDevices
     *   }
     * })
     * 
    **/
    create<T extends AllowedDevicesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AllowedDevicesCreateArgs<ExtArgs>>
    ): Prisma__AllowedDevicesClient<$Result.GetResult<Prisma.$AllowedDevicesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a AllowedDevices.
     * @param {AllowedDevicesDeleteArgs} args - Arguments to delete one AllowedDevices.
     * @example
     * // Delete one AllowedDevices
     * const AllowedDevices = await prisma.allowedDevices.delete({
     *   where: {
     *     // ... filter to delete one AllowedDevices
     *   }
     * })
     * 
    **/
    delete<T extends AllowedDevicesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AllowedDevicesDeleteArgs<ExtArgs>>
    ): Prisma__AllowedDevicesClient<$Result.GetResult<Prisma.$AllowedDevicesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one AllowedDevices.
     * @param {AllowedDevicesUpdateArgs} args - Arguments to update one AllowedDevices.
     * @example
     * // Update one AllowedDevices
     * const allowedDevices = await prisma.allowedDevices.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AllowedDevicesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AllowedDevicesUpdateArgs<ExtArgs>>
    ): Prisma__AllowedDevicesClient<$Result.GetResult<Prisma.$AllowedDevicesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more AllowedDevices.
     * @param {AllowedDevicesDeleteManyArgs} args - Arguments to filter AllowedDevices to delete.
     * @example
     * // Delete a few AllowedDevices
     * const { count } = await prisma.allowedDevices.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AllowedDevicesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AllowedDevicesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AllowedDevices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllowedDevicesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AllowedDevices
     * const allowedDevices = await prisma.allowedDevices.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AllowedDevicesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AllowedDevicesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AllowedDevices.
     * @param {AllowedDevicesUpsertArgs} args - Arguments to update or create a AllowedDevices.
     * @example
     * // Update or create a AllowedDevices
     * const allowedDevices = await prisma.allowedDevices.upsert({
     *   create: {
     *     // ... data to create a AllowedDevices
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AllowedDevices we want to update
     *   }
     * })
    **/
    upsert<T extends AllowedDevicesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AllowedDevicesUpsertArgs<ExtArgs>>
    ): Prisma__AllowedDevicesClient<$Result.GetResult<Prisma.$AllowedDevicesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of AllowedDevices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllowedDevicesCountArgs} args - Arguments to filter AllowedDevices to count.
     * @example
     * // Count the number of AllowedDevices
     * const count = await prisma.allowedDevices.count({
     *   where: {
     *     // ... the filter for the AllowedDevices we want to count
     *   }
     * })
    **/
    count<T extends AllowedDevicesCountArgs>(
      args?: Subset<T, AllowedDevicesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AllowedDevicesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AllowedDevices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllowedDevicesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AllowedDevicesAggregateArgs>(args: Subset<T, AllowedDevicesAggregateArgs>): Prisma.PrismaPromise<GetAllowedDevicesAggregateType<T>>

    /**
     * Group by AllowedDevices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllowedDevicesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AllowedDevicesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AllowedDevicesGroupByArgs['orderBy'] }
        : { orderBy?: AllowedDevicesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AllowedDevicesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAllowedDevicesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AllowedDevices model
   */
  readonly fields: AllowedDevicesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AllowedDevices.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AllowedDevicesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the AllowedDevices model
   */ 
  interface AllowedDevicesFieldRefs {
    readonly id: FieldRef<"AllowedDevices", 'Int'>
    readonly macAddress: FieldRef<"AllowedDevices", 'String'>
  }
    

  // Custom InputTypes

  /**
   * AllowedDevices findUnique
   */
  export type AllowedDevicesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllowedDevices
     */
    select?: AllowedDevicesSelect<ExtArgs> | null
    /**
     * Filter, which AllowedDevices to fetch.
     */
    where: AllowedDevicesWhereUniqueInput
  }


  /**
   * AllowedDevices findUniqueOrThrow
   */
  export type AllowedDevicesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllowedDevices
     */
    select?: AllowedDevicesSelect<ExtArgs> | null
    /**
     * Filter, which AllowedDevices to fetch.
     */
    where: AllowedDevicesWhereUniqueInput
  }


  /**
   * AllowedDevices findFirst
   */
  export type AllowedDevicesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllowedDevices
     */
    select?: AllowedDevicesSelect<ExtArgs> | null
    /**
     * Filter, which AllowedDevices to fetch.
     */
    where?: AllowedDevicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AllowedDevices to fetch.
     */
    orderBy?: AllowedDevicesOrderByWithRelationInput | AllowedDevicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AllowedDevices.
     */
    cursor?: AllowedDevicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AllowedDevices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AllowedDevices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AllowedDevices.
     */
    distinct?: AllowedDevicesScalarFieldEnum | AllowedDevicesScalarFieldEnum[]
  }


  /**
   * AllowedDevices findFirstOrThrow
   */
  export type AllowedDevicesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllowedDevices
     */
    select?: AllowedDevicesSelect<ExtArgs> | null
    /**
     * Filter, which AllowedDevices to fetch.
     */
    where?: AllowedDevicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AllowedDevices to fetch.
     */
    orderBy?: AllowedDevicesOrderByWithRelationInput | AllowedDevicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AllowedDevices.
     */
    cursor?: AllowedDevicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AllowedDevices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AllowedDevices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AllowedDevices.
     */
    distinct?: AllowedDevicesScalarFieldEnum | AllowedDevicesScalarFieldEnum[]
  }


  /**
   * AllowedDevices findMany
   */
  export type AllowedDevicesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllowedDevices
     */
    select?: AllowedDevicesSelect<ExtArgs> | null
    /**
     * Filter, which AllowedDevices to fetch.
     */
    where?: AllowedDevicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AllowedDevices to fetch.
     */
    orderBy?: AllowedDevicesOrderByWithRelationInput | AllowedDevicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AllowedDevices.
     */
    cursor?: AllowedDevicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AllowedDevices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AllowedDevices.
     */
    skip?: number
    distinct?: AllowedDevicesScalarFieldEnum | AllowedDevicesScalarFieldEnum[]
  }


  /**
   * AllowedDevices create
   */
  export type AllowedDevicesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllowedDevices
     */
    select?: AllowedDevicesSelect<ExtArgs> | null
    /**
     * The data needed to create a AllowedDevices.
     */
    data?: XOR<AllowedDevicesCreateInput, AllowedDevicesUncheckedCreateInput>
  }


  /**
   * AllowedDevices update
   */
  export type AllowedDevicesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllowedDevices
     */
    select?: AllowedDevicesSelect<ExtArgs> | null
    /**
     * The data needed to update a AllowedDevices.
     */
    data: XOR<AllowedDevicesUpdateInput, AllowedDevicesUncheckedUpdateInput>
    /**
     * Choose, which AllowedDevices to update.
     */
    where: AllowedDevicesWhereUniqueInput
  }


  /**
   * AllowedDevices updateMany
   */
  export type AllowedDevicesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AllowedDevices.
     */
    data: XOR<AllowedDevicesUpdateManyMutationInput, AllowedDevicesUncheckedUpdateManyInput>
    /**
     * Filter which AllowedDevices to update
     */
    where?: AllowedDevicesWhereInput
  }


  /**
   * AllowedDevices upsert
   */
  export type AllowedDevicesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllowedDevices
     */
    select?: AllowedDevicesSelect<ExtArgs> | null
    /**
     * The filter to search for the AllowedDevices to update in case it exists.
     */
    where: AllowedDevicesWhereUniqueInput
    /**
     * In case the AllowedDevices found by the `where` argument doesn't exist, create a new AllowedDevices with this data.
     */
    create: XOR<AllowedDevicesCreateInput, AllowedDevicesUncheckedCreateInput>
    /**
     * In case the AllowedDevices was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AllowedDevicesUpdateInput, AllowedDevicesUncheckedUpdateInput>
  }


  /**
   * AllowedDevices delete
   */
  export type AllowedDevicesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllowedDevices
     */
    select?: AllowedDevicesSelect<ExtArgs> | null
    /**
     * Filter which AllowedDevices to delete.
     */
    where: AllowedDevicesWhereUniqueInput
  }


  /**
   * AllowedDevices deleteMany
   */
  export type AllowedDevicesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AllowedDevices to delete
     */
    where?: AllowedDevicesWhereInput
  }


  /**
   * AllowedDevices without action
   */
  export type AllowedDevicesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllowedDevices
     */
    select?: AllowedDevicesSelect<ExtArgs> | null
  }



  /**
   * Model NumberOfViews
   */

  export type AggregateNumberOfViews = {
    _count: NumberOfViewsCountAggregateOutputType | null
    _avg: NumberOfViewsAvgAggregateOutputType | null
    _sum: NumberOfViewsSumAggregateOutputType | null
    _min: NumberOfViewsMinAggregateOutputType | null
    _max: NumberOfViewsMaxAggregateOutputType | null
  }

  export type NumberOfViewsAvgAggregateOutputType = {
    id: number | null
  }

  export type NumberOfViewsSumAggregateOutputType = {
    id: number | null
  }

  export type NumberOfViewsMinAggregateOutputType = {
    id: number | null
    count: string | null
    productCode: string | null
    emailAddress: string | null
    IpAddress: string | null
    Country: string | null
    dateVisited: string | null
  }

  export type NumberOfViewsMaxAggregateOutputType = {
    id: number | null
    count: string | null
    productCode: string | null
    emailAddress: string | null
    IpAddress: string | null
    Country: string | null
    dateVisited: string | null
  }

  export type NumberOfViewsCountAggregateOutputType = {
    id: number
    count: number
    productCode: number
    emailAddress: number
    IpAddress: number
    Country: number
    dateVisited: number
    _all: number
  }


  export type NumberOfViewsAvgAggregateInputType = {
    id?: true
  }

  export type NumberOfViewsSumAggregateInputType = {
    id?: true
  }

  export type NumberOfViewsMinAggregateInputType = {
    id?: true
    count?: true
    productCode?: true
    emailAddress?: true
    IpAddress?: true
    Country?: true
    dateVisited?: true
  }

  export type NumberOfViewsMaxAggregateInputType = {
    id?: true
    count?: true
    productCode?: true
    emailAddress?: true
    IpAddress?: true
    Country?: true
    dateVisited?: true
  }

  export type NumberOfViewsCountAggregateInputType = {
    id?: true
    count?: true
    productCode?: true
    emailAddress?: true
    IpAddress?: true
    Country?: true
    dateVisited?: true
    _all?: true
  }

  export type NumberOfViewsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NumberOfViews to aggregate.
     */
    where?: NumberOfViewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NumberOfViews to fetch.
     */
    orderBy?: NumberOfViewsOrderByWithRelationInput | NumberOfViewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NumberOfViewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NumberOfViews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NumberOfViews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NumberOfViews
    **/
    _count?: true | NumberOfViewsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NumberOfViewsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NumberOfViewsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NumberOfViewsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NumberOfViewsMaxAggregateInputType
  }

  export type GetNumberOfViewsAggregateType<T extends NumberOfViewsAggregateArgs> = {
        [P in keyof T & keyof AggregateNumberOfViews]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNumberOfViews[P]>
      : GetScalarType<T[P], AggregateNumberOfViews[P]>
  }




  export type NumberOfViewsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NumberOfViewsWhereInput
    orderBy?: NumberOfViewsOrderByWithAggregationInput | NumberOfViewsOrderByWithAggregationInput[]
    by: NumberOfViewsScalarFieldEnum[] | NumberOfViewsScalarFieldEnum
    having?: NumberOfViewsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NumberOfViewsCountAggregateInputType | true
    _avg?: NumberOfViewsAvgAggregateInputType
    _sum?: NumberOfViewsSumAggregateInputType
    _min?: NumberOfViewsMinAggregateInputType
    _max?: NumberOfViewsMaxAggregateInputType
  }

  export type NumberOfViewsGroupByOutputType = {
    id: number
    count: string | null
    productCode: string | null
    emailAddress: string | null
    IpAddress: string | null
    Country: string | null
    dateVisited: string | null
    _count: NumberOfViewsCountAggregateOutputType | null
    _avg: NumberOfViewsAvgAggregateOutputType | null
    _sum: NumberOfViewsSumAggregateOutputType | null
    _min: NumberOfViewsMinAggregateOutputType | null
    _max: NumberOfViewsMaxAggregateOutputType | null
  }

  type GetNumberOfViewsGroupByPayload<T extends NumberOfViewsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NumberOfViewsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NumberOfViewsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NumberOfViewsGroupByOutputType[P]>
            : GetScalarType<T[P], NumberOfViewsGroupByOutputType[P]>
        }
      >
    >


  export type NumberOfViewsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    count?: boolean
    productCode?: boolean
    emailAddress?: boolean
    IpAddress?: boolean
    Country?: boolean
    dateVisited?: boolean
  }, ExtArgs["result"]["numberOfViews"]>

  export type NumberOfViewsSelectScalar = {
    id?: boolean
    count?: boolean
    productCode?: boolean
    emailAddress?: boolean
    IpAddress?: boolean
    Country?: boolean
    dateVisited?: boolean
  }


  export type $NumberOfViewsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NumberOfViews"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      count: string | null
      productCode: string | null
      emailAddress: string | null
      IpAddress: string | null
      Country: string | null
      dateVisited: string | null
    }, ExtArgs["result"]["numberOfViews"]>
    composites: {}
  }


  type NumberOfViewsGetPayload<S extends boolean | null | undefined | NumberOfViewsDefaultArgs> = $Result.GetResult<Prisma.$NumberOfViewsPayload, S>

  type NumberOfViewsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NumberOfViewsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: NumberOfViewsCountAggregateInputType | true
    }

  export interface NumberOfViewsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NumberOfViews'], meta: { name: 'NumberOfViews' } }
    /**
     * Find zero or one NumberOfViews that matches the filter.
     * @param {NumberOfViewsFindUniqueArgs} args - Arguments to find a NumberOfViews
     * @example
     * // Get one NumberOfViews
     * const numberOfViews = await prisma.numberOfViews.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NumberOfViewsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NumberOfViewsFindUniqueArgs<ExtArgs>>
    ): Prisma__NumberOfViewsClient<$Result.GetResult<Prisma.$NumberOfViewsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one NumberOfViews that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NumberOfViewsFindUniqueOrThrowArgs} args - Arguments to find a NumberOfViews
     * @example
     * // Get one NumberOfViews
     * const numberOfViews = await prisma.numberOfViews.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NumberOfViewsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NumberOfViewsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NumberOfViewsClient<$Result.GetResult<Prisma.$NumberOfViewsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first NumberOfViews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NumberOfViewsFindFirstArgs} args - Arguments to find a NumberOfViews
     * @example
     * // Get one NumberOfViews
     * const numberOfViews = await prisma.numberOfViews.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NumberOfViewsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NumberOfViewsFindFirstArgs<ExtArgs>>
    ): Prisma__NumberOfViewsClient<$Result.GetResult<Prisma.$NumberOfViewsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first NumberOfViews that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NumberOfViewsFindFirstOrThrowArgs} args - Arguments to find a NumberOfViews
     * @example
     * // Get one NumberOfViews
     * const numberOfViews = await prisma.numberOfViews.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NumberOfViewsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NumberOfViewsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NumberOfViewsClient<$Result.GetResult<Prisma.$NumberOfViewsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more NumberOfViews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NumberOfViewsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NumberOfViews
     * const numberOfViews = await prisma.numberOfViews.findMany()
     * 
     * // Get first 10 NumberOfViews
     * const numberOfViews = await prisma.numberOfViews.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const numberOfViewsWithIdOnly = await prisma.numberOfViews.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NumberOfViewsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NumberOfViewsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NumberOfViewsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a NumberOfViews.
     * @param {NumberOfViewsCreateArgs} args - Arguments to create a NumberOfViews.
     * @example
     * // Create one NumberOfViews
     * const NumberOfViews = await prisma.numberOfViews.create({
     *   data: {
     *     // ... data to create a NumberOfViews
     *   }
     * })
     * 
    **/
    create<T extends NumberOfViewsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NumberOfViewsCreateArgs<ExtArgs>>
    ): Prisma__NumberOfViewsClient<$Result.GetResult<Prisma.$NumberOfViewsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a NumberOfViews.
     * @param {NumberOfViewsDeleteArgs} args - Arguments to delete one NumberOfViews.
     * @example
     * // Delete one NumberOfViews
     * const NumberOfViews = await prisma.numberOfViews.delete({
     *   where: {
     *     // ... filter to delete one NumberOfViews
     *   }
     * })
     * 
    **/
    delete<T extends NumberOfViewsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NumberOfViewsDeleteArgs<ExtArgs>>
    ): Prisma__NumberOfViewsClient<$Result.GetResult<Prisma.$NumberOfViewsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one NumberOfViews.
     * @param {NumberOfViewsUpdateArgs} args - Arguments to update one NumberOfViews.
     * @example
     * // Update one NumberOfViews
     * const numberOfViews = await prisma.numberOfViews.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NumberOfViewsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NumberOfViewsUpdateArgs<ExtArgs>>
    ): Prisma__NumberOfViewsClient<$Result.GetResult<Prisma.$NumberOfViewsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more NumberOfViews.
     * @param {NumberOfViewsDeleteManyArgs} args - Arguments to filter NumberOfViews to delete.
     * @example
     * // Delete a few NumberOfViews
     * const { count } = await prisma.numberOfViews.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NumberOfViewsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NumberOfViewsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NumberOfViews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NumberOfViewsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NumberOfViews
     * const numberOfViews = await prisma.numberOfViews.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NumberOfViewsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NumberOfViewsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NumberOfViews.
     * @param {NumberOfViewsUpsertArgs} args - Arguments to update or create a NumberOfViews.
     * @example
     * // Update or create a NumberOfViews
     * const numberOfViews = await prisma.numberOfViews.upsert({
     *   create: {
     *     // ... data to create a NumberOfViews
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NumberOfViews we want to update
     *   }
     * })
    **/
    upsert<T extends NumberOfViewsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NumberOfViewsUpsertArgs<ExtArgs>>
    ): Prisma__NumberOfViewsClient<$Result.GetResult<Prisma.$NumberOfViewsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of NumberOfViews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NumberOfViewsCountArgs} args - Arguments to filter NumberOfViews to count.
     * @example
     * // Count the number of NumberOfViews
     * const count = await prisma.numberOfViews.count({
     *   where: {
     *     // ... the filter for the NumberOfViews we want to count
     *   }
     * })
    **/
    count<T extends NumberOfViewsCountArgs>(
      args?: Subset<T, NumberOfViewsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NumberOfViewsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NumberOfViews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NumberOfViewsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NumberOfViewsAggregateArgs>(args: Subset<T, NumberOfViewsAggregateArgs>): Prisma.PrismaPromise<GetNumberOfViewsAggregateType<T>>

    /**
     * Group by NumberOfViews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NumberOfViewsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NumberOfViewsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NumberOfViewsGroupByArgs['orderBy'] }
        : { orderBy?: NumberOfViewsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NumberOfViewsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNumberOfViewsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NumberOfViews model
   */
  readonly fields: NumberOfViewsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NumberOfViews.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NumberOfViewsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the NumberOfViews model
   */ 
  interface NumberOfViewsFieldRefs {
    readonly id: FieldRef<"NumberOfViews", 'Int'>
    readonly count: FieldRef<"NumberOfViews", 'String'>
    readonly productCode: FieldRef<"NumberOfViews", 'String'>
    readonly emailAddress: FieldRef<"NumberOfViews", 'String'>
    readonly IpAddress: FieldRef<"NumberOfViews", 'String'>
    readonly Country: FieldRef<"NumberOfViews", 'String'>
    readonly dateVisited: FieldRef<"NumberOfViews", 'String'>
  }
    

  // Custom InputTypes

  /**
   * NumberOfViews findUnique
   */
  export type NumberOfViewsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NumberOfViews
     */
    select?: NumberOfViewsSelect<ExtArgs> | null
    /**
     * Filter, which NumberOfViews to fetch.
     */
    where: NumberOfViewsWhereUniqueInput
  }


  /**
   * NumberOfViews findUniqueOrThrow
   */
  export type NumberOfViewsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NumberOfViews
     */
    select?: NumberOfViewsSelect<ExtArgs> | null
    /**
     * Filter, which NumberOfViews to fetch.
     */
    where: NumberOfViewsWhereUniqueInput
  }


  /**
   * NumberOfViews findFirst
   */
  export type NumberOfViewsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NumberOfViews
     */
    select?: NumberOfViewsSelect<ExtArgs> | null
    /**
     * Filter, which NumberOfViews to fetch.
     */
    where?: NumberOfViewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NumberOfViews to fetch.
     */
    orderBy?: NumberOfViewsOrderByWithRelationInput | NumberOfViewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NumberOfViews.
     */
    cursor?: NumberOfViewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NumberOfViews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NumberOfViews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NumberOfViews.
     */
    distinct?: NumberOfViewsScalarFieldEnum | NumberOfViewsScalarFieldEnum[]
  }


  /**
   * NumberOfViews findFirstOrThrow
   */
  export type NumberOfViewsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NumberOfViews
     */
    select?: NumberOfViewsSelect<ExtArgs> | null
    /**
     * Filter, which NumberOfViews to fetch.
     */
    where?: NumberOfViewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NumberOfViews to fetch.
     */
    orderBy?: NumberOfViewsOrderByWithRelationInput | NumberOfViewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NumberOfViews.
     */
    cursor?: NumberOfViewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NumberOfViews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NumberOfViews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NumberOfViews.
     */
    distinct?: NumberOfViewsScalarFieldEnum | NumberOfViewsScalarFieldEnum[]
  }


  /**
   * NumberOfViews findMany
   */
  export type NumberOfViewsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NumberOfViews
     */
    select?: NumberOfViewsSelect<ExtArgs> | null
    /**
     * Filter, which NumberOfViews to fetch.
     */
    where?: NumberOfViewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NumberOfViews to fetch.
     */
    orderBy?: NumberOfViewsOrderByWithRelationInput | NumberOfViewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NumberOfViews.
     */
    cursor?: NumberOfViewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NumberOfViews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NumberOfViews.
     */
    skip?: number
    distinct?: NumberOfViewsScalarFieldEnum | NumberOfViewsScalarFieldEnum[]
  }


  /**
   * NumberOfViews create
   */
  export type NumberOfViewsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NumberOfViews
     */
    select?: NumberOfViewsSelect<ExtArgs> | null
    /**
     * The data needed to create a NumberOfViews.
     */
    data?: XOR<NumberOfViewsCreateInput, NumberOfViewsUncheckedCreateInput>
  }


  /**
   * NumberOfViews update
   */
  export type NumberOfViewsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NumberOfViews
     */
    select?: NumberOfViewsSelect<ExtArgs> | null
    /**
     * The data needed to update a NumberOfViews.
     */
    data: XOR<NumberOfViewsUpdateInput, NumberOfViewsUncheckedUpdateInput>
    /**
     * Choose, which NumberOfViews to update.
     */
    where: NumberOfViewsWhereUniqueInput
  }


  /**
   * NumberOfViews updateMany
   */
  export type NumberOfViewsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NumberOfViews.
     */
    data: XOR<NumberOfViewsUpdateManyMutationInput, NumberOfViewsUncheckedUpdateManyInput>
    /**
     * Filter which NumberOfViews to update
     */
    where?: NumberOfViewsWhereInput
  }


  /**
   * NumberOfViews upsert
   */
  export type NumberOfViewsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NumberOfViews
     */
    select?: NumberOfViewsSelect<ExtArgs> | null
    /**
     * The filter to search for the NumberOfViews to update in case it exists.
     */
    where: NumberOfViewsWhereUniqueInput
    /**
     * In case the NumberOfViews found by the `where` argument doesn't exist, create a new NumberOfViews with this data.
     */
    create: XOR<NumberOfViewsCreateInput, NumberOfViewsUncheckedCreateInput>
    /**
     * In case the NumberOfViews was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NumberOfViewsUpdateInput, NumberOfViewsUncheckedUpdateInput>
  }


  /**
   * NumberOfViews delete
   */
  export type NumberOfViewsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NumberOfViews
     */
    select?: NumberOfViewsSelect<ExtArgs> | null
    /**
     * Filter which NumberOfViews to delete.
     */
    where: NumberOfViewsWhereUniqueInput
  }


  /**
   * NumberOfViews deleteMany
   */
  export type NumberOfViewsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NumberOfViews to delete
     */
    where?: NumberOfViewsWhereInput
  }


  /**
   * NumberOfViews without action
   */
  export type NumberOfViewsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NumberOfViews
     */
    select?: NumberOfViewsSelect<ExtArgs> | null
  }



  /**
   * Model WebsiteVisits
   */

  export type AggregateWebsiteVisits = {
    _count: WebsiteVisitsCountAggregateOutputType | null
    _avg: WebsiteVisitsAvgAggregateOutputType | null
    _sum: WebsiteVisitsSumAggregateOutputType | null
    _min: WebsiteVisitsMinAggregateOutputType | null
    _max: WebsiteVisitsMaxAggregateOutputType | null
  }

  export type WebsiteVisitsAvgAggregateOutputType = {
    id: number | null
  }

  export type WebsiteVisitsSumAggregateOutputType = {
    id: number | null
  }

  export type WebsiteVisitsMinAggregateOutputType = {
    id: number | null
    IpAddress: string | null
    Country: string | null
    dateVisited: string | null
  }

  export type WebsiteVisitsMaxAggregateOutputType = {
    id: number | null
    IpAddress: string | null
    Country: string | null
    dateVisited: string | null
  }

  export type WebsiteVisitsCountAggregateOutputType = {
    id: number
    IpAddress: number
    Country: number
    dateVisited: number
    _all: number
  }


  export type WebsiteVisitsAvgAggregateInputType = {
    id?: true
  }

  export type WebsiteVisitsSumAggregateInputType = {
    id?: true
  }

  export type WebsiteVisitsMinAggregateInputType = {
    id?: true
    IpAddress?: true
    Country?: true
    dateVisited?: true
  }

  export type WebsiteVisitsMaxAggregateInputType = {
    id?: true
    IpAddress?: true
    Country?: true
    dateVisited?: true
  }

  export type WebsiteVisitsCountAggregateInputType = {
    id?: true
    IpAddress?: true
    Country?: true
    dateVisited?: true
    _all?: true
  }

  export type WebsiteVisitsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebsiteVisits to aggregate.
     */
    where?: WebsiteVisitsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebsiteVisits to fetch.
     */
    orderBy?: WebsiteVisitsOrderByWithRelationInput | WebsiteVisitsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WebsiteVisitsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebsiteVisits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebsiteVisits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WebsiteVisits
    **/
    _count?: true | WebsiteVisitsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WebsiteVisitsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WebsiteVisitsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WebsiteVisitsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WebsiteVisitsMaxAggregateInputType
  }

  export type GetWebsiteVisitsAggregateType<T extends WebsiteVisitsAggregateArgs> = {
        [P in keyof T & keyof AggregateWebsiteVisits]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWebsiteVisits[P]>
      : GetScalarType<T[P], AggregateWebsiteVisits[P]>
  }




  export type WebsiteVisitsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebsiteVisitsWhereInput
    orderBy?: WebsiteVisitsOrderByWithAggregationInput | WebsiteVisitsOrderByWithAggregationInput[]
    by: WebsiteVisitsScalarFieldEnum[] | WebsiteVisitsScalarFieldEnum
    having?: WebsiteVisitsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WebsiteVisitsCountAggregateInputType | true
    _avg?: WebsiteVisitsAvgAggregateInputType
    _sum?: WebsiteVisitsSumAggregateInputType
    _min?: WebsiteVisitsMinAggregateInputType
    _max?: WebsiteVisitsMaxAggregateInputType
  }

  export type WebsiteVisitsGroupByOutputType = {
    id: number
    IpAddress: string
    Country: string
    dateVisited: string
    _count: WebsiteVisitsCountAggregateOutputType | null
    _avg: WebsiteVisitsAvgAggregateOutputType | null
    _sum: WebsiteVisitsSumAggregateOutputType | null
    _min: WebsiteVisitsMinAggregateOutputType | null
    _max: WebsiteVisitsMaxAggregateOutputType | null
  }

  type GetWebsiteVisitsGroupByPayload<T extends WebsiteVisitsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WebsiteVisitsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WebsiteVisitsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WebsiteVisitsGroupByOutputType[P]>
            : GetScalarType<T[P], WebsiteVisitsGroupByOutputType[P]>
        }
      >
    >


  export type WebsiteVisitsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    IpAddress?: boolean
    Country?: boolean
    dateVisited?: boolean
  }, ExtArgs["result"]["websiteVisits"]>

  export type WebsiteVisitsSelectScalar = {
    id?: boolean
    IpAddress?: boolean
    Country?: boolean
    dateVisited?: boolean
  }


  export type $WebsiteVisitsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WebsiteVisits"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      IpAddress: string
      Country: string
      dateVisited: string
    }, ExtArgs["result"]["websiteVisits"]>
    composites: {}
  }


  type WebsiteVisitsGetPayload<S extends boolean | null | undefined | WebsiteVisitsDefaultArgs> = $Result.GetResult<Prisma.$WebsiteVisitsPayload, S>

  type WebsiteVisitsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WebsiteVisitsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: WebsiteVisitsCountAggregateInputType | true
    }

  export interface WebsiteVisitsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WebsiteVisits'], meta: { name: 'WebsiteVisits' } }
    /**
     * Find zero or one WebsiteVisits that matches the filter.
     * @param {WebsiteVisitsFindUniqueArgs} args - Arguments to find a WebsiteVisits
     * @example
     * // Get one WebsiteVisits
     * const websiteVisits = await prisma.websiteVisits.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WebsiteVisitsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, WebsiteVisitsFindUniqueArgs<ExtArgs>>
    ): Prisma__WebsiteVisitsClient<$Result.GetResult<Prisma.$WebsiteVisitsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one WebsiteVisits that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WebsiteVisitsFindUniqueOrThrowArgs} args - Arguments to find a WebsiteVisits
     * @example
     * // Get one WebsiteVisits
     * const websiteVisits = await prisma.websiteVisits.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WebsiteVisitsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WebsiteVisitsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WebsiteVisitsClient<$Result.GetResult<Prisma.$WebsiteVisitsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first WebsiteVisits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsiteVisitsFindFirstArgs} args - Arguments to find a WebsiteVisits
     * @example
     * // Get one WebsiteVisits
     * const websiteVisits = await prisma.websiteVisits.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WebsiteVisitsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, WebsiteVisitsFindFirstArgs<ExtArgs>>
    ): Prisma__WebsiteVisitsClient<$Result.GetResult<Prisma.$WebsiteVisitsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first WebsiteVisits that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsiteVisitsFindFirstOrThrowArgs} args - Arguments to find a WebsiteVisits
     * @example
     * // Get one WebsiteVisits
     * const websiteVisits = await prisma.websiteVisits.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WebsiteVisitsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WebsiteVisitsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WebsiteVisitsClient<$Result.GetResult<Prisma.$WebsiteVisitsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more WebsiteVisits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsiteVisitsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WebsiteVisits
     * const websiteVisits = await prisma.websiteVisits.findMany()
     * 
     * // Get first 10 WebsiteVisits
     * const websiteVisits = await prisma.websiteVisits.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const websiteVisitsWithIdOnly = await prisma.websiteVisits.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WebsiteVisitsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WebsiteVisitsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebsiteVisitsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a WebsiteVisits.
     * @param {WebsiteVisitsCreateArgs} args - Arguments to create a WebsiteVisits.
     * @example
     * // Create one WebsiteVisits
     * const WebsiteVisits = await prisma.websiteVisits.create({
     *   data: {
     *     // ... data to create a WebsiteVisits
     *   }
     * })
     * 
    **/
    create<T extends WebsiteVisitsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WebsiteVisitsCreateArgs<ExtArgs>>
    ): Prisma__WebsiteVisitsClient<$Result.GetResult<Prisma.$WebsiteVisitsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a WebsiteVisits.
     * @param {WebsiteVisitsDeleteArgs} args - Arguments to delete one WebsiteVisits.
     * @example
     * // Delete one WebsiteVisits
     * const WebsiteVisits = await prisma.websiteVisits.delete({
     *   where: {
     *     // ... filter to delete one WebsiteVisits
     *   }
     * })
     * 
    **/
    delete<T extends WebsiteVisitsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WebsiteVisitsDeleteArgs<ExtArgs>>
    ): Prisma__WebsiteVisitsClient<$Result.GetResult<Prisma.$WebsiteVisitsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one WebsiteVisits.
     * @param {WebsiteVisitsUpdateArgs} args - Arguments to update one WebsiteVisits.
     * @example
     * // Update one WebsiteVisits
     * const websiteVisits = await prisma.websiteVisits.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WebsiteVisitsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WebsiteVisitsUpdateArgs<ExtArgs>>
    ): Prisma__WebsiteVisitsClient<$Result.GetResult<Prisma.$WebsiteVisitsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more WebsiteVisits.
     * @param {WebsiteVisitsDeleteManyArgs} args - Arguments to filter WebsiteVisits to delete.
     * @example
     * // Delete a few WebsiteVisits
     * const { count } = await prisma.websiteVisits.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WebsiteVisitsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WebsiteVisitsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WebsiteVisits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsiteVisitsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WebsiteVisits
     * const websiteVisits = await prisma.websiteVisits.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WebsiteVisitsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WebsiteVisitsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WebsiteVisits.
     * @param {WebsiteVisitsUpsertArgs} args - Arguments to update or create a WebsiteVisits.
     * @example
     * // Update or create a WebsiteVisits
     * const websiteVisits = await prisma.websiteVisits.upsert({
     *   create: {
     *     // ... data to create a WebsiteVisits
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WebsiteVisits we want to update
     *   }
     * })
    **/
    upsert<T extends WebsiteVisitsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WebsiteVisitsUpsertArgs<ExtArgs>>
    ): Prisma__WebsiteVisitsClient<$Result.GetResult<Prisma.$WebsiteVisitsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of WebsiteVisits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsiteVisitsCountArgs} args - Arguments to filter WebsiteVisits to count.
     * @example
     * // Count the number of WebsiteVisits
     * const count = await prisma.websiteVisits.count({
     *   where: {
     *     // ... the filter for the WebsiteVisits we want to count
     *   }
     * })
    **/
    count<T extends WebsiteVisitsCountArgs>(
      args?: Subset<T, WebsiteVisitsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WebsiteVisitsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WebsiteVisits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsiteVisitsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WebsiteVisitsAggregateArgs>(args: Subset<T, WebsiteVisitsAggregateArgs>): Prisma.PrismaPromise<GetWebsiteVisitsAggregateType<T>>

    /**
     * Group by WebsiteVisits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsiteVisitsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WebsiteVisitsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WebsiteVisitsGroupByArgs['orderBy'] }
        : { orderBy?: WebsiteVisitsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WebsiteVisitsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWebsiteVisitsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WebsiteVisits model
   */
  readonly fields: WebsiteVisitsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WebsiteVisits.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WebsiteVisitsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the WebsiteVisits model
   */ 
  interface WebsiteVisitsFieldRefs {
    readonly id: FieldRef<"WebsiteVisits", 'Int'>
    readonly IpAddress: FieldRef<"WebsiteVisits", 'String'>
    readonly Country: FieldRef<"WebsiteVisits", 'String'>
    readonly dateVisited: FieldRef<"WebsiteVisits", 'String'>
  }
    

  // Custom InputTypes

  /**
   * WebsiteVisits findUnique
   */
  export type WebsiteVisitsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebsiteVisits
     */
    select?: WebsiteVisitsSelect<ExtArgs> | null
    /**
     * Filter, which WebsiteVisits to fetch.
     */
    where: WebsiteVisitsWhereUniqueInput
  }


  /**
   * WebsiteVisits findUniqueOrThrow
   */
  export type WebsiteVisitsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebsiteVisits
     */
    select?: WebsiteVisitsSelect<ExtArgs> | null
    /**
     * Filter, which WebsiteVisits to fetch.
     */
    where: WebsiteVisitsWhereUniqueInput
  }


  /**
   * WebsiteVisits findFirst
   */
  export type WebsiteVisitsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebsiteVisits
     */
    select?: WebsiteVisitsSelect<ExtArgs> | null
    /**
     * Filter, which WebsiteVisits to fetch.
     */
    where?: WebsiteVisitsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebsiteVisits to fetch.
     */
    orderBy?: WebsiteVisitsOrderByWithRelationInput | WebsiteVisitsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebsiteVisits.
     */
    cursor?: WebsiteVisitsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebsiteVisits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebsiteVisits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebsiteVisits.
     */
    distinct?: WebsiteVisitsScalarFieldEnum | WebsiteVisitsScalarFieldEnum[]
  }


  /**
   * WebsiteVisits findFirstOrThrow
   */
  export type WebsiteVisitsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebsiteVisits
     */
    select?: WebsiteVisitsSelect<ExtArgs> | null
    /**
     * Filter, which WebsiteVisits to fetch.
     */
    where?: WebsiteVisitsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebsiteVisits to fetch.
     */
    orderBy?: WebsiteVisitsOrderByWithRelationInput | WebsiteVisitsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebsiteVisits.
     */
    cursor?: WebsiteVisitsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebsiteVisits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebsiteVisits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebsiteVisits.
     */
    distinct?: WebsiteVisitsScalarFieldEnum | WebsiteVisitsScalarFieldEnum[]
  }


  /**
   * WebsiteVisits findMany
   */
  export type WebsiteVisitsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebsiteVisits
     */
    select?: WebsiteVisitsSelect<ExtArgs> | null
    /**
     * Filter, which WebsiteVisits to fetch.
     */
    where?: WebsiteVisitsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebsiteVisits to fetch.
     */
    orderBy?: WebsiteVisitsOrderByWithRelationInput | WebsiteVisitsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WebsiteVisits.
     */
    cursor?: WebsiteVisitsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebsiteVisits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebsiteVisits.
     */
    skip?: number
    distinct?: WebsiteVisitsScalarFieldEnum | WebsiteVisitsScalarFieldEnum[]
  }


  /**
   * WebsiteVisits create
   */
  export type WebsiteVisitsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebsiteVisits
     */
    select?: WebsiteVisitsSelect<ExtArgs> | null
    /**
     * The data needed to create a WebsiteVisits.
     */
    data: XOR<WebsiteVisitsCreateInput, WebsiteVisitsUncheckedCreateInput>
  }


  /**
   * WebsiteVisits update
   */
  export type WebsiteVisitsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebsiteVisits
     */
    select?: WebsiteVisitsSelect<ExtArgs> | null
    /**
     * The data needed to update a WebsiteVisits.
     */
    data: XOR<WebsiteVisitsUpdateInput, WebsiteVisitsUncheckedUpdateInput>
    /**
     * Choose, which WebsiteVisits to update.
     */
    where: WebsiteVisitsWhereUniqueInput
  }


  /**
   * WebsiteVisits updateMany
   */
  export type WebsiteVisitsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WebsiteVisits.
     */
    data: XOR<WebsiteVisitsUpdateManyMutationInput, WebsiteVisitsUncheckedUpdateManyInput>
    /**
     * Filter which WebsiteVisits to update
     */
    where?: WebsiteVisitsWhereInput
  }


  /**
   * WebsiteVisits upsert
   */
  export type WebsiteVisitsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebsiteVisits
     */
    select?: WebsiteVisitsSelect<ExtArgs> | null
    /**
     * The filter to search for the WebsiteVisits to update in case it exists.
     */
    where: WebsiteVisitsWhereUniqueInput
    /**
     * In case the WebsiteVisits found by the `where` argument doesn't exist, create a new WebsiteVisits with this data.
     */
    create: XOR<WebsiteVisitsCreateInput, WebsiteVisitsUncheckedCreateInput>
    /**
     * In case the WebsiteVisits was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WebsiteVisitsUpdateInput, WebsiteVisitsUncheckedUpdateInput>
  }


  /**
   * WebsiteVisits delete
   */
  export type WebsiteVisitsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebsiteVisits
     */
    select?: WebsiteVisitsSelect<ExtArgs> | null
    /**
     * Filter which WebsiteVisits to delete.
     */
    where: WebsiteVisitsWhereUniqueInput
  }


  /**
   * WebsiteVisits deleteMany
   */
  export type WebsiteVisitsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebsiteVisits to delete
     */
    where?: WebsiteVisitsWhereInput
  }


  /**
   * WebsiteVisits without action
   */
  export type WebsiteVisitsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebsiteVisits
     */
    select?: WebsiteVisitsSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    accountCode: 'accountCode',
    password: 'password',
    accountLevel: 'accountLevel',
    loginAttemp: 'loginAttemp',
    macAddress: 'macAddress',
    agentIdentity: 'agentIdentity',
    image: 'image',
    nameOfStore: 'nameOfStore',
    dateCreated: 'dateCreated',
    dateUpdated: 'dateUpdated'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CrowdMessagesScalarFieldEnum: {
    id: 'id',
    Messages: 'Messages',
    Sender: 'Sender',
    dateSent: 'dateSent'
  };

  export type CrowdMessagesScalarFieldEnum = (typeof CrowdMessagesScalarFieldEnum)[keyof typeof CrowdMessagesScalarFieldEnum]


  export const AccountDetailsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    fullname: 'fullname',
    storeName: 'storeName',
    contactNo: 'contactNo',
    Address: 'Address',
    accountEmail: 'accountEmail'
  };

  export type AccountDetailsScalarFieldEnum = (typeof AccountDetailsScalarFieldEnum)[keyof typeof AccountDetailsScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    Name: 'Name',
    status: 'status',
    icon: 'icon',
    image: 'image'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const ProductTypesScalarFieldEnum: {
    id: 'id',
    Category: 'Category',
    Name: 'Name'
  };

  export type ProductTypesScalarFieldEnum = (typeof ProductTypesScalarFieldEnum)[keyof typeof ProductTypesScalarFieldEnum]


  export const BrandnameScalarFieldEnum: {
    id: 'id',
    ProductType: 'ProductType',
    Name: 'Name'
  };

  export type BrandnameScalarFieldEnum = (typeof BrandnameScalarFieldEnum)[keyof typeof BrandnameScalarFieldEnum]


  export const InventoryScalarFieldEnum: {
    id: 'id',
    styleCode: 'styleCode',
    productType: 'productType',
    category: 'category',
    name: 'name',
    status: 'status',
    dateCreated: 'dateCreated',
    dateUpdated: 'dateUpdated',
    agentEmail: 'agentEmail',
    brandname: 'brandname',
    collectionItem: 'collectionItem'
  };

  export type InventoryScalarFieldEnum = (typeof InventoryScalarFieldEnum)[keyof typeof InventoryScalarFieldEnum]


  export const ChildInventoryScalarFieldEnum: {
    id: 'id',
    productCode: 'productCode',
    category: 'category',
    productType: 'productType',
    imageReferences: 'imageReferences',
    model: 'model',
    style_Code: 'style_Code',
    name: 'name',
    color: 'color',
    size: 'size',
    price: 'price',
    stock: 'stock',
    status: 'status',
    thumbnail: 'thumbnail',
    parentId: 'parentId',
    creator: 'creator',
    editor: 'editor',
    dateCreated: 'dateCreated',
    dateUpdated: 'dateUpdated',
    agentEmail: 'agentEmail'
  };

  export type ChildInventoryScalarFieldEnum = (typeof ChildInventoryScalarFieldEnum)[keyof typeof ChildInventoryScalarFieldEnum]


  export const Inv_subImageScalarFieldEnum: {
    id: 'id',
    subImageRelationParent: 'subImageRelationParent',
    subImageRelationChild: 'subImageRelationChild',
    isVideo: 'isVideo',
    ImagePath: 'ImagePath'
  };

  export type Inv_subImageScalarFieldEnum = (typeof Inv_subImageScalarFieldEnum)[keyof typeof Inv_subImageScalarFieldEnum]


  export const AllowedDevicesScalarFieldEnum: {
    id: 'id',
    macAddress: 'macAddress'
  };

  export type AllowedDevicesScalarFieldEnum = (typeof AllowedDevicesScalarFieldEnum)[keyof typeof AllowedDevicesScalarFieldEnum]


  export const NumberOfViewsScalarFieldEnum: {
    id: 'id',
    count: 'count',
    productCode: 'productCode',
    emailAddress: 'emailAddress',
    IpAddress: 'IpAddress',
    Country: 'Country',
    dateVisited: 'dateVisited'
  };

  export type NumberOfViewsScalarFieldEnum = (typeof NumberOfViewsScalarFieldEnum)[keyof typeof NumberOfViewsScalarFieldEnum]


  export const WebsiteVisitsScalarFieldEnum: {
    id: 'id',
    IpAddress: 'IpAddress',
    Country: 'Country',
    dateVisited: 'dateVisited'
  };

  export type WebsiteVisitsScalarFieldEnum = (typeof WebsiteVisitsScalarFieldEnum)[keyof typeof WebsiteVisitsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    accountCode?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    accountLevel?: StringNullableFilter<"User"> | string | null
    loginAttemp?: StringNullableFilter<"User"> | string | null
    macAddress?: StringNullableFilter<"User"> | string | null
    agentIdentity?: StringNullableFilter<"User"> | string | null
    image?: StringNullableFilter<"User"> | string | null
    nameOfStore?: StringNullableFilter<"User"> | string | null
    dateCreated?: DateTimeFilter<"User"> | Date | string
    dateUpdated?: DateTimeNullableFilter<"User"> | Date | string | null
    accountDetails?: AccountDetailsListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    accountCode?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    accountLevel?: SortOrderInput | SortOrder
    loginAttemp?: SortOrderInput | SortOrder
    macAddress?: SortOrderInput | SortOrder
    agentIdentity?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    nameOfStore?: SortOrderInput | SortOrder
    dateCreated?: SortOrder
    dateUpdated?: SortOrderInput | SortOrder
    accountDetails?: AccountDetailsOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    accountCode?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    accountLevel?: StringNullableFilter<"User"> | string | null
    loginAttemp?: StringNullableFilter<"User"> | string | null
    macAddress?: StringNullableFilter<"User"> | string | null
    agentIdentity?: StringNullableFilter<"User"> | string | null
    image?: StringNullableFilter<"User"> | string | null
    nameOfStore?: StringNullableFilter<"User"> | string | null
    dateCreated?: DateTimeFilter<"User"> | Date | string
    dateUpdated?: DateTimeNullableFilter<"User"> | Date | string | null
    accountDetails?: AccountDetailsListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    accountCode?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    accountLevel?: SortOrderInput | SortOrder
    loginAttemp?: SortOrderInput | SortOrder
    macAddress?: SortOrderInput | SortOrder
    agentIdentity?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    nameOfStore?: SortOrderInput | SortOrder
    dateCreated?: SortOrder
    dateUpdated?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    accountCode?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    accountLevel?: StringNullableWithAggregatesFilter<"User"> | string | null
    loginAttemp?: StringNullableWithAggregatesFilter<"User"> | string | null
    macAddress?: StringNullableWithAggregatesFilter<"User"> | string | null
    agentIdentity?: StringNullableWithAggregatesFilter<"User"> | string | null
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    nameOfStore?: StringNullableWithAggregatesFilter<"User"> | string | null
    dateCreated?: DateTimeWithAggregatesFilter<"User"> | Date | string
    dateUpdated?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type CrowdMessagesWhereInput = {
    AND?: CrowdMessagesWhereInput | CrowdMessagesWhereInput[]
    OR?: CrowdMessagesWhereInput[]
    NOT?: CrowdMessagesWhereInput | CrowdMessagesWhereInput[]
    id?: StringFilter<"CrowdMessages"> | string
    Messages?: StringNullableFilter<"CrowdMessages"> | string | null
    Sender?: StringNullableFilter<"CrowdMessages"> | string | null
    dateSent?: DateTimeFilter<"CrowdMessages"> | Date | string
  }

  export type CrowdMessagesOrderByWithRelationInput = {
    id?: SortOrder
    Messages?: SortOrderInput | SortOrder
    Sender?: SortOrderInput | SortOrder
    dateSent?: SortOrder
  }

  export type CrowdMessagesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CrowdMessagesWhereInput | CrowdMessagesWhereInput[]
    OR?: CrowdMessagesWhereInput[]
    NOT?: CrowdMessagesWhereInput | CrowdMessagesWhereInput[]
    Messages?: StringNullableFilter<"CrowdMessages"> | string | null
    Sender?: StringNullableFilter<"CrowdMessages"> | string | null
    dateSent?: DateTimeFilter<"CrowdMessages"> | Date | string
  }, "id">

  export type CrowdMessagesOrderByWithAggregationInput = {
    id?: SortOrder
    Messages?: SortOrderInput | SortOrder
    Sender?: SortOrderInput | SortOrder
    dateSent?: SortOrder
    _count?: CrowdMessagesCountOrderByAggregateInput
    _max?: CrowdMessagesMaxOrderByAggregateInput
    _min?: CrowdMessagesMinOrderByAggregateInput
  }

  export type CrowdMessagesScalarWhereWithAggregatesInput = {
    AND?: CrowdMessagesScalarWhereWithAggregatesInput | CrowdMessagesScalarWhereWithAggregatesInput[]
    OR?: CrowdMessagesScalarWhereWithAggregatesInput[]
    NOT?: CrowdMessagesScalarWhereWithAggregatesInput | CrowdMessagesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CrowdMessages"> | string
    Messages?: StringNullableWithAggregatesFilter<"CrowdMessages"> | string | null
    Sender?: StringNullableWithAggregatesFilter<"CrowdMessages"> | string | null
    dateSent?: DateTimeWithAggregatesFilter<"CrowdMessages"> | Date | string
  }

  export type AccountDetailsWhereInput = {
    AND?: AccountDetailsWhereInput | AccountDetailsWhereInput[]
    OR?: AccountDetailsWhereInput[]
    NOT?: AccountDetailsWhereInput | AccountDetailsWhereInput[]
    id?: IntFilter<"AccountDetails"> | number
    userId?: StringFilter<"AccountDetails"> | string
    fullname?: StringNullableFilter<"AccountDetails"> | string | null
    storeName?: StringNullableFilter<"AccountDetails"> | string | null
    contactNo?: StringNullableFilter<"AccountDetails"> | string | null
    Address?: StringNullableFilter<"AccountDetails"> | string | null
    accountEmail?: StringFilter<"AccountDetails"> | string
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AccountDetailsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    fullname?: SortOrderInput | SortOrder
    storeName?: SortOrderInput | SortOrder
    contactNo?: SortOrderInput | SortOrder
    Address?: SortOrderInput | SortOrder
    accountEmail?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type AccountDetailsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AccountDetailsWhereInput | AccountDetailsWhereInput[]
    OR?: AccountDetailsWhereInput[]
    NOT?: AccountDetailsWhereInput | AccountDetailsWhereInput[]
    userId?: StringFilter<"AccountDetails"> | string
    fullname?: StringNullableFilter<"AccountDetails"> | string | null
    storeName?: StringNullableFilter<"AccountDetails"> | string | null
    contactNo?: StringNullableFilter<"AccountDetails"> | string | null
    Address?: StringNullableFilter<"AccountDetails"> | string | null
    accountEmail?: StringFilter<"AccountDetails"> | string
    User?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type AccountDetailsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    fullname?: SortOrderInput | SortOrder
    storeName?: SortOrderInput | SortOrder
    contactNo?: SortOrderInput | SortOrder
    Address?: SortOrderInput | SortOrder
    accountEmail?: SortOrder
    _count?: AccountDetailsCountOrderByAggregateInput
    _avg?: AccountDetailsAvgOrderByAggregateInput
    _max?: AccountDetailsMaxOrderByAggregateInput
    _min?: AccountDetailsMinOrderByAggregateInput
    _sum?: AccountDetailsSumOrderByAggregateInput
  }

  export type AccountDetailsScalarWhereWithAggregatesInput = {
    AND?: AccountDetailsScalarWhereWithAggregatesInput | AccountDetailsScalarWhereWithAggregatesInput[]
    OR?: AccountDetailsScalarWhereWithAggregatesInput[]
    NOT?: AccountDetailsScalarWhereWithAggregatesInput | AccountDetailsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AccountDetails"> | number
    userId?: StringWithAggregatesFilter<"AccountDetails"> | string
    fullname?: StringNullableWithAggregatesFilter<"AccountDetails"> | string | null
    storeName?: StringNullableWithAggregatesFilter<"AccountDetails"> | string | null
    contactNo?: StringNullableWithAggregatesFilter<"AccountDetails"> | string | null
    Address?: StringNullableWithAggregatesFilter<"AccountDetails"> | string | null
    accountEmail?: StringWithAggregatesFilter<"AccountDetails"> | string
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: IntFilter<"Category"> | number
    Name?: StringNullableFilter<"Category"> | string | null
    status?: StringNullableFilter<"Category"> | string | null
    icon?: StringNullableFilter<"Category"> | string | null
    image?: StringNullableFilter<"Category"> | string | null
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    Name?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    Name?: StringNullableFilter<"Category"> | string | null
    status?: StringNullableFilter<"Category"> | string | null
    icon?: StringNullableFilter<"Category"> | string | null
    image?: StringNullableFilter<"Category"> | string | null
  }, "id">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    Name?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Category"> | number
    Name?: StringNullableWithAggregatesFilter<"Category"> | string | null
    status?: StringNullableWithAggregatesFilter<"Category"> | string | null
    icon?: StringNullableWithAggregatesFilter<"Category"> | string | null
    image?: StringNullableWithAggregatesFilter<"Category"> | string | null
  }

  export type ProductTypesWhereInput = {
    AND?: ProductTypesWhereInput | ProductTypesWhereInput[]
    OR?: ProductTypesWhereInput[]
    NOT?: ProductTypesWhereInput | ProductTypesWhereInput[]
    id?: IntFilter<"ProductTypes"> | number
    Category?: StringNullableFilter<"ProductTypes"> | string | null
    Name?: StringNullableFilter<"ProductTypes"> | string | null
  }

  export type ProductTypesOrderByWithRelationInput = {
    id?: SortOrder
    Category?: SortOrderInput | SortOrder
    Name?: SortOrderInput | SortOrder
  }

  export type ProductTypesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProductTypesWhereInput | ProductTypesWhereInput[]
    OR?: ProductTypesWhereInput[]
    NOT?: ProductTypesWhereInput | ProductTypesWhereInput[]
    Category?: StringNullableFilter<"ProductTypes"> | string | null
    Name?: StringNullableFilter<"ProductTypes"> | string | null
  }, "id">

  export type ProductTypesOrderByWithAggregationInput = {
    id?: SortOrder
    Category?: SortOrderInput | SortOrder
    Name?: SortOrderInput | SortOrder
    _count?: ProductTypesCountOrderByAggregateInput
    _avg?: ProductTypesAvgOrderByAggregateInput
    _max?: ProductTypesMaxOrderByAggregateInput
    _min?: ProductTypesMinOrderByAggregateInput
    _sum?: ProductTypesSumOrderByAggregateInput
  }

  export type ProductTypesScalarWhereWithAggregatesInput = {
    AND?: ProductTypesScalarWhereWithAggregatesInput | ProductTypesScalarWhereWithAggregatesInput[]
    OR?: ProductTypesScalarWhereWithAggregatesInput[]
    NOT?: ProductTypesScalarWhereWithAggregatesInput | ProductTypesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProductTypes"> | number
    Category?: StringNullableWithAggregatesFilter<"ProductTypes"> | string | null
    Name?: StringNullableWithAggregatesFilter<"ProductTypes"> | string | null
  }

  export type BrandnameWhereInput = {
    AND?: BrandnameWhereInput | BrandnameWhereInput[]
    OR?: BrandnameWhereInput[]
    NOT?: BrandnameWhereInput | BrandnameWhereInput[]
    id?: IntFilter<"Brandname"> | number
    ProductType?: StringNullableFilter<"Brandname"> | string | null
    Name?: StringNullableFilter<"Brandname"> | string | null
  }

  export type BrandnameOrderByWithRelationInput = {
    id?: SortOrder
    ProductType?: SortOrderInput | SortOrder
    Name?: SortOrderInput | SortOrder
  }

  export type BrandnameWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BrandnameWhereInput | BrandnameWhereInput[]
    OR?: BrandnameWhereInput[]
    NOT?: BrandnameWhereInput | BrandnameWhereInput[]
    ProductType?: StringNullableFilter<"Brandname"> | string | null
    Name?: StringNullableFilter<"Brandname"> | string | null
  }, "id">

  export type BrandnameOrderByWithAggregationInput = {
    id?: SortOrder
    ProductType?: SortOrderInput | SortOrder
    Name?: SortOrderInput | SortOrder
    _count?: BrandnameCountOrderByAggregateInput
    _avg?: BrandnameAvgOrderByAggregateInput
    _max?: BrandnameMaxOrderByAggregateInput
    _min?: BrandnameMinOrderByAggregateInput
    _sum?: BrandnameSumOrderByAggregateInput
  }

  export type BrandnameScalarWhereWithAggregatesInput = {
    AND?: BrandnameScalarWhereWithAggregatesInput | BrandnameScalarWhereWithAggregatesInput[]
    OR?: BrandnameScalarWhereWithAggregatesInput[]
    NOT?: BrandnameScalarWhereWithAggregatesInput | BrandnameScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Brandname"> | number
    ProductType?: StringNullableWithAggregatesFilter<"Brandname"> | string | null
    Name?: StringNullableWithAggregatesFilter<"Brandname"> | string | null
  }

  export type InventoryWhereInput = {
    AND?: InventoryWhereInput | InventoryWhereInput[]
    OR?: InventoryWhereInput[]
    NOT?: InventoryWhereInput | InventoryWhereInput[]
    id?: IntFilter<"Inventory"> | number
    styleCode?: StringFilter<"Inventory"> | string
    productType?: StringNullableFilter<"Inventory"> | string | null
    category?: StringNullableFilter<"Inventory"> | string | null
    name?: StringNullableFilter<"Inventory"> | string | null
    status?: StringNullableFilter<"Inventory"> | string | null
    dateCreated?: DateTimeFilter<"Inventory"> | Date | string
    dateUpdated?: DateTimeNullableFilter<"Inventory"> | Date | string | null
    agentEmail?: StringNullableFilter<"Inventory"> | string | null
    brandname?: StringNullableFilter<"Inventory"> | string | null
    collectionItem?: BoolNullableFilter<"Inventory"> | boolean | null
    childInventory?: ChildInventoryListRelationFilter
  }

  export type InventoryOrderByWithRelationInput = {
    id?: SortOrder
    styleCode?: SortOrder
    productType?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    dateCreated?: SortOrder
    dateUpdated?: SortOrderInput | SortOrder
    agentEmail?: SortOrderInput | SortOrder
    brandname?: SortOrderInput | SortOrder
    collectionItem?: SortOrderInput | SortOrder
    childInventory?: ChildInventoryOrderByRelationAggregateInput
  }

  export type InventoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    styleCode?: string
    AND?: InventoryWhereInput | InventoryWhereInput[]
    OR?: InventoryWhereInput[]
    NOT?: InventoryWhereInput | InventoryWhereInput[]
    productType?: StringNullableFilter<"Inventory"> | string | null
    category?: StringNullableFilter<"Inventory"> | string | null
    name?: StringNullableFilter<"Inventory"> | string | null
    status?: StringNullableFilter<"Inventory"> | string | null
    dateCreated?: DateTimeFilter<"Inventory"> | Date | string
    dateUpdated?: DateTimeNullableFilter<"Inventory"> | Date | string | null
    agentEmail?: StringNullableFilter<"Inventory"> | string | null
    brandname?: StringNullableFilter<"Inventory"> | string | null
    collectionItem?: BoolNullableFilter<"Inventory"> | boolean | null
    childInventory?: ChildInventoryListRelationFilter
  }, "id" | "styleCode">

  export type InventoryOrderByWithAggregationInput = {
    id?: SortOrder
    styleCode?: SortOrder
    productType?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    dateCreated?: SortOrder
    dateUpdated?: SortOrderInput | SortOrder
    agentEmail?: SortOrderInput | SortOrder
    brandname?: SortOrderInput | SortOrder
    collectionItem?: SortOrderInput | SortOrder
    _count?: InventoryCountOrderByAggregateInput
    _avg?: InventoryAvgOrderByAggregateInput
    _max?: InventoryMaxOrderByAggregateInput
    _min?: InventoryMinOrderByAggregateInput
    _sum?: InventorySumOrderByAggregateInput
  }

  export type InventoryScalarWhereWithAggregatesInput = {
    AND?: InventoryScalarWhereWithAggregatesInput | InventoryScalarWhereWithAggregatesInput[]
    OR?: InventoryScalarWhereWithAggregatesInput[]
    NOT?: InventoryScalarWhereWithAggregatesInput | InventoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Inventory"> | number
    styleCode?: StringWithAggregatesFilter<"Inventory"> | string
    productType?: StringNullableWithAggregatesFilter<"Inventory"> | string | null
    category?: StringNullableWithAggregatesFilter<"Inventory"> | string | null
    name?: StringNullableWithAggregatesFilter<"Inventory"> | string | null
    status?: StringNullableWithAggregatesFilter<"Inventory"> | string | null
    dateCreated?: DateTimeWithAggregatesFilter<"Inventory"> | Date | string
    dateUpdated?: DateTimeNullableWithAggregatesFilter<"Inventory"> | Date | string | null
    agentEmail?: StringNullableWithAggregatesFilter<"Inventory"> | string | null
    brandname?: StringNullableWithAggregatesFilter<"Inventory"> | string | null
    collectionItem?: BoolNullableWithAggregatesFilter<"Inventory"> | boolean | null
  }

  export type ChildInventoryWhereInput = {
    AND?: ChildInventoryWhereInput | ChildInventoryWhereInput[]
    OR?: ChildInventoryWhereInput[]
    NOT?: ChildInventoryWhereInput | ChildInventoryWhereInput[]
    id?: IntFilter<"ChildInventory"> | number
    productCode?: StringNullableFilter<"ChildInventory"> | string | null
    category?: StringNullableFilter<"ChildInventory"> | string | null
    productType?: StringNullableFilter<"ChildInventory"> | string | null
    imageReferences?: StringNullableFilter<"ChildInventory"> | string | null
    model?: StringNullableFilter<"ChildInventory"> | string | null
    style_Code?: StringNullableFilter<"ChildInventory"> | string | null
    name?: StringNullableFilter<"ChildInventory"> | string | null
    color?: StringNullableFilter<"ChildInventory"> | string | null
    size?: StringNullableFilter<"ChildInventory"> | string | null
    price?: FloatNullableFilter<"ChildInventory"> | number | null
    stock?: FloatNullableFilter<"ChildInventory"> | number | null
    status?: StringNullableFilter<"ChildInventory"> | string | null
    thumbnail?: StringNullableFilter<"ChildInventory"> | string | null
    parentId?: StringNullableFilter<"ChildInventory"> | string | null
    creator?: StringNullableFilter<"ChildInventory"> | string | null
    editor?: StringNullableFilter<"ChildInventory"> | string | null
    dateCreated?: DateTimeFilter<"ChildInventory"> | Date | string
    dateUpdated?: DateTimeNullableFilter<"ChildInventory"> | Date | string | null
    agentEmail?: StringNullableFilter<"ChildInventory"> | string | null
    subImageFieldOut?: Inv_subImageListRelationFilter
    childInventoryField?: XOR<InventoryNullableRelationFilter, InventoryWhereInput> | null
  }

  export type ChildInventoryOrderByWithRelationInput = {
    id?: SortOrder
    productCode?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    productType?: SortOrderInput | SortOrder
    imageReferences?: SortOrderInput | SortOrder
    model?: SortOrderInput | SortOrder
    style_Code?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    size?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    stock?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    thumbnail?: SortOrderInput | SortOrder
    parentId?: SortOrderInput | SortOrder
    creator?: SortOrderInput | SortOrder
    editor?: SortOrderInput | SortOrder
    dateCreated?: SortOrder
    dateUpdated?: SortOrderInput | SortOrder
    agentEmail?: SortOrderInput | SortOrder
    subImageFieldOut?: Inv_subImageOrderByRelationAggregateInput
    childInventoryField?: InventoryOrderByWithRelationInput
  }

  export type ChildInventoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ChildInventoryWhereInput | ChildInventoryWhereInput[]
    OR?: ChildInventoryWhereInput[]
    NOT?: ChildInventoryWhereInput | ChildInventoryWhereInput[]
    productCode?: StringNullableFilter<"ChildInventory"> | string | null
    category?: StringNullableFilter<"ChildInventory"> | string | null
    productType?: StringNullableFilter<"ChildInventory"> | string | null
    imageReferences?: StringNullableFilter<"ChildInventory"> | string | null
    model?: StringNullableFilter<"ChildInventory"> | string | null
    style_Code?: StringNullableFilter<"ChildInventory"> | string | null
    name?: StringNullableFilter<"ChildInventory"> | string | null
    color?: StringNullableFilter<"ChildInventory"> | string | null
    size?: StringNullableFilter<"ChildInventory"> | string | null
    price?: FloatNullableFilter<"ChildInventory"> | number | null
    stock?: FloatNullableFilter<"ChildInventory"> | number | null
    status?: StringNullableFilter<"ChildInventory"> | string | null
    thumbnail?: StringNullableFilter<"ChildInventory"> | string | null
    parentId?: StringNullableFilter<"ChildInventory"> | string | null
    creator?: StringNullableFilter<"ChildInventory"> | string | null
    editor?: StringNullableFilter<"ChildInventory"> | string | null
    dateCreated?: DateTimeFilter<"ChildInventory"> | Date | string
    dateUpdated?: DateTimeNullableFilter<"ChildInventory"> | Date | string | null
    agentEmail?: StringNullableFilter<"ChildInventory"> | string | null
    subImageFieldOut?: Inv_subImageListRelationFilter
    childInventoryField?: XOR<InventoryNullableRelationFilter, InventoryWhereInput> | null
  }, "id">

  export type ChildInventoryOrderByWithAggregationInput = {
    id?: SortOrder
    productCode?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    productType?: SortOrderInput | SortOrder
    imageReferences?: SortOrderInput | SortOrder
    model?: SortOrderInput | SortOrder
    style_Code?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    size?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    stock?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    thumbnail?: SortOrderInput | SortOrder
    parentId?: SortOrderInput | SortOrder
    creator?: SortOrderInput | SortOrder
    editor?: SortOrderInput | SortOrder
    dateCreated?: SortOrder
    dateUpdated?: SortOrderInput | SortOrder
    agentEmail?: SortOrderInput | SortOrder
    _count?: ChildInventoryCountOrderByAggregateInput
    _avg?: ChildInventoryAvgOrderByAggregateInput
    _max?: ChildInventoryMaxOrderByAggregateInput
    _min?: ChildInventoryMinOrderByAggregateInput
    _sum?: ChildInventorySumOrderByAggregateInput
  }

  export type ChildInventoryScalarWhereWithAggregatesInput = {
    AND?: ChildInventoryScalarWhereWithAggregatesInput | ChildInventoryScalarWhereWithAggregatesInput[]
    OR?: ChildInventoryScalarWhereWithAggregatesInput[]
    NOT?: ChildInventoryScalarWhereWithAggregatesInput | ChildInventoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ChildInventory"> | number
    productCode?: StringNullableWithAggregatesFilter<"ChildInventory"> | string | null
    category?: StringNullableWithAggregatesFilter<"ChildInventory"> | string | null
    productType?: StringNullableWithAggregatesFilter<"ChildInventory"> | string | null
    imageReferences?: StringNullableWithAggregatesFilter<"ChildInventory"> | string | null
    model?: StringNullableWithAggregatesFilter<"ChildInventory"> | string | null
    style_Code?: StringNullableWithAggregatesFilter<"ChildInventory"> | string | null
    name?: StringNullableWithAggregatesFilter<"ChildInventory"> | string | null
    color?: StringNullableWithAggregatesFilter<"ChildInventory"> | string | null
    size?: StringNullableWithAggregatesFilter<"ChildInventory"> | string | null
    price?: FloatNullableWithAggregatesFilter<"ChildInventory"> | number | null
    stock?: FloatNullableWithAggregatesFilter<"ChildInventory"> | number | null
    status?: StringNullableWithAggregatesFilter<"ChildInventory"> | string | null
    thumbnail?: StringNullableWithAggregatesFilter<"ChildInventory"> | string | null
    parentId?: StringNullableWithAggregatesFilter<"ChildInventory"> | string | null
    creator?: StringNullableWithAggregatesFilter<"ChildInventory"> | string | null
    editor?: StringNullableWithAggregatesFilter<"ChildInventory"> | string | null
    dateCreated?: DateTimeWithAggregatesFilter<"ChildInventory"> | Date | string
    dateUpdated?: DateTimeNullableWithAggregatesFilter<"ChildInventory"> | Date | string | null
    agentEmail?: StringNullableWithAggregatesFilter<"ChildInventory"> | string | null
  }

  export type Inv_subImageWhereInput = {
    AND?: Inv_subImageWhereInput | Inv_subImageWhereInput[]
    OR?: Inv_subImageWhereInput[]
    NOT?: Inv_subImageWhereInput | Inv_subImageWhereInput[]
    id?: IntFilter<"Inv_subImage"> | number
    subImageRelationParent?: IntNullableFilter<"Inv_subImage"> | number | null
    subImageRelationChild?: IntFilter<"Inv_subImage"> | number
    isVideo?: BoolFilter<"Inv_subImage"> | boolean
    ImagePath?: StringNullableFilter<"Inv_subImage"> | string | null
    ChildField?: XOR<ChildInventoryRelationFilter, ChildInventoryWhereInput>
  }

  export type Inv_subImageOrderByWithRelationInput = {
    id?: SortOrder
    subImageRelationParent?: SortOrderInput | SortOrder
    subImageRelationChild?: SortOrder
    isVideo?: SortOrder
    ImagePath?: SortOrderInput | SortOrder
    ChildField?: ChildInventoryOrderByWithRelationInput
  }

  export type Inv_subImageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: Inv_subImageWhereInput | Inv_subImageWhereInput[]
    OR?: Inv_subImageWhereInput[]
    NOT?: Inv_subImageWhereInput | Inv_subImageWhereInput[]
    subImageRelationParent?: IntNullableFilter<"Inv_subImage"> | number | null
    subImageRelationChild?: IntFilter<"Inv_subImage"> | number
    isVideo?: BoolFilter<"Inv_subImage"> | boolean
    ImagePath?: StringNullableFilter<"Inv_subImage"> | string | null
    ChildField?: XOR<ChildInventoryRelationFilter, ChildInventoryWhereInput>
  }, "id">

  export type Inv_subImageOrderByWithAggregationInput = {
    id?: SortOrder
    subImageRelationParent?: SortOrderInput | SortOrder
    subImageRelationChild?: SortOrder
    isVideo?: SortOrder
    ImagePath?: SortOrderInput | SortOrder
    _count?: Inv_subImageCountOrderByAggregateInput
    _avg?: Inv_subImageAvgOrderByAggregateInput
    _max?: Inv_subImageMaxOrderByAggregateInput
    _min?: Inv_subImageMinOrderByAggregateInput
    _sum?: Inv_subImageSumOrderByAggregateInput
  }

  export type Inv_subImageScalarWhereWithAggregatesInput = {
    AND?: Inv_subImageScalarWhereWithAggregatesInput | Inv_subImageScalarWhereWithAggregatesInput[]
    OR?: Inv_subImageScalarWhereWithAggregatesInput[]
    NOT?: Inv_subImageScalarWhereWithAggregatesInput | Inv_subImageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Inv_subImage"> | number
    subImageRelationParent?: IntNullableWithAggregatesFilter<"Inv_subImage"> | number | null
    subImageRelationChild?: IntWithAggregatesFilter<"Inv_subImage"> | number
    isVideo?: BoolWithAggregatesFilter<"Inv_subImage"> | boolean
    ImagePath?: StringNullableWithAggregatesFilter<"Inv_subImage"> | string | null
  }

  export type AllowedDevicesWhereInput = {
    AND?: AllowedDevicesWhereInput | AllowedDevicesWhereInput[]
    OR?: AllowedDevicesWhereInput[]
    NOT?: AllowedDevicesWhereInput | AllowedDevicesWhereInput[]
    id?: IntFilter<"AllowedDevices"> | number
    macAddress?: StringNullableFilter<"AllowedDevices"> | string | null
  }

  export type AllowedDevicesOrderByWithRelationInput = {
    id?: SortOrder
    macAddress?: SortOrderInput | SortOrder
  }

  export type AllowedDevicesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AllowedDevicesWhereInput | AllowedDevicesWhereInput[]
    OR?: AllowedDevicesWhereInput[]
    NOT?: AllowedDevicesWhereInput | AllowedDevicesWhereInput[]
    macAddress?: StringNullableFilter<"AllowedDevices"> | string | null
  }, "id">

  export type AllowedDevicesOrderByWithAggregationInput = {
    id?: SortOrder
    macAddress?: SortOrderInput | SortOrder
    _count?: AllowedDevicesCountOrderByAggregateInput
    _avg?: AllowedDevicesAvgOrderByAggregateInput
    _max?: AllowedDevicesMaxOrderByAggregateInput
    _min?: AllowedDevicesMinOrderByAggregateInput
    _sum?: AllowedDevicesSumOrderByAggregateInput
  }

  export type AllowedDevicesScalarWhereWithAggregatesInput = {
    AND?: AllowedDevicesScalarWhereWithAggregatesInput | AllowedDevicesScalarWhereWithAggregatesInput[]
    OR?: AllowedDevicesScalarWhereWithAggregatesInput[]
    NOT?: AllowedDevicesScalarWhereWithAggregatesInput | AllowedDevicesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AllowedDevices"> | number
    macAddress?: StringNullableWithAggregatesFilter<"AllowedDevices"> | string | null
  }

  export type NumberOfViewsWhereInput = {
    AND?: NumberOfViewsWhereInput | NumberOfViewsWhereInput[]
    OR?: NumberOfViewsWhereInput[]
    NOT?: NumberOfViewsWhereInput | NumberOfViewsWhereInput[]
    id?: IntFilter<"NumberOfViews"> | number
    count?: StringNullableFilter<"NumberOfViews"> | string | null
    productCode?: StringNullableFilter<"NumberOfViews"> | string | null
    emailAddress?: StringNullableFilter<"NumberOfViews"> | string | null
    IpAddress?: StringNullableFilter<"NumberOfViews"> | string | null
    Country?: StringNullableFilter<"NumberOfViews"> | string | null
    dateVisited?: StringNullableFilter<"NumberOfViews"> | string | null
  }

  export type NumberOfViewsOrderByWithRelationInput = {
    id?: SortOrder
    count?: SortOrderInput | SortOrder
    productCode?: SortOrderInput | SortOrder
    emailAddress?: SortOrderInput | SortOrder
    IpAddress?: SortOrderInput | SortOrder
    Country?: SortOrderInput | SortOrder
    dateVisited?: SortOrderInput | SortOrder
  }

  export type NumberOfViewsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NumberOfViewsWhereInput | NumberOfViewsWhereInput[]
    OR?: NumberOfViewsWhereInput[]
    NOT?: NumberOfViewsWhereInput | NumberOfViewsWhereInput[]
    count?: StringNullableFilter<"NumberOfViews"> | string | null
    productCode?: StringNullableFilter<"NumberOfViews"> | string | null
    emailAddress?: StringNullableFilter<"NumberOfViews"> | string | null
    IpAddress?: StringNullableFilter<"NumberOfViews"> | string | null
    Country?: StringNullableFilter<"NumberOfViews"> | string | null
    dateVisited?: StringNullableFilter<"NumberOfViews"> | string | null
  }, "id">

  export type NumberOfViewsOrderByWithAggregationInput = {
    id?: SortOrder
    count?: SortOrderInput | SortOrder
    productCode?: SortOrderInput | SortOrder
    emailAddress?: SortOrderInput | SortOrder
    IpAddress?: SortOrderInput | SortOrder
    Country?: SortOrderInput | SortOrder
    dateVisited?: SortOrderInput | SortOrder
    _count?: NumberOfViewsCountOrderByAggregateInput
    _avg?: NumberOfViewsAvgOrderByAggregateInput
    _max?: NumberOfViewsMaxOrderByAggregateInput
    _min?: NumberOfViewsMinOrderByAggregateInput
    _sum?: NumberOfViewsSumOrderByAggregateInput
  }

  export type NumberOfViewsScalarWhereWithAggregatesInput = {
    AND?: NumberOfViewsScalarWhereWithAggregatesInput | NumberOfViewsScalarWhereWithAggregatesInput[]
    OR?: NumberOfViewsScalarWhereWithAggregatesInput[]
    NOT?: NumberOfViewsScalarWhereWithAggregatesInput | NumberOfViewsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"NumberOfViews"> | number
    count?: StringNullableWithAggregatesFilter<"NumberOfViews"> | string | null
    productCode?: StringNullableWithAggregatesFilter<"NumberOfViews"> | string | null
    emailAddress?: StringNullableWithAggregatesFilter<"NumberOfViews"> | string | null
    IpAddress?: StringNullableWithAggregatesFilter<"NumberOfViews"> | string | null
    Country?: StringNullableWithAggregatesFilter<"NumberOfViews"> | string | null
    dateVisited?: StringNullableWithAggregatesFilter<"NumberOfViews"> | string | null
  }

  export type WebsiteVisitsWhereInput = {
    AND?: WebsiteVisitsWhereInput | WebsiteVisitsWhereInput[]
    OR?: WebsiteVisitsWhereInput[]
    NOT?: WebsiteVisitsWhereInput | WebsiteVisitsWhereInput[]
    id?: IntFilter<"WebsiteVisits"> | number
    IpAddress?: StringFilter<"WebsiteVisits"> | string
    Country?: StringFilter<"WebsiteVisits"> | string
    dateVisited?: StringFilter<"WebsiteVisits"> | string
  }

  export type WebsiteVisitsOrderByWithRelationInput = {
    id?: SortOrder
    IpAddress?: SortOrder
    Country?: SortOrder
    dateVisited?: SortOrder
  }

  export type WebsiteVisitsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WebsiteVisitsWhereInput | WebsiteVisitsWhereInput[]
    OR?: WebsiteVisitsWhereInput[]
    NOT?: WebsiteVisitsWhereInput | WebsiteVisitsWhereInput[]
    IpAddress?: StringFilter<"WebsiteVisits"> | string
    Country?: StringFilter<"WebsiteVisits"> | string
    dateVisited?: StringFilter<"WebsiteVisits"> | string
  }, "id">

  export type WebsiteVisitsOrderByWithAggregationInput = {
    id?: SortOrder
    IpAddress?: SortOrder
    Country?: SortOrder
    dateVisited?: SortOrder
    _count?: WebsiteVisitsCountOrderByAggregateInput
    _avg?: WebsiteVisitsAvgOrderByAggregateInput
    _max?: WebsiteVisitsMaxOrderByAggregateInput
    _min?: WebsiteVisitsMinOrderByAggregateInput
    _sum?: WebsiteVisitsSumOrderByAggregateInput
  }

  export type WebsiteVisitsScalarWhereWithAggregatesInput = {
    AND?: WebsiteVisitsScalarWhereWithAggregatesInput | WebsiteVisitsScalarWhereWithAggregatesInput[]
    OR?: WebsiteVisitsScalarWhereWithAggregatesInput[]
    NOT?: WebsiteVisitsScalarWhereWithAggregatesInput | WebsiteVisitsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WebsiteVisits"> | number
    IpAddress?: StringWithAggregatesFilter<"WebsiteVisits"> | string
    Country?: StringWithAggregatesFilter<"WebsiteVisits"> | string
    dateVisited?: StringWithAggregatesFilter<"WebsiteVisits"> | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    accountCode?: string | null
    password?: string | null
    accountLevel?: string | null
    loginAttemp?: string | null
    macAddress?: string | null
    agentIdentity?: string | null
    image?: string | null
    nameOfStore?: string | null
    dateCreated?: Date | string
    dateUpdated?: Date | string | null
    accountDetails?: AccountDetailsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    accountCode?: string | null
    password?: string | null
    accountLevel?: string | null
    loginAttemp?: string | null
    macAddress?: string | null
    agentIdentity?: string | null
    image?: string | null
    nameOfStore?: string | null
    dateCreated?: Date | string
    dateUpdated?: Date | string | null
    accountDetails?: AccountDetailsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    accountCode?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accountLevel?: NullableStringFieldUpdateOperationsInput | string | null
    loginAttemp?: NullableStringFieldUpdateOperationsInput | string | null
    macAddress?: NullableStringFieldUpdateOperationsInput | string | null
    agentIdentity?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    nameOfStore?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    dateUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accountDetails?: AccountDetailsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    accountCode?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accountLevel?: NullableStringFieldUpdateOperationsInput | string | null
    loginAttemp?: NullableStringFieldUpdateOperationsInput | string | null
    macAddress?: NullableStringFieldUpdateOperationsInput | string | null
    agentIdentity?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    nameOfStore?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    dateUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accountDetails?: AccountDetailsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    accountCode?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accountLevel?: NullableStringFieldUpdateOperationsInput | string | null
    loginAttemp?: NullableStringFieldUpdateOperationsInput | string | null
    macAddress?: NullableStringFieldUpdateOperationsInput | string | null
    agentIdentity?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    nameOfStore?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    dateUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    accountCode?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accountLevel?: NullableStringFieldUpdateOperationsInput | string | null
    loginAttemp?: NullableStringFieldUpdateOperationsInput | string | null
    macAddress?: NullableStringFieldUpdateOperationsInput | string | null
    agentIdentity?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    nameOfStore?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    dateUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CrowdMessagesCreateInput = {
    id?: string
    Messages?: string | null
    Sender?: string | null
    dateSent?: Date | string
  }

  export type CrowdMessagesUncheckedCreateInput = {
    id?: string
    Messages?: string | null
    Sender?: string | null
    dateSent?: Date | string
  }

  export type CrowdMessagesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Messages?: NullableStringFieldUpdateOperationsInput | string | null
    Sender?: NullableStringFieldUpdateOperationsInput | string | null
    dateSent?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CrowdMessagesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Messages?: NullableStringFieldUpdateOperationsInput | string | null
    Sender?: NullableStringFieldUpdateOperationsInput | string | null
    dateSent?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CrowdMessagesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    Messages?: NullableStringFieldUpdateOperationsInput | string | null
    Sender?: NullableStringFieldUpdateOperationsInput | string | null
    dateSent?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CrowdMessagesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    Messages?: NullableStringFieldUpdateOperationsInput | string | null
    Sender?: NullableStringFieldUpdateOperationsInput | string | null
    dateSent?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountDetailsCreateInput = {
    fullname?: string | null
    storeName?: string | null
    contactNo?: string | null
    Address?: string | null
    accountEmail: string
    User: UserCreateNestedOneWithoutAccountDetailsInput
  }

  export type AccountDetailsUncheckedCreateInput = {
    id?: number
    userId: string
    fullname?: string | null
    storeName?: string | null
    contactNo?: string | null
    Address?: string | null
    accountEmail: string
  }

  export type AccountDetailsUpdateInput = {
    fullname?: NullableStringFieldUpdateOperationsInput | string | null
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    contactNo?: NullableStringFieldUpdateOperationsInput | string | null
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    accountEmail?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutAccountDetailsNestedInput
  }

  export type AccountDetailsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    fullname?: NullableStringFieldUpdateOperationsInput | string | null
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    contactNo?: NullableStringFieldUpdateOperationsInput | string | null
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    accountEmail?: StringFieldUpdateOperationsInput | string
  }

  export type AccountDetailsUpdateManyMutationInput = {
    fullname?: NullableStringFieldUpdateOperationsInput | string | null
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    contactNo?: NullableStringFieldUpdateOperationsInput | string | null
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    accountEmail?: StringFieldUpdateOperationsInput | string
  }

  export type AccountDetailsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    fullname?: NullableStringFieldUpdateOperationsInput | string | null
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    contactNo?: NullableStringFieldUpdateOperationsInput | string | null
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    accountEmail?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryCreateInput = {
    Name?: string | null
    status?: string | null
    icon?: string | null
    image?: string | null
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    Name?: string | null
    status?: string | null
    icon?: string | null
    image?: string | null
  }

  export type CategoryUpdateInput = {
    Name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryUpdateManyMutationInput = {
    Name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductTypesCreateInput = {
    Category?: string | null
    Name?: string | null
  }

  export type ProductTypesUncheckedCreateInput = {
    id?: number
    Category?: string | null
    Name?: string | null
  }

  export type ProductTypesUpdateInput = {
    Category?: NullableStringFieldUpdateOperationsInput | string | null
    Name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductTypesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Category?: NullableStringFieldUpdateOperationsInput | string | null
    Name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductTypesUpdateManyMutationInput = {
    Category?: NullableStringFieldUpdateOperationsInput | string | null
    Name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductTypesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Category?: NullableStringFieldUpdateOperationsInput | string | null
    Name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BrandnameCreateInput = {
    ProductType?: string | null
    Name?: string | null
  }

  export type BrandnameUncheckedCreateInput = {
    id?: number
    ProductType?: string | null
    Name?: string | null
  }

  export type BrandnameUpdateInput = {
    ProductType?: NullableStringFieldUpdateOperationsInput | string | null
    Name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BrandnameUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ProductType?: NullableStringFieldUpdateOperationsInput | string | null
    Name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BrandnameUpdateManyMutationInput = {
    ProductType?: NullableStringFieldUpdateOperationsInput | string | null
    Name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BrandnameUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ProductType?: NullableStringFieldUpdateOperationsInput | string | null
    Name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InventoryCreateInput = {
    styleCode?: string
    productType?: string | null
    category?: string | null
    name?: string | null
    status?: string | null
    dateCreated?: Date | string
    dateUpdated?: Date | string | null
    agentEmail?: string | null
    brandname?: string | null
    collectionItem?: boolean | null
    childInventory?: ChildInventoryCreateNestedManyWithoutChildInventoryFieldInput
  }

  export type InventoryUncheckedCreateInput = {
    id?: number
    styleCode?: string
    productType?: string | null
    category?: string | null
    name?: string | null
    status?: string | null
    dateCreated?: Date | string
    dateUpdated?: Date | string | null
    agentEmail?: string | null
    brandname?: string | null
    collectionItem?: boolean | null
    childInventory?: ChildInventoryUncheckedCreateNestedManyWithoutChildInventoryFieldInput
  }

  export type InventoryUpdateInput = {
    styleCode?: StringFieldUpdateOperationsInput | string
    productType?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    dateUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    brandname?: NullableStringFieldUpdateOperationsInput | string | null
    collectionItem?: NullableBoolFieldUpdateOperationsInput | boolean | null
    childInventory?: ChildInventoryUpdateManyWithoutChildInventoryFieldNestedInput
  }

  export type InventoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    styleCode?: StringFieldUpdateOperationsInput | string
    productType?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    dateUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    brandname?: NullableStringFieldUpdateOperationsInput | string | null
    collectionItem?: NullableBoolFieldUpdateOperationsInput | boolean | null
    childInventory?: ChildInventoryUncheckedUpdateManyWithoutChildInventoryFieldNestedInput
  }

  export type InventoryUpdateManyMutationInput = {
    styleCode?: StringFieldUpdateOperationsInput | string
    productType?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    dateUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    brandname?: NullableStringFieldUpdateOperationsInput | string | null
    collectionItem?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type InventoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    styleCode?: StringFieldUpdateOperationsInput | string
    productType?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    dateUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    brandname?: NullableStringFieldUpdateOperationsInput | string | null
    collectionItem?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ChildInventoryCreateInput = {
    productCode?: string | null
    category?: string | null
    productType?: string | null
    imageReferences?: string | null
    model?: string | null
    name?: string | null
    color?: string | null
    size?: string | null
    price?: number | null
    stock?: number | null
    status?: string | null
    thumbnail?: string | null
    parentId?: string | null
    creator?: string | null
    editor?: string | null
    dateCreated?: Date | string
    dateUpdated?: Date | string | null
    agentEmail?: string | null
    subImageFieldOut?: Inv_subImageCreateNestedManyWithoutChildFieldInput
    childInventoryField?: InventoryCreateNestedOneWithoutChildInventoryInput
  }

  export type ChildInventoryUncheckedCreateInput = {
    id?: number
    productCode?: string | null
    category?: string | null
    productType?: string | null
    imageReferences?: string | null
    model?: string | null
    style_Code?: string | null
    name?: string | null
    color?: string | null
    size?: string | null
    price?: number | null
    stock?: number | null
    status?: string | null
    thumbnail?: string | null
    parentId?: string | null
    creator?: string | null
    editor?: string | null
    dateCreated?: Date | string
    dateUpdated?: Date | string | null
    agentEmail?: string | null
    subImageFieldOut?: Inv_subImageUncheckedCreateNestedManyWithoutChildFieldInput
  }

  export type ChildInventoryUpdateInput = {
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    productType?: NullableStringFieldUpdateOperationsInput | string | null
    imageReferences?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    editor?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    dateUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    subImageFieldOut?: Inv_subImageUpdateManyWithoutChildFieldNestedInput
    childInventoryField?: InventoryUpdateOneWithoutChildInventoryNestedInput
  }

  export type ChildInventoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    productType?: NullableStringFieldUpdateOperationsInput | string | null
    imageReferences?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    style_Code?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    editor?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    dateUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    subImageFieldOut?: Inv_subImageUncheckedUpdateManyWithoutChildFieldNestedInput
  }

  export type ChildInventoryUpdateManyMutationInput = {
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    productType?: NullableStringFieldUpdateOperationsInput | string | null
    imageReferences?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    editor?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    dateUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agentEmail?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChildInventoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    productType?: NullableStringFieldUpdateOperationsInput | string | null
    imageReferences?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    style_Code?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    editor?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    dateUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agentEmail?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Inv_subImageCreateInput = {
    subImageRelationParent?: number | null
    isVideo?: boolean
    ImagePath?: string | null
    ChildField: ChildInventoryCreateNestedOneWithoutSubImageFieldOutInput
  }

  export type Inv_subImageUncheckedCreateInput = {
    id?: number
    subImageRelationParent?: number | null
    subImageRelationChild: number
    isVideo?: boolean
    ImagePath?: string | null
  }

  export type Inv_subImageUpdateInput = {
    subImageRelationParent?: NullableIntFieldUpdateOperationsInput | number | null
    isVideo?: BoolFieldUpdateOperationsInput | boolean
    ImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    ChildField?: ChildInventoryUpdateOneRequiredWithoutSubImageFieldOutNestedInput
  }

  export type Inv_subImageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    subImageRelationParent?: NullableIntFieldUpdateOperationsInput | number | null
    subImageRelationChild?: IntFieldUpdateOperationsInput | number
    isVideo?: BoolFieldUpdateOperationsInput | boolean
    ImagePath?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Inv_subImageUpdateManyMutationInput = {
    subImageRelationParent?: NullableIntFieldUpdateOperationsInput | number | null
    isVideo?: BoolFieldUpdateOperationsInput | boolean
    ImagePath?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Inv_subImageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    subImageRelationParent?: NullableIntFieldUpdateOperationsInput | number | null
    subImageRelationChild?: IntFieldUpdateOperationsInput | number
    isVideo?: BoolFieldUpdateOperationsInput | boolean
    ImagePath?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AllowedDevicesCreateInput = {
    macAddress?: string | null
  }

  export type AllowedDevicesUncheckedCreateInput = {
    id?: number
    macAddress?: string | null
  }

  export type AllowedDevicesUpdateInput = {
    macAddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AllowedDevicesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    macAddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AllowedDevicesUpdateManyMutationInput = {
    macAddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AllowedDevicesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    macAddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NumberOfViewsCreateInput = {
    count?: string | null
    productCode?: string | null
    emailAddress?: string | null
    IpAddress?: string | null
    Country?: string | null
    dateVisited?: string | null
  }

  export type NumberOfViewsUncheckedCreateInput = {
    id?: number
    count?: string | null
    productCode?: string | null
    emailAddress?: string | null
    IpAddress?: string | null
    Country?: string | null
    dateVisited?: string | null
  }

  export type NumberOfViewsUpdateInput = {
    count?: NullableStringFieldUpdateOperationsInput | string | null
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    IpAddress?: NullableStringFieldUpdateOperationsInput | string | null
    Country?: NullableStringFieldUpdateOperationsInput | string | null
    dateVisited?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NumberOfViewsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    count?: NullableStringFieldUpdateOperationsInput | string | null
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    IpAddress?: NullableStringFieldUpdateOperationsInput | string | null
    Country?: NullableStringFieldUpdateOperationsInput | string | null
    dateVisited?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NumberOfViewsUpdateManyMutationInput = {
    count?: NullableStringFieldUpdateOperationsInput | string | null
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    IpAddress?: NullableStringFieldUpdateOperationsInput | string | null
    Country?: NullableStringFieldUpdateOperationsInput | string | null
    dateVisited?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NumberOfViewsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    count?: NullableStringFieldUpdateOperationsInput | string | null
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    IpAddress?: NullableStringFieldUpdateOperationsInput | string | null
    Country?: NullableStringFieldUpdateOperationsInput | string | null
    dateVisited?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WebsiteVisitsCreateInput = {
    IpAddress: string
    Country: string
    dateVisited: string
  }

  export type WebsiteVisitsUncheckedCreateInput = {
    id?: number
    IpAddress: string
    Country: string
    dateVisited: string
  }

  export type WebsiteVisitsUpdateInput = {
    IpAddress?: StringFieldUpdateOperationsInput | string
    Country?: StringFieldUpdateOperationsInput | string
    dateVisited?: StringFieldUpdateOperationsInput | string
  }

  export type WebsiteVisitsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    IpAddress?: StringFieldUpdateOperationsInput | string
    Country?: StringFieldUpdateOperationsInput | string
    dateVisited?: StringFieldUpdateOperationsInput | string
  }

  export type WebsiteVisitsUpdateManyMutationInput = {
    IpAddress?: StringFieldUpdateOperationsInput | string
    Country?: StringFieldUpdateOperationsInput | string
    dateVisited?: StringFieldUpdateOperationsInput | string
  }

  export type WebsiteVisitsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    IpAddress?: StringFieldUpdateOperationsInput | string
    Country?: StringFieldUpdateOperationsInput | string
    dateVisited?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type AccountDetailsListRelationFilter = {
    every?: AccountDetailsWhereInput
    some?: AccountDetailsWhereInput
    none?: AccountDetailsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccountDetailsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    accountCode?: SortOrder
    password?: SortOrder
    accountLevel?: SortOrder
    loginAttemp?: SortOrder
    macAddress?: SortOrder
    agentIdentity?: SortOrder
    image?: SortOrder
    nameOfStore?: SortOrder
    dateCreated?: SortOrder
    dateUpdated?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    accountCode?: SortOrder
    password?: SortOrder
    accountLevel?: SortOrder
    loginAttemp?: SortOrder
    macAddress?: SortOrder
    agentIdentity?: SortOrder
    image?: SortOrder
    nameOfStore?: SortOrder
    dateCreated?: SortOrder
    dateUpdated?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    accountCode?: SortOrder
    password?: SortOrder
    accountLevel?: SortOrder
    loginAttemp?: SortOrder
    macAddress?: SortOrder
    agentIdentity?: SortOrder
    image?: SortOrder
    nameOfStore?: SortOrder
    dateCreated?: SortOrder
    dateUpdated?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type CrowdMessagesCountOrderByAggregateInput = {
    id?: SortOrder
    Messages?: SortOrder
    Sender?: SortOrder
    dateSent?: SortOrder
  }

  export type CrowdMessagesMaxOrderByAggregateInput = {
    id?: SortOrder
    Messages?: SortOrder
    Sender?: SortOrder
    dateSent?: SortOrder
  }

  export type CrowdMessagesMinOrderByAggregateInput = {
    id?: SortOrder
    Messages?: SortOrder
    Sender?: SortOrder
    dateSent?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AccountDetailsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fullname?: SortOrder
    storeName?: SortOrder
    contactNo?: SortOrder
    Address?: SortOrder
    accountEmail?: SortOrder
  }

  export type AccountDetailsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AccountDetailsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fullname?: SortOrder
    storeName?: SortOrder
    contactNo?: SortOrder
    Address?: SortOrder
    accountEmail?: SortOrder
  }

  export type AccountDetailsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fullname?: SortOrder
    storeName?: SortOrder
    contactNo?: SortOrder
    Address?: SortOrder
    accountEmail?: SortOrder
  }

  export type AccountDetailsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    Name?: SortOrder
    status?: SortOrder
    icon?: SortOrder
    image?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    Name?: SortOrder
    status?: SortOrder
    icon?: SortOrder
    image?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    Name?: SortOrder
    status?: SortOrder
    icon?: SortOrder
    image?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProductTypesCountOrderByAggregateInput = {
    id?: SortOrder
    Category?: SortOrder
    Name?: SortOrder
  }

  export type ProductTypesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProductTypesMaxOrderByAggregateInput = {
    id?: SortOrder
    Category?: SortOrder
    Name?: SortOrder
  }

  export type ProductTypesMinOrderByAggregateInput = {
    id?: SortOrder
    Category?: SortOrder
    Name?: SortOrder
  }

  export type ProductTypesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BrandnameCountOrderByAggregateInput = {
    id?: SortOrder
    ProductType?: SortOrder
    Name?: SortOrder
  }

  export type BrandnameAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BrandnameMaxOrderByAggregateInput = {
    id?: SortOrder
    ProductType?: SortOrder
    Name?: SortOrder
  }

  export type BrandnameMinOrderByAggregateInput = {
    id?: SortOrder
    ProductType?: SortOrder
    Name?: SortOrder
  }

  export type BrandnameSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type ChildInventoryListRelationFilter = {
    every?: ChildInventoryWhereInput
    some?: ChildInventoryWhereInput
    none?: ChildInventoryWhereInput
  }

  export type ChildInventoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InventoryCountOrderByAggregateInput = {
    id?: SortOrder
    styleCode?: SortOrder
    productType?: SortOrder
    category?: SortOrder
    name?: SortOrder
    status?: SortOrder
    dateCreated?: SortOrder
    dateUpdated?: SortOrder
    agentEmail?: SortOrder
    brandname?: SortOrder
    collectionItem?: SortOrder
  }

  export type InventoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type InventoryMaxOrderByAggregateInput = {
    id?: SortOrder
    styleCode?: SortOrder
    productType?: SortOrder
    category?: SortOrder
    name?: SortOrder
    status?: SortOrder
    dateCreated?: SortOrder
    dateUpdated?: SortOrder
    agentEmail?: SortOrder
    brandname?: SortOrder
    collectionItem?: SortOrder
  }

  export type InventoryMinOrderByAggregateInput = {
    id?: SortOrder
    styleCode?: SortOrder
    productType?: SortOrder
    category?: SortOrder
    name?: SortOrder
    status?: SortOrder
    dateCreated?: SortOrder
    dateUpdated?: SortOrder
    agentEmail?: SortOrder
    brandname?: SortOrder
    collectionItem?: SortOrder
  }

  export type InventorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type Inv_subImageListRelationFilter = {
    every?: Inv_subImageWhereInput
    some?: Inv_subImageWhereInput
    none?: Inv_subImageWhereInput
  }

  export type InventoryNullableRelationFilter = {
    is?: InventoryWhereInput | null
    isNot?: InventoryWhereInput | null
  }

  export type Inv_subImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChildInventoryCountOrderByAggregateInput = {
    id?: SortOrder
    productCode?: SortOrder
    category?: SortOrder
    productType?: SortOrder
    imageReferences?: SortOrder
    model?: SortOrder
    style_Code?: SortOrder
    name?: SortOrder
    color?: SortOrder
    size?: SortOrder
    price?: SortOrder
    stock?: SortOrder
    status?: SortOrder
    thumbnail?: SortOrder
    parentId?: SortOrder
    creator?: SortOrder
    editor?: SortOrder
    dateCreated?: SortOrder
    dateUpdated?: SortOrder
    agentEmail?: SortOrder
  }

  export type ChildInventoryAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    stock?: SortOrder
  }

  export type ChildInventoryMaxOrderByAggregateInput = {
    id?: SortOrder
    productCode?: SortOrder
    category?: SortOrder
    productType?: SortOrder
    imageReferences?: SortOrder
    model?: SortOrder
    style_Code?: SortOrder
    name?: SortOrder
    color?: SortOrder
    size?: SortOrder
    price?: SortOrder
    stock?: SortOrder
    status?: SortOrder
    thumbnail?: SortOrder
    parentId?: SortOrder
    creator?: SortOrder
    editor?: SortOrder
    dateCreated?: SortOrder
    dateUpdated?: SortOrder
    agentEmail?: SortOrder
  }

  export type ChildInventoryMinOrderByAggregateInput = {
    id?: SortOrder
    productCode?: SortOrder
    category?: SortOrder
    productType?: SortOrder
    imageReferences?: SortOrder
    model?: SortOrder
    style_Code?: SortOrder
    name?: SortOrder
    color?: SortOrder
    size?: SortOrder
    price?: SortOrder
    stock?: SortOrder
    status?: SortOrder
    thumbnail?: SortOrder
    parentId?: SortOrder
    creator?: SortOrder
    editor?: SortOrder
    dateCreated?: SortOrder
    dateUpdated?: SortOrder
    agentEmail?: SortOrder
  }

  export type ChildInventorySumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    stock?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ChildInventoryRelationFilter = {
    is?: ChildInventoryWhereInput
    isNot?: ChildInventoryWhereInput
  }

  export type Inv_subImageCountOrderByAggregateInput = {
    id?: SortOrder
    subImageRelationParent?: SortOrder
    subImageRelationChild?: SortOrder
    isVideo?: SortOrder
    ImagePath?: SortOrder
  }

  export type Inv_subImageAvgOrderByAggregateInput = {
    id?: SortOrder
    subImageRelationParent?: SortOrder
    subImageRelationChild?: SortOrder
  }

  export type Inv_subImageMaxOrderByAggregateInput = {
    id?: SortOrder
    subImageRelationParent?: SortOrder
    subImageRelationChild?: SortOrder
    isVideo?: SortOrder
    ImagePath?: SortOrder
  }

  export type Inv_subImageMinOrderByAggregateInput = {
    id?: SortOrder
    subImageRelationParent?: SortOrder
    subImageRelationChild?: SortOrder
    isVideo?: SortOrder
    ImagePath?: SortOrder
  }

  export type Inv_subImageSumOrderByAggregateInput = {
    id?: SortOrder
    subImageRelationParent?: SortOrder
    subImageRelationChild?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type AllowedDevicesCountOrderByAggregateInput = {
    id?: SortOrder
    macAddress?: SortOrder
  }

  export type AllowedDevicesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AllowedDevicesMaxOrderByAggregateInput = {
    id?: SortOrder
    macAddress?: SortOrder
  }

  export type AllowedDevicesMinOrderByAggregateInput = {
    id?: SortOrder
    macAddress?: SortOrder
  }

  export type AllowedDevicesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NumberOfViewsCountOrderByAggregateInput = {
    id?: SortOrder
    count?: SortOrder
    productCode?: SortOrder
    emailAddress?: SortOrder
    IpAddress?: SortOrder
    Country?: SortOrder
    dateVisited?: SortOrder
  }

  export type NumberOfViewsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NumberOfViewsMaxOrderByAggregateInput = {
    id?: SortOrder
    count?: SortOrder
    productCode?: SortOrder
    emailAddress?: SortOrder
    IpAddress?: SortOrder
    Country?: SortOrder
    dateVisited?: SortOrder
  }

  export type NumberOfViewsMinOrderByAggregateInput = {
    id?: SortOrder
    count?: SortOrder
    productCode?: SortOrder
    emailAddress?: SortOrder
    IpAddress?: SortOrder
    Country?: SortOrder
    dateVisited?: SortOrder
  }

  export type NumberOfViewsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type WebsiteVisitsCountOrderByAggregateInput = {
    id?: SortOrder
    IpAddress?: SortOrder
    Country?: SortOrder
    dateVisited?: SortOrder
  }

  export type WebsiteVisitsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type WebsiteVisitsMaxOrderByAggregateInput = {
    id?: SortOrder
    IpAddress?: SortOrder
    Country?: SortOrder
    dateVisited?: SortOrder
  }

  export type WebsiteVisitsMinOrderByAggregateInput = {
    id?: SortOrder
    IpAddress?: SortOrder
    Country?: SortOrder
    dateVisited?: SortOrder
  }

  export type WebsiteVisitsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AccountDetailsCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountDetailsCreateWithoutUserInput, AccountDetailsUncheckedCreateWithoutUserInput> | AccountDetailsCreateWithoutUserInput[] | AccountDetailsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountDetailsCreateOrConnectWithoutUserInput | AccountDetailsCreateOrConnectWithoutUserInput[]
    connect?: AccountDetailsWhereUniqueInput | AccountDetailsWhereUniqueInput[]
  }

  export type AccountDetailsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountDetailsCreateWithoutUserInput, AccountDetailsUncheckedCreateWithoutUserInput> | AccountDetailsCreateWithoutUserInput[] | AccountDetailsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountDetailsCreateOrConnectWithoutUserInput | AccountDetailsCreateOrConnectWithoutUserInput[]
    connect?: AccountDetailsWhereUniqueInput | AccountDetailsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type AccountDetailsUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountDetailsCreateWithoutUserInput, AccountDetailsUncheckedCreateWithoutUserInput> | AccountDetailsCreateWithoutUserInput[] | AccountDetailsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountDetailsCreateOrConnectWithoutUserInput | AccountDetailsCreateOrConnectWithoutUserInput[]
    upsert?: AccountDetailsUpsertWithWhereUniqueWithoutUserInput | AccountDetailsUpsertWithWhereUniqueWithoutUserInput[]
    set?: AccountDetailsWhereUniqueInput | AccountDetailsWhereUniqueInput[]
    disconnect?: AccountDetailsWhereUniqueInput | AccountDetailsWhereUniqueInput[]
    delete?: AccountDetailsWhereUniqueInput | AccountDetailsWhereUniqueInput[]
    connect?: AccountDetailsWhereUniqueInput | AccountDetailsWhereUniqueInput[]
    update?: AccountDetailsUpdateWithWhereUniqueWithoutUserInput | AccountDetailsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountDetailsUpdateManyWithWhereWithoutUserInput | AccountDetailsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountDetailsScalarWhereInput | AccountDetailsScalarWhereInput[]
  }

  export type AccountDetailsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountDetailsCreateWithoutUserInput, AccountDetailsUncheckedCreateWithoutUserInput> | AccountDetailsCreateWithoutUserInput[] | AccountDetailsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountDetailsCreateOrConnectWithoutUserInput | AccountDetailsCreateOrConnectWithoutUserInput[]
    upsert?: AccountDetailsUpsertWithWhereUniqueWithoutUserInput | AccountDetailsUpsertWithWhereUniqueWithoutUserInput[]
    set?: AccountDetailsWhereUniqueInput | AccountDetailsWhereUniqueInput[]
    disconnect?: AccountDetailsWhereUniqueInput | AccountDetailsWhereUniqueInput[]
    delete?: AccountDetailsWhereUniqueInput | AccountDetailsWhereUniqueInput[]
    connect?: AccountDetailsWhereUniqueInput | AccountDetailsWhereUniqueInput[]
    update?: AccountDetailsUpdateWithWhereUniqueWithoutUserInput | AccountDetailsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountDetailsUpdateManyWithWhereWithoutUserInput | AccountDetailsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountDetailsScalarWhereInput | AccountDetailsScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAccountDetailsInput = {
    create?: XOR<UserCreateWithoutAccountDetailsInput, UserUncheckedCreateWithoutAccountDetailsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountDetailsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAccountDetailsNestedInput = {
    create?: XOR<UserCreateWithoutAccountDetailsInput, UserUncheckedCreateWithoutAccountDetailsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountDetailsInput
    upsert?: UserUpsertWithoutAccountDetailsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountDetailsInput, UserUpdateWithoutAccountDetailsInput>, UserUncheckedUpdateWithoutAccountDetailsInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ChildInventoryCreateNestedManyWithoutChildInventoryFieldInput = {
    create?: XOR<ChildInventoryCreateWithoutChildInventoryFieldInput, ChildInventoryUncheckedCreateWithoutChildInventoryFieldInput> | ChildInventoryCreateWithoutChildInventoryFieldInput[] | ChildInventoryUncheckedCreateWithoutChildInventoryFieldInput[]
    connectOrCreate?: ChildInventoryCreateOrConnectWithoutChildInventoryFieldInput | ChildInventoryCreateOrConnectWithoutChildInventoryFieldInput[]
    connect?: ChildInventoryWhereUniqueInput | ChildInventoryWhereUniqueInput[]
  }

  export type ChildInventoryUncheckedCreateNestedManyWithoutChildInventoryFieldInput = {
    create?: XOR<ChildInventoryCreateWithoutChildInventoryFieldInput, ChildInventoryUncheckedCreateWithoutChildInventoryFieldInput> | ChildInventoryCreateWithoutChildInventoryFieldInput[] | ChildInventoryUncheckedCreateWithoutChildInventoryFieldInput[]
    connectOrCreate?: ChildInventoryCreateOrConnectWithoutChildInventoryFieldInput | ChildInventoryCreateOrConnectWithoutChildInventoryFieldInput[]
    connect?: ChildInventoryWhereUniqueInput | ChildInventoryWhereUniqueInput[]
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type ChildInventoryUpdateManyWithoutChildInventoryFieldNestedInput = {
    create?: XOR<ChildInventoryCreateWithoutChildInventoryFieldInput, ChildInventoryUncheckedCreateWithoutChildInventoryFieldInput> | ChildInventoryCreateWithoutChildInventoryFieldInput[] | ChildInventoryUncheckedCreateWithoutChildInventoryFieldInput[]
    connectOrCreate?: ChildInventoryCreateOrConnectWithoutChildInventoryFieldInput | ChildInventoryCreateOrConnectWithoutChildInventoryFieldInput[]
    upsert?: ChildInventoryUpsertWithWhereUniqueWithoutChildInventoryFieldInput | ChildInventoryUpsertWithWhereUniqueWithoutChildInventoryFieldInput[]
    set?: ChildInventoryWhereUniqueInput | ChildInventoryWhereUniqueInput[]
    disconnect?: ChildInventoryWhereUniqueInput | ChildInventoryWhereUniqueInput[]
    delete?: ChildInventoryWhereUniqueInput | ChildInventoryWhereUniqueInput[]
    connect?: ChildInventoryWhereUniqueInput | ChildInventoryWhereUniqueInput[]
    update?: ChildInventoryUpdateWithWhereUniqueWithoutChildInventoryFieldInput | ChildInventoryUpdateWithWhereUniqueWithoutChildInventoryFieldInput[]
    updateMany?: ChildInventoryUpdateManyWithWhereWithoutChildInventoryFieldInput | ChildInventoryUpdateManyWithWhereWithoutChildInventoryFieldInput[]
    deleteMany?: ChildInventoryScalarWhereInput | ChildInventoryScalarWhereInput[]
  }

  export type ChildInventoryUncheckedUpdateManyWithoutChildInventoryFieldNestedInput = {
    create?: XOR<ChildInventoryCreateWithoutChildInventoryFieldInput, ChildInventoryUncheckedCreateWithoutChildInventoryFieldInput> | ChildInventoryCreateWithoutChildInventoryFieldInput[] | ChildInventoryUncheckedCreateWithoutChildInventoryFieldInput[]
    connectOrCreate?: ChildInventoryCreateOrConnectWithoutChildInventoryFieldInput | ChildInventoryCreateOrConnectWithoutChildInventoryFieldInput[]
    upsert?: ChildInventoryUpsertWithWhereUniqueWithoutChildInventoryFieldInput | ChildInventoryUpsertWithWhereUniqueWithoutChildInventoryFieldInput[]
    set?: ChildInventoryWhereUniqueInput | ChildInventoryWhereUniqueInput[]
    disconnect?: ChildInventoryWhereUniqueInput | ChildInventoryWhereUniqueInput[]
    delete?: ChildInventoryWhereUniqueInput | ChildInventoryWhereUniqueInput[]
    connect?: ChildInventoryWhereUniqueInput | ChildInventoryWhereUniqueInput[]
    update?: ChildInventoryUpdateWithWhereUniqueWithoutChildInventoryFieldInput | ChildInventoryUpdateWithWhereUniqueWithoutChildInventoryFieldInput[]
    updateMany?: ChildInventoryUpdateManyWithWhereWithoutChildInventoryFieldInput | ChildInventoryUpdateManyWithWhereWithoutChildInventoryFieldInput[]
    deleteMany?: ChildInventoryScalarWhereInput | ChildInventoryScalarWhereInput[]
  }

  export type Inv_subImageCreateNestedManyWithoutChildFieldInput = {
    create?: XOR<Inv_subImageCreateWithoutChildFieldInput, Inv_subImageUncheckedCreateWithoutChildFieldInput> | Inv_subImageCreateWithoutChildFieldInput[] | Inv_subImageUncheckedCreateWithoutChildFieldInput[]
    connectOrCreate?: Inv_subImageCreateOrConnectWithoutChildFieldInput | Inv_subImageCreateOrConnectWithoutChildFieldInput[]
    connect?: Inv_subImageWhereUniqueInput | Inv_subImageWhereUniqueInput[]
  }

  export type InventoryCreateNestedOneWithoutChildInventoryInput = {
    create?: XOR<InventoryCreateWithoutChildInventoryInput, InventoryUncheckedCreateWithoutChildInventoryInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutChildInventoryInput
    connect?: InventoryWhereUniqueInput
  }

  export type Inv_subImageUncheckedCreateNestedManyWithoutChildFieldInput = {
    create?: XOR<Inv_subImageCreateWithoutChildFieldInput, Inv_subImageUncheckedCreateWithoutChildFieldInput> | Inv_subImageCreateWithoutChildFieldInput[] | Inv_subImageUncheckedCreateWithoutChildFieldInput[]
    connectOrCreate?: Inv_subImageCreateOrConnectWithoutChildFieldInput | Inv_subImageCreateOrConnectWithoutChildFieldInput[]
    connect?: Inv_subImageWhereUniqueInput | Inv_subImageWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type Inv_subImageUpdateManyWithoutChildFieldNestedInput = {
    create?: XOR<Inv_subImageCreateWithoutChildFieldInput, Inv_subImageUncheckedCreateWithoutChildFieldInput> | Inv_subImageCreateWithoutChildFieldInput[] | Inv_subImageUncheckedCreateWithoutChildFieldInput[]
    connectOrCreate?: Inv_subImageCreateOrConnectWithoutChildFieldInput | Inv_subImageCreateOrConnectWithoutChildFieldInput[]
    upsert?: Inv_subImageUpsertWithWhereUniqueWithoutChildFieldInput | Inv_subImageUpsertWithWhereUniqueWithoutChildFieldInput[]
    set?: Inv_subImageWhereUniqueInput | Inv_subImageWhereUniqueInput[]
    disconnect?: Inv_subImageWhereUniqueInput | Inv_subImageWhereUniqueInput[]
    delete?: Inv_subImageWhereUniqueInput | Inv_subImageWhereUniqueInput[]
    connect?: Inv_subImageWhereUniqueInput | Inv_subImageWhereUniqueInput[]
    update?: Inv_subImageUpdateWithWhereUniqueWithoutChildFieldInput | Inv_subImageUpdateWithWhereUniqueWithoutChildFieldInput[]
    updateMany?: Inv_subImageUpdateManyWithWhereWithoutChildFieldInput | Inv_subImageUpdateManyWithWhereWithoutChildFieldInput[]
    deleteMany?: Inv_subImageScalarWhereInput | Inv_subImageScalarWhereInput[]
  }

  export type InventoryUpdateOneWithoutChildInventoryNestedInput = {
    create?: XOR<InventoryCreateWithoutChildInventoryInput, InventoryUncheckedCreateWithoutChildInventoryInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutChildInventoryInput
    upsert?: InventoryUpsertWithoutChildInventoryInput
    disconnect?: InventoryWhereInput | boolean
    delete?: InventoryWhereInput | boolean
    connect?: InventoryWhereUniqueInput
    update?: XOR<XOR<InventoryUpdateToOneWithWhereWithoutChildInventoryInput, InventoryUpdateWithoutChildInventoryInput>, InventoryUncheckedUpdateWithoutChildInventoryInput>
  }

  export type Inv_subImageUncheckedUpdateManyWithoutChildFieldNestedInput = {
    create?: XOR<Inv_subImageCreateWithoutChildFieldInput, Inv_subImageUncheckedCreateWithoutChildFieldInput> | Inv_subImageCreateWithoutChildFieldInput[] | Inv_subImageUncheckedCreateWithoutChildFieldInput[]
    connectOrCreate?: Inv_subImageCreateOrConnectWithoutChildFieldInput | Inv_subImageCreateOrConnectWithoutChildFieldInput[]
    upsert?: Inv_subImageUpsertWithWhereUniqueWithoutChildFieldInput | Inv_subImageUpsertWithWhereUniqueWithoutChildFieldInput[]
    set?: Inv_subImageWhereUniqueInput | Inv_subImageWhereUniqueInput[]
    disconnect?: Inv_subImageWhereUniqueInput | Inv_subImageWhereUniqueInput[]
    delete?: Inv_subImageWhereUniqueInput | Inv_subImageWhereUniqueInput[]
    connect?: Inv_subImageWhereUniqueInput | Inv_subImageWhereUniqueInput[]
    update?: Inv_subImageUpdateWithWhereUniqueWithoutChildFieldInput | Inv_subImageUpdateWithWhereUniqueWithoutChildFieldInput[]
    updateMany?: Inv_subImageUpdateManyWithWhereWithoutChildFieldInput | Inv_subImageUpdateManyWithWhereWithoutChildFieldInput[]
    deleteMany?: Inv_subImageScalarWhereInput | Inv_subImageScalarWhereInput[]
  }

  export type ChildInventoryCreateNestedOneWithoutSubImageFieldOutInput = {
    create?: XOR<ChildInventoryCreateWithoutSubImageFieldOutInput, ChildInventoryUncheckedCreateWithoutSubImageFieldOutInput>
    connectOrCreate?: ChildInventoryCreateOrConnectWithoutSubImageFieldOutInput
    connect?: ChildInventoryWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ChildInventoryUpdateOneRequiredWithoutSubImageFieldOutNestedInput = {
    create?: XOR<ChildInventoryCreateWithoutSubImageFieldOutInput, ChildInventoryUncheckedCreateWithoutSubImageFieldOutInput>
    connectOrCreate?: ChildInventoryCreateOrConnectWithoutSubImageFieldOutInput
    upsert?: ChildInventoryUpsertWithoutSubImageFieldOutInput
    connect?: ChildInventoryWhereUniqueInput
    update?: XOR<XOR<ChildInventoryUpdateToOneWithWhereWithoutSubImageFieldOutInput, ChildInventoryUpdateWithoutSubImageFieldOutInput>, ChildInventoryUncheckedUpdateWithoutSubImageFieldOutInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type AccountDetailsCreateWithoutUserInput = {
    fullname?: string | null
    storeName?: string | null
    contactNo?: string | null
    Address?: string | null
    accountEmail: string
  }

  export type AccountDetailsUncheckedCreateWithoutUserInput = {
    id?: number
    fullname?: string | null
    storeName?: string | null
    contactNo?: string | null
    Address?: string | null
    accountEmail: string
  }

  export type AccountDetailsCreateOrConnectWithoutUserInput = {
    where: AccountDetailsWhereUniqueInput
    create: XOR<AccountDetailsCreateWithoutUserInput, AccountDetailsUncheckedCreateWithoutUserInput>
  }

  export type AccountDetailsUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountDetailsWhereUniqueInput
    update: XOR<AccountDetailsUpdateWithoutUserInput, AccountDetailsUncheckedUpdateWithoutUserInput>
    create: XOR<AccountDetailsCreateWithoutUserInput, AccountDetailsUncheckedCreateWithoutUserInput>
  }

  export type AccountDetailsUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountDetailsWhereUniqueInput
    data: XOR<AccountDetailsUpdateWithoutUserInput, AccountDetailsUncheckedUpdateWithoutUserInput>
  }

  export type AccountDetailsUpdateManyWithWhereWithoutUserInput = {
    where: AccountDetailsScalarWhereInput
    data: XOR<AccountDetailsUpdateManyMutationInput, AccountDetailsUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountDetailsScalarWhereInput = {
    AND?: AccountDetailsScalarWhereInput | AccountDetailsScalarWhereInput[]
    OR?: AccountDetailsScalarWhereInput[]
    NOT?: AccountDetailsScalarWhereInput | AccountDetailsScalarWhereInput[]
    id?: IntFilter<"AccountDetails"> | number
    userId?: StringFilter<"AccountDetails"> | string
    fullname?: StringNullableFilter<"AccountDetails"> | string | null
    storeName?: StringNullableFilter<"AccountDetails"> | string | null
    contactNo?: StringNullableFilter<"AccountDetails"> | string | null
    Address?: StringNullableFilter<"AccountDetails"> | string | null
    accountEmail?: StringFilter<"AccountDetails"> | string
  }

  export type UserCreateWithoutAccountDetailsInput = {
    id?: string
    email: string
    accountCode?: string | null
    password?: string | null
    accountLevel?: string | null
    loginAttemp?: string | null
    macAddress?: string | null
    agentIdentity?: string | null
    image?: string | null
    nameOfStore?: string | null
    dateCreated?: Date | string
    dateUpdated?: Date | string | null
  }

  export type UserUncheckedCreateWithoutAccountDetailsInput = {
    id?: string
    email: string
    accountCode?: string | null
    password?: string | null
    accountLevel?: string | null
    loginAttemp?: string | null
    macAddress?: string | null
    agentIdentity?: string | null
    image?: string | null
    nameOfStore?: string | null
    dateCreated?: Date | string
    dateUpdated?: Date | string | null
  }

  export type UserCreateOrConnectWithoutAccountDetailsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountDetailsInput, UserUncheckedCreateWithoutAccountDetailsInput>
  }

  export type UserUpsertWithoutAccountDetailsInput = {
    update: XOR<UserUpdateWithoutAccountDetailsInput, UserUncheckedUpdateWithoutAccountDetailsInput>
    create: XOR<UserCreateWithoutAccountDetailsInput, UserUncheckedCreateWithoutAccountDetailsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountDetailsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountDetailsInput, UserUncheckedUpdateWithoutAccountDetailsInput>
  }

  export type UserUpdateWithoutAccountDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    accountCode?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accountLevel?: NullableStringFieldUpdateOperationsInput | string | null
    loginAttemp?: NullableStringFieldUpdateOperationsInput | string | null
    macAddress?: NullableStringFieldUpdateOperationsInput | string | null
    agentIdentity?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    nameOfStore?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    dateUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateWithoutAccountDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    accountCode?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accountLevel?: NullableStringFieldUpdateOperationsInput | string | null
    loginAttemp?: NullableStringFieldUpdateOperationsInput | string | null
    macAddress?: NullableStringFieldUpdateOperationsInput | string | null
    agentIdentity?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    nameOfStore?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    dateUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ChildInventoryCreateWithoutChildInventoryFieldInput = {
    productCode?: string | null
    category?: string | null
    productType?: string | null
    imageReferences?: string | null
    model?: string | null
    name?: string | null
    color?: string | null
    size?: string | null
    price?: number | null
    stock?: number | null
    status?: string | null
    thumbnail?: string | null
    parentId?: string | null
    creator?: string | null
    editor?: string | null
    dateCreated?: Date | string
    dateUpdated?: Date | string | null
    agentEmail?: string | null
    subImageFieldOut?: Inv_subImageCreateNestedManyWithoutChildFieldInput
  }

  export type ChildInventoryUncheckedCreateWithoutChildInventoryFieldInput = {
    id?: number
    productCode?: string | null
    category?: string | null
    productType?: string | null
    imageReferences?: string | null
    model?: string | null
    name?: string | null
    color?: string | null
    size?: string | null
    price?: number | null
    stock?: number | null
    status?: string | null
    thumbnail?: string | null
    parentId?: string | null
    creator?: string | null
    editor?: string | null
    dateCreated?: Date | string
    dateUpdated?: Date | string | null
    agentEmail?: string | null
    subImageFieldOut?: Inv_subImageUncheckedCreateNestedManyWithoutChildFieldInput
  }

  export type ChildInventoryCreateOrConnectWithoutChildInventoryFieldInput = {
    where: ChildInventoryWhereUniqueInput
    create: XOR<ChildInventoryCreateWithoutChildInventoryFieldInput, ChildInventoryUncheckedCreateWithoutChildInventoryFieldInput>
  }

  export type ChildInventoryUpsertWithWhereUniqueWithoutChildInventoryFieldInput = {
    where: ChildInventoryWhereUniqueInput
    update: XOR<ChildInventoryUpdateWithoutChildInventoryFieldInput, ChildInventoryUncheckedUpdateWithoutChildInventoryFieldInput>
    create: XOR<ChildInventoryCreateWithoutChildInventoryFieldInput, ChildInventoryUncheckedCreateWithoutChildInventoryFieldInput>
  }

  export type ChildInventoryUpdateWithWhereUniqueWithoutChildInventoryFieldInput = {
    where: ChildInventoryWhereUniqueInput
    data: XOR<ChildInventoryUpdateWithoutChildInventoryFieldInput, ChildInventoryUncheckedUpdateWithoutChildInventoryFieldInput>
  }

  export type ChildInventoryUpdateManyWithWhereWithoutChildInventoryFieldInput = {
    where: ChildInventoryScalarWhereInput
    data: XOR<ChildInventoryUpdateManyMutationInput, ChildInventoryUncheckedUpdateManyWithoutChildInventoryFieldInput>
  }

  export type ChildInventoryScalarWhereInput = {
    AND?: ChildInventoryScalarWhereInput | ChildInventoryScalarWhereInput[]
    OR?: ChildInventoryScalarWhereInput[]
    NOT?: ChildInventoryScalarWhereInput | ChildInventoryScalarWhereInput[]
    id?: IntFilter<"ChildInventory"> | number
    productCode?: StringNullableFilter<"ChildInventory"> | string | null
    category?: StringNullableFilter<"ChildInventory"> | string | null
    productType?: StringNullableFilter<"ChildInventory"> | string | null
    imageReferences?: StringNullableFilter<"ChildInventory"> | string | null
    model?: StringNullableFilter<"ChildInventory"> | string | null
    style_Code?: StringNullableFilter<"ChildInventory"> | string | null
    name?: StringNullableFilter<"ChildInventory"> | string | null
    color?: StringNullableFilter<"ChildInventory"> | string | null
    size?: StringNullableFilter<"ChildInventory"> | string | null
    price?: FloatNullableFilter<"ChildInventory"> | number | null
    stock?: FloatNullableFilter<"ChildInventory"> | number | null
    status?: StringNullableFilter<"ChildInventory"> | string | null
    thumbnail?: StringNullableFilter<"ChildInventory"> | string | null
    parentId?: StringNullableFilter<"ChildInventory"> | string | null
    creator?: StringNullableFilter<"ChildInventory"> | string | null
    editor?: StringNullableFilter<"ChildInventory"> | string | null
    dateCreated?: DateTimeFilter<"ChildInventory"> | Date | string
    dateUpdated?: DateTimeNullableFilter<"ChildInventory"> | Date | string | null
    agentEmail?: StringNullableFilter<"ChildInventory"> | string | null
  }

  export type Inv_subImageCreateWithoutChildFieldInput = {
    subImageRelationParent?: number | null
    isVideo?: boolean
    ImagePath?: string | null
  }

  export type Inv_subImageUncheckedCreateWithoutChildFieldInput = {
    id?: number
    subImageRelationParent?: number | null
    isVideo?: boolean
    ImagePath?: string | null
  }

  export type Inv_subImageCreateOrConnectWithoutChildFieldInput = {
    where: Inv_subImageWhereUniqueInput
    create: XOR<Inv_subImageCreateWithoutChildFieldInput, Inv_subImageUncheckedCreateWithoutChildFieldInput>
  }

  export type InventoryCreateWithoutChildInventoryInput = {
    styleCode?: string
    productType?: string | null
    category?: string | null
    name?: string | null
    status?: string | null
    dateCreated?: Date | string
    dateUpdated?: Date | string | null
    agentEmail?: string | null
    brandname?: string | null
    collectionItem?: boolean | null
  }

  export type InventoryUncheckedCreateWithoutChildInventoryInput = {
    id?: number
    styleCode?: string
    productType?: string | null
    category?: string | null
    name?: string | null
    status?: string | null
    dateCreated?: Date | string
    dateUpdated?: Date | string | null
    agentEmail?: string | null
    brandname?: string | null
    collectionItem?: boolean | null
  }

  export type InventoryCreateOrConnectWithoutChildInventoryInput = {
    where: InventoryWhereUniqueInput
    create: XOR<InventoryCreateWithoutChildInventoryInput, InventoryUncheckedCreateWithoutChildInventoryInput>
  }

  export type Inv_subImageUpsertWithWhereUniqueWithoutChildFieldInput = {
    where: Inv_subImageWhereUniqueInput
    update: XOR<Inv_subImageUpdateWithoutChildFieldInput, Inv_subImageUncheckedUpdateWithoutChildFieldInput>
    create: XOR<Inv_subImageCreateWithoutChildFieldInput, Inv_subImageUncheckedCreateWithoutChildFieldInput>
  }

  export type Inv_subImageUpdateWithWhereUniqueWithoutChildFieldInput = {
    where: Inv_subImageWhereUniqueInput
    data: XOR<Inv_subImageUpdateWithoutChildFieldInput, Inv_subImageUncheckedUpdateWithoutChildFieldInput>
  }

  export type Inv_subImageUpdateManyWithWhereWithoutChildFieldInput = {
    where: Inv_subImageScalarWhereInput
    data: XOR<Inv_subImageUpdateManyMutationInput, Inv_subImageUncheckedUpdateManyWithoutChildFieldInput>
  }

  export type Inv_subImageScalarWhereInput = {
    AND?: Inv_subImageScalarWhereInput | Inv_subImageScalarWhereInput[]
    OR?: Inv_subImageScalarWhereInput[]
    NOT?: Inv_subImageScalarWhereInput | Inv_subImageScalarWhereInput[]
    id?: IntFilter<"Inv_subImage"> | number
    subImageRelationParent?: IntNullableFilter<"Inv_subImage"> | number | null
    subImageRelationChild?: IntFilter<"Inv_subImage"> | number
    isVideo?: BoolFilter<"Inv_subImage"> | boolean
    ImagePath?: StringNullableFilter<"Inv_subImage"> | string | null
  }

  export type InventoryUpsertWithoutChildInventoryInput = {
    update: XOR<InventoryUpdateWithoutChildInventoryInput, InventoryUncheckedUpdateWithoutChildInventoryInput>
    create: XOR<InventoryCreateWithoutChildInventoryInput, InventoryUncheckedCreateWithoutChildInventoryInput>
    where?: InventoryWhereInput
  }

  export type InventoryUpdateToOneWithWhereWithoutChildInventoryInput = {
    where?: InventoryWhereInput
    data: XOR<InventoryUpdateWithoutChildInventoryInput, InventoryUncheckedUpdateWithoutChildInventoryInput>
  }

  export type InventoryUpdateWithoutChildInventoryInput = {
    styleCode?: StringFieldUpdateOperationsInput | string
    productType?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    dateUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    brandname?: NullableStringFieldUpdateOperationsInput | string | null
    collectionItem?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type InventoryUncheckedUpdateWithoutChildInventoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    styleCode?: StringFieldUpdateOperationsInput | string
    productType?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    dateUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    brandname?: NullableStringFieldUpdateOperationsInput | string | null
    collectionItem?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ChildInventoryCreateWithoutSubImageFieldOutInput = {
    productCode?: string | null
    category?: string | null
    productType?: string | null
    imageReferences?: string | null
    model?: string | null
    name?: string | null
    color?: string | null
    size?: string | null
    price?: number | null
    stock?: number | null
    status?: string | null
    thumbnail?: string | null
    parentId?: string | null
    creator?: string | null
    editor?: string | null
    dateCreated?: Date | string
    dateUpdated?: Date | string | null
    agentEmail?: string | null
    childInventoryField?: InventoryCreateNestedOneWithoutChildInventoryInput
  }

  export type ChildInventoryUncheckedCreateWithoutSubImageFieldOutInput = {
    id?: number
    productCode?: string | null
    category?: string | null
    productType?: string | null
    imageReferences?: string | null
    model?: string | null
    style_Code?: string | null
    name?: string | null
    color?: string | null
    size?: string | null
    price?: number | null
    stock?: number | null
    status?: string | null
    thumbnail?: string | null
    parentId?: string | null
    creator?: string | null
    editor?: string | null
    dateCreated?: Date | string
    dateUpdated?: Date | string | null
    agentEmail?: string | null
  }

  export type ChildInventoryCreateOrConnectWithoutSubImageFieldOutInput = {
    where: ChildInventoryWhereUniqueInput
    create: XOR<ChildInventoryCreateWithoutSubImageFieldOutInput, ChildInventoryUncheckedCreateWithoutSubImageFieldOutInput>
  }

  export type ChildInventoryUpsertWithoutSubImageFieldOutInput = {
    update: XOR<ChildInventoryUpdateWithoutSubImageFieldOutInput, ChildInventoryUncheckedUpdateWithoutSubImageFieldOutInput>
    create: XOR<ChildInventoryCreateWithoutSubImageFieldOutInput, ChildInventoryUncheckedCreateWithoutSubImageFieldOutInput>
    where?: ChildInventoryWhereInput
  }

  export type ChildInventoryUpdateToOneWithWhereWithoutSubImageFieldOutInput = {
    where?: ChildInventoryWhereInput
    data: XOR<ChildInventoryUpdateWithoutSubImageFieldOutInput, ChildInventoryUncheckedUpdateWithoutSubImageFieldOutInput>
  }

  export type ChildInventoryUpdateWithoutSubImageFieldOutInput = {
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    productType?: NullableStringFieldUpdateOperationsInput | string | null
    imageReferences?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    editor?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    dateUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    childInventoryField?: InventoryUpdateOneWithoutChildInventoryNestedInput
  }

  export type ChildInventoryUncheckedUpdateWithoutSubImageFieldOutInput = {
    id?: IntFieldUpdateOperationsInput | number
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    productType?: NullableStringFieldUpdateOperationsInput | string | null
    imageReferences?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    style_Code?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    editor?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    dateUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agentEmail?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountDetailsUpdateWithoutUserInput = {
    fullname?: NullableStringFieldUpdateOperationsInput | string | null
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    contactNo?: NullableStringFieldUpdateOperationsInput | string | null
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    accountEmail?: StringFieldUpdateOperationsInput | string
  }

  export type AccountDetailsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullname?: NullableStringFieldUpdateOperationsInput | string | null
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    contactNo?: NullableStringFieldUpdateOperationsInput | string | null
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    accountEmail?: StringFieldUpdateOperationsInput | string
  }

  export type AccountDetailsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullname?: NullableStringFieldUpdateOperationsInput | string | null
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    contactNo?: NullableStringFieldUpdateOperationsInput | string | null
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    accountEmail?: StringFieldUpdateOperationsInput | string
  }

  export type ChildInventoryUpdateWithoutChildInventoryFieldInput = {
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    productType?: NullableStringFieldUpdateOperationsInput | string | null
    imageReferences?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    editor?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    dateUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    subImageFieldOut?: Inv_subImageUpdateManyWithoutChildFieldNestedInput
  }

  export type ChildInventoryUncheckedUpdateWithoutChildInventoryFieldInput = {
    id?: IntFieldUpdateOperationsInput | number
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    productType?: NullableStringFieldUpdateOperationsInput | string | null
    imageReferences?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    editor?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    dateUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agentEmail?: NullableStringFieldUpdateOperationsInput | string | null
    subImageFieldOut?: Inv_subImageUncheckedUpdateManyWithoutChildFieldNestedInput
  }

  export type ChildInventoryUncheckedUpdateManyWithoutChildInventoryFieldInput = {
    id?: IntFieldUpdateOperationsInput | number
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    productType?: NullableStringFieldUpdateOperationsInput | string | null
    imageReferences?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    stock?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: NullableStringFieldUpdateOperationsInput | string | null
    editor?: NullableStringFieldUpdateOperationsInput | string | null
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    dateUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agentEmail?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Inv_subImageUpdateWithoutChildFieldInput = {
    subImageRelationParent?: NullableIntFieldUpdateOperationsInput | number | null
    isVideo?: BoolFieldUpdateOperationsInput | boolean
    ImagePath?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Inv_subImageUncheckedUpdateWithoutChildFieldInput = {
    id?: IntFieldUpdateOperationsInput | number
    subImageRelationParent?: NullableIntFieldUpdateOperationsInput | number | null
    isVideo?: BoolFieldUpdateOperationsInput | boolean
    ImagePath?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Inv_subImageUncheckedUpdateManyWithoutChildFieldInput = {
    id?: IntFieldUpdateOperationsInput | number
    subImageRelationParent?: NullableIntFieldUpdateOperationsInput | number | null
    isVideo?: BoolFieldUpdateOperationsInput | boolean
    ImagePath?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InventoryCountOutputTypeDefaultArgs instead
     */
    export type InventoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InventoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChildInventoryCountOutputTypeDefaultArgs instead
     */
    export type ChildInventoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChildInventoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CrowdMessagesDefaultArgs instead
     */
    export type CrowdMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CrowdMessagesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountDetailsDefaultArgs instead
     */
    export type AccountDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountDetailsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryDefaultArgs instead
     */
    export type CategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductTypesDefaultArgs instead
     */
    export type ProductTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductTypesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BrandnameDefaultArgs instead
     */
    export type BrandnameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BrandnameDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InventoryDefaultArgs instead
     */
    export type InventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InventoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChildInventoryDefaultArgs instead
     */
    export type ChildInventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChildInventoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Inv_subImageDefaultArgs instead
     */
    export type Inv_subImageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Inv_subImageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AllowedDevicesDefaultArgs instead
     */
    export type AllowedDevicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AllowedDevicesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NumberOfViewsDefaultArgs instead
     */
    export type NumberOfViewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NumberOfViewsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WebsiteVisitsDefaultArgs instead
     */
    export type WebsiteVisitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WebsiteVisitsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}